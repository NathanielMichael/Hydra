// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hero.proto

package D3.Hero;

public final class Hero {
  private Hero() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class VisualItem extends
      com.google.protobuf.GeneratedMessage {
    // Use VisualItem.newBuilder() to construct.
    private VisualItem() {
      initFields();
    }
    private VisualItem(boolean noInit) {}
    
    private static final VisualItem defaultInstance;
    public static VisualItem getDefaultInstance() {
      return defaultInstance;
    }
    
    public VisualItem getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_VisualItem_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_VisualItem_fieldAccessorTable;
    }
    
    // optional sfixed32 gbid = 1;
    public static final int GBID_FIELD_NUMBER = 1;
    private boolean hasGbid;
    private int gbid_ = 0;
    public boolean hasGbid() { return hasGbid; }
    public int getGbid() { return gbid_; }
    
    // optional sint32 dye_type = 2;
    public static final int DYE_TYPE_FIELD_NUMBER = 2;
    private boolean hasDyeType;
    private int dyeType_ = 0;
    public boolean hasDyeType() { return hasDyeType; }
    public int getDyeType() { return dyeType_; }
    
    // optional sint32 item_effect_type = 3;
    public static final int ITEM_EFFECT_TYPE_FIELD_NUMBER = 3;
    private boolean hasItemEffectType;
    private int itemEffectType_ = 0;
    public boolean hasItemEffectType() { return hasItemEffectType; }
    public int getItemEffectType() { return itemEffectType_; }
    
    // optional sint32 effect_level = 4;
    public static final int EFFECT_LEVEL_FIELD_NUMBER = 4;
    private boolean hasEffectLevel;
    private int effectLevel_ = 0;
    public boolean hasEffectLevel() { return hasEffectLevel; }
    public int getEffectLevel() { return effectLevel_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasGbid()) {
        output.writeSFixed32(1, getGbid());
      }
      if (hasDyeType()) {
        output.writeSInt32(2, getDyeType());
      }
      if (hasItemEffectType()) {
        output.writeSInt32(3, getItemEffectType());
      }
      if (hasEffectLevel()) {
        output.writeSInt32(4, getEffectLevel());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasGbid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getGbid());
      }
      if (hasDyeType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getDyeType());
      }
      if (hasItemEffectType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getItemEffectType());
      }
      if (hasEffectLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, getEffectLevel());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.VisualItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.VisualItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.VisualItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.VisualItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.VisualItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.VisualItem result;
      
      // Construct using D3.Hero.Hero.VisualItem.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.VisualItem();
        return builder;
      }
      
      protected D3.Hero.Hero.VisualItem internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.VisualItem();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.VisualItem.getDescriptor();
      }
      
      public D3.Hero.Hero.VisualItem getDefaultInstanceForType() {
        return D3.Hero.Hero.VisualItem.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.VisualItem build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.VisualItem buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.VisualItem buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.VisualItem returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.VisualItem) {
          return mergeFrom((D3.Hero.Hero.VisualItem)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.VisualItem other) {
        if (other == D3.Hero.Hero.VisualItem.getDefaultInstance()) return this;
        if (other.hasGbid()) {
          setGbid(other.getGbid());
        }
        if (other.hasDyeType()) {
          setDyeType(other.getDyeType());
        }
        if (other.hasItemEffectType()) {
          setItemEffectType(other.getItemEffectType());
        }
        if (other.hasEffectLevel()) {
          setEffectLevel(other.getEffectLevel());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setGbid(input.readSFixed32());
              break;
            }
            case 16: {
              setDyeType(input.readSInt32());
              break;
            }
            case 24: {
              setItemEffectType(input.readSInt32());
              break;
            }
            case 32: {
              setEffectLevel(input.readSInt32());
              break;
            }
          }
        }
      }
      
      
      // optional sfixed32 gbid = 1;
      public boolean hasGbid() {
        return result.hasGbid();
      }
      public int getGbid() {
        return result.getGbid();
      }
      public Builder setGbid(int value) {
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder clearGbid() {
        result.hasGbid = false;
        result.gbid_ = 0;
        return this;
      }
      
      // optional sint32 dye_type = 2;
      public boolean hasDyeType() {
        return result.hasDyeType();
      }
      public int getDyeType() {
        return result.getDyeType();
      }
      public Builder setDyeType(int value) {
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder clearDyeType() {
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      // optional sint32 item_effect_type = 3;
      public boolean hasItemEffectType() {
        return result.hasItemEffectType();
      }
      public int getItemEffectType() {
        return result.getItemEffectType();
      }
      public Builder setItemEffectType(int value) {
        result.hasItemEffectType = true;
        result.itemEffectType_ = value;
        return this;
      }
      public Builder clearItemEffectType() {
        result.hasItemEffectType = false;
        result.itemEffectType_ = 0;
        return this;
      }
      
      // optional sint32 effect_level = 4;
      public boolean hasEffectLevel() {
        return result.hasEffectLevel();
      }
      public int getEffectLevel() {
        return result.getEffectLevel();
      }
      public Builder setEffectLevel(int value) {
        result.hasEffectLevel = true;
        result.effectLevel_ = value;
        return this;
      }
      public Builder clearEffectLevel() {
        result.hasEffectLevel = false;
        result.effectLevel_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.VisualItem)
    }
    
    static {
      defaultInstance = new VisualItem(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.VisualItem)
  }
  
  public static final class VisualEquipment extends
      com.google.protobuf.GeneratedMessage {
    // Use VisualEquipment.newBuilder() to construct.
    private VisualEquipment() {
      initFields();
    }
    private VisualEquipment(boolean noInit) {}
    
    private static final VisualEquipment defaultInstance;
    public static VisualEquipment getDefaultInstance() {
      return defaultInstance;
    }
    
    public VisualEquipment getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_VisualEquipment_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_VisualEquipment_fieldAccessorTable;
    }
    
    // repeated .D3.Hero.VisualItem visual_item = 1;
    public static final int VISUAL_ITEM_FIELD_NUMBER = 1;
    private java.util.List<D3.Hero.Hero.VisualItem> visualItem_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.VisualItem> getVisualItemList() {
      return visualItem_;
    }
    public int getVisualItemCount() { return visualItem_.size(); }
    public D3.Hero.Hero.VisualItem getVisualItem(int index) {
      return visualItem_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (D3.Hero.Hero.VisualItem element : getVisualItemList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (D3.Hero.Hero.VisualItem element : getVisualItemList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.VisualEquipment parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.VisualEquipment parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.VisualEquipment parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.VisualEquipment prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.VisualEquipment result;
      
      // Construct using D3.Hero.Hero.VisualEquipment.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.VisualEquipment();
        return builder;
      }
      
      protected D3.Hero.Hero.VisualEquipment internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.VisualEquipment();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.VisualEquipment.getDescriptor();
      }
      
      public D3.Hero.Hero.VisualEquipment getDefaultInstanceForType() {
        return D3.Hero.Hero.VisualEquipment.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.VisualEquipment build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.VisualEquipment buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.VisualEquipment buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.visualItem_ != java.util.Collections.EMPTY_LIST) {
          result.visualItem_ =
            java.util.Collections.unmodifiableList(result.visualItem_);
        }
        D3.Hero.Hero.VisualEquipment returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.VisualEquipment) {
          return mergeFrom((D3.Hero.Hero.VisualEquipment)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.VisualEquipment other) {
        if (other == D3.Hero.Hero.VisualEquipment.getDefaultInstance()) return this;
        if (!other.visualItem_.isEmpty()) {
          if (result.visualItem_.isEmpty()) {
            result.visualItem_ = new java.util.ArrayList<D3.Hero.Hero.VisualItem>();
          }
          result.visualItem_.addAll(other.visualItem_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.Hero.Hero.VisualItem.Builder subBuilder = D3.Hero.Hero.VisualItem.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addVisualItem(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .D3.Hero.VisualItem visual_item = 1;
      public java.util.List<D3.Hero.Hero.VisualItem> getVisualItemList() {
        return java.util.Collections.unmodifiableList(result.visualItem_);
      }
      public int getVisualItemCount() {
        return result.getVisualItemCount();
      }
      public D3.Hero.Hero.VisualItem getVisualItem(int index) {
        return result.getVisualItem(index);
      }
      public Builder setVisualItem(int index, D3.Hero.Hero.VisualItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.visualItem_.set(index, value);
        return this;
      }
      public Builder setVisualItem(int index, D3.Hero.Hero.VisualItem.Builder builderForValue) {
        result.visualItem_.set(index, builderForValue.build());
        return this;
      }
      public Builder addVisualItem(D3.Hero.Hero.VisualItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.visualItem_.isEmpty()) {
          result.visualItem_ = new java.util.ArrayList<D3.Hero.Hero.VisualItem>();
        }
        result.visualItem_.add(value);
        return this;
      }
      public Builder addVisualItem(D3.Hero.Hero.VisualItem.Builder builderForValue) {
        if (result.visualItem_.isEmpty()) {
          result.visualItem_ = new java.util.ArrayList<D3.Hero.Hero.VisualItem>();
        }
        result.visualItem_.add(builderForValue.build());
        return this;
      }
      public Builder addAllVisualItem(
          java.lang.Iterable<? extends D3.Hero.Hero.VisualItem> values) {
        if (result.visualItem_.isEmpty()) {
          result.visualItem_ = new java.util.ArrayList<D3.Hero.Hero.VisualItem>();
        }
        super.addAll(values, result.visualItem_);
        return this;
      }
      public Builder clearVisualItem() {
        result.visualItem_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.VisualEquipment)
    }
    
    static {
      defaultInstance = new VisualEquipment(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.VisualEquipment)
  }
  
  public static final class QuestHistoryEntry extends
      com.google.protobuf.GeneratedMessage {
    // Use QuestHistoryEntry.newBuilder() to construct.
    private QuestHistoryEntry() {
      initFields();
    }
    private QuestHistoryEntry(boolean noInit) {}
    
    private static final QuestHistoryEntry defaultInstance;
    public static QuestHistoryEntry getDefaultInstance() {
      return defaultInstance;
    }
    
    public QuestHistoryEntry getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_QuestHistoryEntry_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_QuestHistoryEntry_fieldAccessorTable;
    }
    
    // required sfixed32 sno_quest = 1;
    public static final int SNO_QUEST_FIELD_NUMBER = 1;
    private boolean hasSnoQuest;
    private int snoQuest_ = 0;
    public boolean hasSnoQuest() { return hasSnoQuest; }
    public int getSnoQuest() { return snoQuest_; }
    
    // required sint32 difficulty = 2;
    public static final int DIFFICULTY_FIELD_NUMBER = 2;
    private boolean hasDifficulty;
    private int difficulty_ = 0;
    public boolean hasDifficulty() { return hasDifficulty; }
    public int getDifficulty() { return difficulty_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSnoQuest) return false;
      if (!hasDifficulty) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSnoQuest()) {
        output.writeSFixed32(1, getSnoQuest());
      }
      if (hasDifficulty()) {
        output.writeSInt32(2, getDifficulty());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSnoQuest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getSnoQuest());
      }
      if (hasDifficulty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getDifficulty());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.QuestHistoryEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.QuestHistoryEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.QuestHistoryEntry result;
      
      // Construct using D3.Hero.Hero.QuestHistoryEntry.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.QuestHistoryEntry();
        return builder;
      }
      
      protected D3.Hero.Hero.QuestHistoryEntry internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.QuestHistoryEntry();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.QuestHistoryEntry.getDescriptor();
      }
      
      public D3.Hero.Hero.QuestHistoryEntry getDefaultInstanceForType() {
        return D3.Hero.Hero.QuestHistoryEntry.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.QuestHistoryEntry build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.QuestHistoryEntry buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.QuestHistoryEntry buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.QuestHistoryEntry returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.QuestHistoryEntry) {
          return mergeFrom((D3.Hero.Hero.QuestHistoryEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.QuestHistoryEntry other) {
        if (other == D3.Hero.Hero.QuestHistoryEntry.getDefaultInstance()) return this;
        if (other.hasSnoQuest()) {
          setSnoQuest(other.getSnoQuest());
        }
        if (other.hasDifficulty()) {
          setDifficulty(other.getDifficulty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setSnoQuest(input.readSFixed32());
              break;
            }
            case 16: {
              setDifficulty(input.readSInt32());
              break;
            }
          }
        }
      }
      
      
      // required sfixed32 sno_quest = 1;
      public boolean hasSnoQuest() {
        return result.hasSnoQuest();
      }
      public int getSnoQuest() {
        return result.getSnoQuest();
      }
      public Builder setSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder clearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      // required sint32 difficulty = 2;
      public boolean hasDifficulty() {
        return result.hasDifficulty();
      }
      public int getDifficulty() {
        return result.getDifficulty();
      }
      public Builder setDifficulty(int value) {
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder clearDifficulty() {
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.QuestHistoryEntry)
    }
    
    static {
      defaultInstance = new QuestHistoryEntry(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.QuestHistoryEntry)
  }
  
  public static final class QuestRewardHistoryEntry extends
      com.google.protobuf.GeneratedMessage {
    // Use QuestRewardHistoryEntry.newBuilder() to construct.
    private QuestRewardHistoryEntry() {
      initFields();
    }
    private QuestRewardHistoryEntry(boolean noInit) {}
    
    private static final QuestRewardHistoryEntry defaultInstance;
    public static QuestRewardHistoryEntry getDefaultInstance() {
      return defaultInstance;
    }
    
    public QuestRewardHistoryEntry getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_QuestRewardHistoryEntry_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_QuestRewardHistoryEntry_fieldAccessorTable;
    }
    
    // required sfixed32 sno_quest = 1;
    public static final int SNO_QUEST_FIELD_NUMBER = 1;
    private boolean hasSnoQuest;
    private int snoQuest_ = 0;
    public boolean hasSnoQuest() { return hasSnoQuest; }
    public int getSnoQuest() { return snoQuest_; }
    
    // required sint32 step_uid = 2;
    public static final int STEP_UID_FIELD_NUMBER = 2;
    private boolean hasStepUid;
    private int stepUid_ = 0;
    public boolean hasStepUid() { return hasStepUid; }
    public int getStepUid() { return stepUid_; }
    
    // required sint32 difficulty = 3;
    public static final int DIFFICULTY_FIELD_NUMBER = 3;
    private boolean hasDifficulty;
    private int difficulty_ = 0;
    public boolean hasDifficulty() { return hasDifficulty; }
    public int getDifficulty() { return difficulty_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSnoQuest) return false;
      if (!hasStepUid) return false;
      if (!hasDifficulty) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSnoQuest()) {
        output.writeSFixed32(1, getSnoQuest());
      }
      if (hasStepUid()) {
        output.writeSInt32(2, getStepUid());
      }
      if (hasDifficulty()) {
        output.writeSInt32(3, getDifficulty());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSnoQuest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getSnoQuest());
      }
      if (hasStepUid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getStepUid());
      }
      if (hasDifficulty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getDifficulty());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.QuestRewardHistoryEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.QuestRewardHistoryEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.QuestRewardHistoryEntry result;
      
      // Construct using D3.Hero.Hero.QuestRewardHistoryEntry.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.QuestRewardHistoryEntry();
        return builder;
      }
      
      protected D3.Hero.Hero.QuestRewardHistoryEntry internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.QuestRewardHistoryEntry();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.QuestRewardHistoryEntry.getDescriptor();
      }
      
      public D3.Hero.Hero.QuestRewardHistoryEntry getDefaultInstanceForType() {
        return D3.Hero.Hero.QuestRewardHistoryEntry.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.QuestRewardHistoryEntry build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.QuestRewardHistoryEntry buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.QuestRewardHistoryEntry buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.QuestRewardHistoryEntry returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.QuestRewardHistoryEntry) {
          return mergeFrom((D3.Hero.Hero.QuestRewardHistoryEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.QuestRewardHistoryEntry other) {
        if (other == D3.Hero.Hero.QuestRewardHistoryEntry.getDefaultInstance()) return this;
        if (other.hasSnoQuest()) {
          setSnoQuest(other.getSnoQuest());
        }
        if (other.hasStepUid()) {
          setStepUid(other.getStepUid());
        }
        if (other.hasDifficulty()) {
          setDifficulty(other.getDifficulty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setSnoQuest(input.readSFixed32());
              break;
            }
            case 16: {
              setStepUid(input.readSInt32());
              break;
            }
            case 24: {
              setDifficulty(input.readSInt32());
              break;
            }
          }
        }
      }
      
      
      // required sfixed32 sno_quest = 1;
      public boolean hasSnoQuest() {
        return result.hasSnoQuest();
      }
      public int getSnoQuest() {
        return result.getSnoQuest();
      }
      public Builder setSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder clearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      // required sint32 step_uid = 2;
      public boolean hasStepUid() {
        return result.hasStepUid();
      }
      public int getStepUid() {
        return result.getStepUid();
      }
      public Builder setStepUid(int value) {
        result.hasStepUid = true;
        result.stepUid_ = value;
        return this;
      }
      public Builder clearStepUid() {
        result.hasStepUid = false;
        result.stepUid_ = 0;
        return this;
      }
      
      // required sint32 difficulty = 3;
      public boolean hasDifficulty() {
        return result.hasDifficulty();
      }
      public int getDifficulty() {
        return result.getDifficulty();
      }
      public Builder setDifficulty(int value) {
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder clearDifficulty() {
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.QuestRewardHistoryEntry)
    }
    
    static {
      defaultInstance = new QuestRewardHistoryEntry(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.QuestRewardHistoryEntry)
  }
  
  public static final class Digest extends
      com.google.protobuf.GeneratedMessage {
    // Use Digest.newBuilder() to construct.
    private Digest() {
      initFields();
    }
    private Digest(boolean noInit) {}
    
    private static final Digest defaultInstance;
    public static Digest getDefaultInstance() {
      return defaultInstance;
    }
    
    public Digest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_Digest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_Digest_fieldAccessorTable;
    }
    
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private boolean hasVersion;
    private int version_ = 0;
    public boolean hasVersion() { return hasVersion; }
    public int getVersion() { return version_; }
    
    // required .D3.OnlineService.EntityId hero_id = 2;
    public static final int HERO_ID_FIELD_NUMBER = 2;
    private boolean hasHeroId;
    private D3.OnlineService.OnlineService.EntityId heroId_;
    public boolean hasHeroId() { return hasHeroId; }
    public D3.OnlineService.OnlineService.EntityId getHeroId() { return heroId_; }
    
    // required string hero_name = 3;
    public static final int HERO_NAME_FIELD_NUMBER = 3;
    private boolean hasHeroName;
    private java.lang.String heroName_ = "";
    public boolean hasHeroName() { return hasHeroName; }
    public java.lang.String getHeroName() { return heroName_; }
    
    // required sfixed32 gbid_class = 4;
    public static final int GBID_CLASS_FIELD_NUMBER = 4;
    private boolean hasGbidClass;
    private int gbidClass_ = 0;
    public boolean hasGbidClass() { return hasGbidClass; }
    public int getGbidClass() { return gbidClass_; }
    
    // required sint32 level = 5;
    public static final int LEVEL_FIELD_NUMBER = 5;
    private boolean hasLevel;
    private int level_ = 0;
    public boolean hasLevel() { return hasLevel; }
    public int getLevel() { return level_; }
    
    // required uint32 player_flags = 6;
    public static final int PLAYER_FLAGS_FIELD_NUMBER = 6;
    private boolean hasPlayerFlags;
    private int playerFlags_ = 0;
    public boolean hasPlayerFlags() { return hasPlayerFlags; }
    public int getPlayerFlags() { return playerFlags_; }
    
    // required .D3.Hero.VisualEquipment visual_equipment = 7;
    public static final int VISUAL_EQUIPMENT_FIELD_NUMBER = 7;
    private boolean hasVisualEquipment;
    private D3.Hero.Hero.VisualEquipment visualEquipment_;
    public boolean hasVisualEquipment() { return hasVisualEquipment; }
    public D3.Hero.Hero.VisualEquipment getVisualEquipment() { return visualEquipment_; }
    
    // repeated .D3.Hero.QuestHistoryEntry quest_history = 8;
    public static final int QUEST_HISTORY_FIELD_NUMBER = 8;
    private java.util.List<D3.Hero.Hero.QuestHistoryEntry> questHistory_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.QuestHistoryEntry> getQuestHistoryList() {
      return questHistory_;
    }
    public int getQuestHistoryCount() { return questHistory_.size(); }
    public D3.Hero.Hero.QuestHistoryEntry getQuestHistory(int index) {
      return questHistory_.get(index);
    }
    
    // required sint32 last_played_act = 10;
    public static final int LAST_PLAYED_ACT_FIELD_NUMBER = 10;
    private boolean hasLastPlayedAct;
    private int lastPlayedAct_ = 0;
    public boolean hasLastPlayedAct() { return hasLastPlayedAct; }
    public int getLastPlayedAct() { return lastPlayedAct_; }
    
    // required sint32 highest_unlocked_act = 11;
    public static final int HIGHEST_UNLOCKED_ACT_FIELD_NUMBER = 11;
    private boolean hasHighestUnlockedAct;
    private int highestUnlockedAct_ = 0;
    public boolean hasHighestUnlockedAct() { return hasHighestUnlockedAct; }
    public int getHighestUnlockedAct() { return highestUnlockedAct_; }
    
    // required sint32 last_played_difficulty = 12;
    public static final int LAST_PLAYED_DIFFICULTY_FIELD_NUMBER = 12;
    private boolean hasLastPlayedDifficulty;
    private int lastPlayedDifficulty_ = 0;
    public boolean hasLastPlayedDifficulty() { return hasLastPlayedDifficulty; }
    public int getLastPlayedDifficulty() { return lastPlayedDifficulty_; }
    
    // required sint32 highest_unlocked_difficulty = 13;
    public static final int HIGHEST_UNLOCKED_DIFFICULTY_FIELD_NUMBER = 13;
    private boolean hasHighestUnlockedDifficulty;
    private int highestUnlockedDifficulty_ = 0;
    public boolean hasHighestUnlockedDifficulty() { return hasHighestUnlockedDifficulty; }
    public int getHighestUnlockedDifficulty() { return highestUnlockedDifficulty_; }
    
    // required sfixed32 last_played_quest = 14;
    public static final int LAST_PLAYED_QUEST_FIELD_NUMBER = 14;
    private boolean hasLastPlayedQuest;
    private int lastPlayedQuest_ = 0;
    public boolean hasLastPlayedQuest() { return hasLastPlayedQuest; }
    public int getLastPlayedQuest() { return lastPlayedQuest_; }
    
    // required sint32 last_played_quest_step = 15;
    public static final int LAST_PLAYED_QUEST_STEP_FIELD_NUMBER = 15;
    private boolean hasLastPlayedQuestStep;
    private int lastPlayedQuestStep_ = 0;
    public boolean hasLastPlayedQuestStep() { return hasLastPlayedQuestStep; }
    public int getLastPlayedQuestStep() { return lastPlayedQuestStep_; }
    
    // required uint32 time_played = 16;
    public static final int TIME_PLAYED_FIELD_NUMBER = 16;
    private boolean hasTimePlayed;
    private int timePlayed_ = 0;
    public boolean hasTimePlayed() { return hasTimePlayed; }
    public int getTimePlayed() { return timePlayed_; }
    
    private void initFields() {
      heroId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      visualEquipment_ = D3.Hero.Hero.VisualEquipment.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasVersion) return false;
      if (!hasHeroId) return false;
      if (!hasHeroName) return false;
      if (!hasGbidClass) return false;
      if (!hasLevel) return false;
      if (!hasPlayerFlags) return false;
      if (!hasVisualEquipment) return false;
      if (!hasLastPlayedAct) return false;
      if (!hasHighestUnlockedAct) return false;
      if (!hasLastPlayedDifficulty) return false;
      if (!hasHighestUnlockedDifficulty) return false;
      if (!hasLastPlayedQuest) return false;
      if (!hasLastPlayedQuestStep) return false;
      if (!hasTimePlayed) return false;
      if (!getHeroId().isInitialized()) return false;
      for (D3.Hero.Hero.QuestHistoryEntry element : getQuestHistoryList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVersion()) {
        output.writeUInt32(1, getVersion());
      }
      if (hasHeroId()) {
        output.writeMessage(2, getHeroId());
      }
      if (hasHeroName()) {
        output.writeString(3, getHeroName());
      }
      if (hasGbidClass()) {
        output.writeSFixed32(4, getGbidClass());
      }
      if (hasLevel()) {
        output.writeSInt32(5, getLevel());
      }
      if (hasPlayerFlags()) {
        output.writeUInt32(6, getPlayerFlags());
      }
      if (hasVisualEquipment()) {
        output.writeMessage(7, getVisualEquipment());
      }
      for (D3.Hero.Hero.QuestHistoryEntry element : getQuestHistoryList()) {
        output.writeMessage(8, element);
      }
      if (hasLastPlayedAct()) {
        output.writeSInt32(10, getLastPlayedAct());
      }
      if (hasHighestUnlockedAct()) {
        output.writeSInt32(11, getHighestUnlockedAct());
      }
      if (hasLastPlayedDifficulty()) {
        output.writeSInt32(12, getLastPlayedDifficulty());
      }
      if (hasHighestUnlockedDifficulty()) {
        output.writeSInt32(13, getHighestUnlockedDifficulty());
      }
      if (hasLastPlayedQuest()) {
        output.writeSFixed32(14, getLastPlayedQuest());
      }
      if (hasLastPlayedQuestStep()) {
        output.writeSInt32(15, getLastPlayedQuestStep());
      }
      if (hasTimePlayed()) {
        output.writeUInt32(16, getTimePlayed());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getVersion());
      }
      if (hasHeroId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getHeroId());
      }
      if (hasHeroName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getHeroName());
      }
      if (hasGbidClass()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(4, getGbidClass());
      }
      if (hasLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, getLevel());
      }
      if (hasPlayerFlags()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, getPlayerFlags());
      }
      if (hasVisualEquipment()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getVisualEquipment());
      }
      for (D3.Hero.Hero.QuestHistoryEntry element : getQuestHistoryList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, element);
      }
      if (hasLastPlayedAct()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(10, getLastPlayedAct());
      }
      if (hasHighestUnlockedAct()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, getHighestUnlockedAct());
      }
      if (hasLastPlayedDifficulty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(12, getLastPlayedDifficulty());
      }
      if (hasHighestUnlockedDifficulty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(13, getHighestUnlockedDifficulty());
      }
      if (hasLastPlayedQuest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(14, getLastPlayedQuest());
      }
      if (hasLastPlayedQuestStep()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(15, getLastPlayedQuestStep());
      }
      if (hasTimePlayed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, getTimePlayed());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.Digest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.Digest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Digest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.Digest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Digest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.Digest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Digest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.Digest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.Digest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.Digest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.Digest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.Digest result;
      
      // Construct using D3.Hero.Hero.Digest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.Digest();
        return builder;
      }
      
      protected D3.Hero.Hero.Digest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.Digest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.Digest.getDescriptor();
      }
      
      public D3.Hero.Hero.Digest getDefaultInstanceForType() {
        return D3.Hero.Hero.Digest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.Digest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.Digest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.Digest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.questHistory_ != java.util.Collections.EMPTY_LIST) {
          result.questHistory_ =
            java.util.Collections.unmodifiableList(result.questHistory_);
        }
        D3.Hero.Hero.Digest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.Digest) {
          return mergeFrom((D3.Hero.Hero.Digest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.Digest other) {
        if (other == D3.Hero.Hero.Digest.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasHeroId()) {
          mergeHeroId(other.getHeroId());
        }
        if (other.hasHeroName()) {
          setHeroName(other.getHeroName());
        }
        if (other.hasGbidClass()) {
          setGbidClass(other.getGbidClass());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasPlayerFlags()) {
          setPlayerFlags(other.getPlayerFlags());
        }
        if (other.hasVisualEquipment()) {
          mergeVisualEquipment(other.getVisualEquipment());
        }
        if (!other.questHistory_.isEmpty()) {
          if (result.questHistory_.isEmpty()) {
            result.questHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestHistoryEntry>();
          }
          result.questHistory_.addAll(other.questHistory_);
        }
        if (other.hasLastPlayedAct()) {
          setLastPlayedAct(other.getLastPlayedAct());
        }
        if (other.hasHighestUnlockedAct()) {
          setHighestUnlockedAct(other.getHighestUnlockedAct());
        }
        if (other.hasLastPlayedDifficulty()) {
          setLastPlayedDifficulty(other.getLastPlayedDifficulty());
        }
        if (other.hasHighestUnlockedDifficulty()) {
          setHighestUnlockedDifficulty(other.getHighestUnlockedDifficulty());
        }
        if (other.hasLastPlayedQuest()) {
          setLastPlayedQuest(other.getLastPlayedQuest());
        }
        if (other.hasLastPlayedQuestStep()) {
          setLastPlayedQuestStep(other.getLastPlayedQuestStep());
        }
        if (other.hasTimePlayed()) {
          setTimePlayed(other.getTimePlayed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setVersion(input.readUInt32());
              break;
            }
            case 18: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasHeroId()) {
                subBuilder.mergeFrom(getHeroId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeroId(subBuilder.buildPartial());
              break;
            }
            case 26: {
              setHeroName(input.readString());
              break;
            }
            case 37: {
              setGbidClass(input.readSFixed32());
              break;
            }
            case 40: {
              setLevel(input.readSInt32());
              break;
            }
            case 48: {
              setPlayerFlags(input.readUInt32());
              break;
            }
            case 58: {
              D3.Hero.Hero.VisualEquipment.Builder subBuilder = D3.Hero.Hero.VisualEquipment.newBuilder();
              if (hasVisualEquipment()) {
                subBuilder.mergeFrom(getVisualEquipment());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVisualEquipment(subBuilder.buildPartial());
              break;
            }
            case 66: {
              D3.Hero.Hero.QuestHistoryEntry.Builder subBuilder = D3.Hero.Hero.QuestHistoryEntry.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addQuestHistory(subBuilder.buildPartial());
              break;
            }
            case 80: {
              setLastPlayedAct(input.readSInt32());
              break;
            }
            case 88: {
              setHighestUnlockedAct(input.readSInt32());
              break;
            }
            case 96: {
              setLastPlayedDifficulty(input.readSInt32());
              break;
            }
            case 104: {
              setHighestUnlockedDifficulty(input.readSInt32());
              break;
            }
            case 117: {
              setLastPlayedQuest(input.readSFixed32());
              break;
            }
            case 120: {
              setLastPlayedQuestStep(input.readSInt32());
              break;
            }
            case 128: {
              setTimePlayed(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 version = 1;
      public boolean hasVersion() {
        return result.hasVersion();
      }
      public int getVersion() {
        return result.getVersion();
      }
      public Builder setVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder clearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      // required .D3.OnlineService.EntityId hero_id = 2;
      public boolean hasHeroId() {
        return result.hasHeroId();
      }
      public D3.OnlineService.OnlineService.EntityId getHeroId() {
        return result.getHeroId();
      }
      public Builder setHeroId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder setHeroId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasHeroId = true;
        result.heroId_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeroId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasHeroId() &&
            result.heroId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.heroId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.heroId_).mergeFrom(value).buildPartial();
        } else {
          result.heroId_ = value;
        }
        result.hasHeroId = true;
        return this;
      }
      public Builder clearHeroId() {
        result.hasHeroId = false;
        result.heroId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // required string hero_name = 3;
      public boolean hasHeroName() {
        return result.hasHeroName();
      }
      public java.lang.String getHeroName() {
        return result.getHeroName();
      }
      public Builder setHeroName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasHeroName = true;
        result.heroName_ = value;
        return this;
      }
      public Builder clearHeroName() {
        result.hasHeroName = false;
        result.heroName_ = getDefaultInstance().getHeroName();
        return this;
      }
      
      // required sfixed32 gbid_class = 4;
      public boolean hasGbidClass() {
        return result.hasGbidClass();
      }
      public int getGbidClass() {
        return result.getGbidClass();
      }
      public Builder setGbidClass(int value) {
        result.hasGbidClass = true;
        result.gbidClass_ = value;
        return this;
      }
      public Builder clearGbidClass() {
        result.hasGbidClass = false;
        result.gbidClass_ = 0;
        return this;
      }
      
      // required sint32 level = 5;
      public boolean hasLevel() {
        return result.hasLevel();
      }
      public int getLevel() {
        return result.getLevel();
      }
      public Builder setLevel(int value) {
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder clearLevel() {
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      // required uint32 player_flags = 6;
      public boolean hasPlayerFlags() {
        return result.hasPlayerFlags();
      }
      public int getPlayerFlags() {
        return result.getPlayerFlags();
      }
      public Builder setPlayerFlags(int value) {
        result.hasPlayerFlags = true;
        result.playerFlags_ = value;
        return this;
      }
      public Builder clearPlayerFlags() {
        result.hasPlayerFlags = false;
        result.playerFlags_ = 0;
        return this;
      }
      
      // required .D3.Hero.VisualEquipment visual_equipment = 7;
      public boolean hasVisualEquipment() {
        return result.hasVisualEquipment();
      }
      public D3.Hero.Hero.VisualEquipment getVisualEquipment() {
        return result.getVisualEquipment();
      }
      public Builder setVisualEquipment(D3.Hero.Hero.VisualEquipment value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasVisualEquipment = true;
        result.visualEquipment_ = value;
        return this;
      }
      public Builder setVisualEquipment(D3.Hero.Hero.VisualEquipment.Builder builderForValue) {
        result.hasVisualEquipment = true;
        result.visualEquipment_ = builderForValue.build();
        return this;
      }
      public Builder mergeVisualEquipment(D3.Hero.Hero.VisualEquipment value) {
        if (result.hasVisualEquipment() &&
            result.visualEquipment_ != D3.Hero.Hero.VisualEquipment.getDefaultInstance()) {
          result.visualEquipment_ =
            D3.Hero.Hero.VisualEquipment.newBuilder(result.visualEquipment_).mergeFrom(value).buildPartial();
        } else {
          result.visualEquipment_ = value;
        }
        result.hasVisualEquipment = true;
        return this;
      }
      public Builder clearVisualEquipment() {
        result.hasVisualEquipment = false;
        result.visualEquipment_ = D3.Hero.Hero.VisualEquipment.getDefaultInstance();
        return this;
      }
      
      // repeated .D3.Hero.QuestHistoryEntry quest_history = 8;
      public java.util.List<D3.Hero.Hero.QuestHistoryEntry> getQuestHistoryList() {
        return java.util.Collections.unmodifiableList(result.questHistory_);
      }
      public int getQuestHistoryCount() {
        return result.getQuestHistoryCount();
      }
      public D3.Hero.Hero.QuestHistoryEntry getQuestHistory(int index) {
        return result.getQuestHistory(index);
      }
      public Builder setQuestHistory(int index, D3.Hero.Hero.QuestHistoryEntry value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.questHistory_.set(index, value);
        return this;
      }
      public Builder setQuestHistory(int index, D3.Hero.Hero.QuestHistoryEntry.Builder builderForValue) {
        result.questHistory_.set(index, builderForValue.build());
        return this;
      }
      public Builder addQuestHistory(D3.Hero.Hero.QuestHistoryEntry value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.questHistory_.isEmpty()) {
          result.questHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestHistoryEntry>();
        }
        result.questHistory_.add(value);
        return this;
      }
      public Builder addQuestHistory(D3.Hero.Hero.QuestHistoryEntry.Builder builderForValue) {
        if (result.questHistory_.isEmpty()) {
          result.questHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestHistoryEntry>();
        }
        result.questHistory_.add(builderForValue.build());
        return this;
      }
      public Builder addAllQuestHistory(
          java.lang.Iterable<? extends D3.Hero.Hero.QuestHistoryEntry> values) {
        if (result.questHistory_.isEmpty()) {
          result.questHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestHistoryEntry>();
        }
        super.addAll(values, result.questHistory_);
        return this;
      }
      public Builder clearQuestHistory() {
        result.questHistory_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required sint32 last_played_act = 10;
      public boolean hasLastPlayedAct() {
        return result.hasLastPlayedAct();
      }
      public int getLastPlayedAct() {
        return result.getLastPlayedAct();
      }
      public Builder setLastPlayedAct(int value) {
        result.hasLastPlayedAct = true;
        result.lastPlayedAct_ = value;
        return this;
      }
      public Builder clearLastPlayedAct() {
        result.hasLastPlayedAct = false;
        result.lastPlayedAct_ = 0;
        return this;
      }
      
      // required sint32 highest_unlocked_act = 11;
      public boolean hasHighestUnlockedAct() {
        return result.hasHighestUnlockedAct();
      }
      public int getHighestUnlockedAct() {
        return result.getHighestUnlockedAct();
      }
      public Builder setHighestUnlockedAct(int value) {
        result.hasHighestUnlockedAct = true;
        result.highestUnlockedAct_ = value;
        return this;
      }
      public Builder clearHighestUnlockedAct() {
        result.hasHighestUnlockedAct = false;
        result.highestUnlockedAct_ = 0;
        return this;
      }
      
      // required sint32 last_played_difficulty = 12;
      public boolean hasLastPlayedDifficulty() {
        return result.hasLastPlayedDifficulty();
      }
      public int getLastPlayedDifficulty() {
        return result.getLastPlayedDifficulty();
      }
      public Builder setLastPlayedDifficulty(int value) {
        result.hasLastPlayedDifficulty = true;
        result.lastPlayedDifficulty_ = value;
        return this;
      }
      public Builder clearLastPlayedDifficulty() {
        result.hasLastPlayedDifficulty = false;
        result.lastPlayedDifficulty_ = 0;
        return this;
      }
      
      // required sint32 highest_unlocked_difficulty = 13;
      public boolean hasHighestUnlockedDifficulty() {
        return result.hasHighestUnlockedDifficulty();
      }
      public int getHighestUnlockedDifficulty() {
        return result.getHighestUnlockedDifficulty();
      }
      public Builder setHighestUnlockedDifficulty(int value) {
        result.hasHighestUnlockedDifficulty = true;
        result.highestUnlockedDifficulty_ = value;
        return this;
      }
      public Builder clearHighestUnlockedDifficulty() {
        result.hasHighestUnlockedDifficulty = false;
        result.highestUnlockedDifficulty_ = 0;
        return this;
      }
      
      // required sfixed32 last_played_quest = 14;
      public boolean hasLastPlayedQuest() {
        return result.hasLastPlayedQuest();
      }
      public int getLastPlayedQuest() {
        return result.getLastPlayedQuest();
      }
      public Builder setLastPlayedQuest(int value) {
        result.hasLastPlayedQuest = true;
        result.lastPlayedQuest_ = value;
        return this;
      }
      public Builder clearLastPlayedQuest() {
        result.hasLastPlayedQuest = false;
        result.lastPlayedQuest_ = 0;
        return this;
      }
      
      // required sint32 last_played_quest_step = 15;
      public boolean hasLastPlayedQuestStep() {
        return result.hasLastPlayedQuestStep();
      }
      public int getLastPlayedQuestStep() {
        return result.getLastPlayedQuestStep();
      }
      public Builder setLastPlayedQuestStep(int value) {
        result.hasLastPlayedQuestStep = true;
        result.lastPlayedQuestStep_ = value;
        return this;
      }
      public Builder clearLastPlayedQuestStep() {
        result.hasLastPlayedQuestStep = false;
        result.lastPlayedQuestStep_ = 0;
        return this;
      }
      
      // required uint32 time_played = 16;
      public boolean hasTimePlayed() {
        return result.hasTimePlayed();
      }
      public int getTimePlayed() {
        return result.getTimePlayed();
      }
      public Builder setTimePlayed(int value) {
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder clearTimePlayed() {
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.Digest)
    }
    
    static {
      defaultInstance = new Digest(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.Digest)
  }
  
  public static final class HotbarButtonData extends
      com.google.protobuf.GeneratedMessage {
    // Use HotbarButtonData.newBuilder() to construct.
    private HotbarButtonData() {
      initFields();
    }
    private HotbarButtonData(boolean noInit) {}
    
    private static final HotbarButtonData defaultInstance;
    public static HotbarButtonData getDefaultInstance() {
      return defaultInstance;
    }
    
    public HotbarButtonData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_HotbarButtonData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_HotbarButtonData_fieldAccessorTable;
    }
    
    // required sfixed32 sno_power = 1;
    public static final int SNO_POWER_FIELD_NUMBER = 1;
    private boolean hasSnoPower;
    private int snoPower_ = 0;
    public boolean hasSnoPower() { return hasSnoPower; }
    public int getSnoPower() { return snoPower_; }
    
    // required sfixed32 gbid_item = 2;
    public static final int GBID_ITEM_FIELD_NUMBER = 2;
    private boolean hasGbidItem;
    private int gbidItem_ = 0;
    public boolean hasGbidItem() { return hasGbidItem; }
    public int getGbidItem() { return gbidItem_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSnoPower) return false;
      if (!hasGbidItem) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSnoPower()) {
        output.writeSFixed32(1, getSnoPower());
      }
      if (hasGbidItem()) {
        output.writeSFixed32(2, getGbidItem());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSnoPower()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getSnoPower());
      }
      if (hasGbidItem()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(2, getGbidItem());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.HotbarButtonData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.HotbarButtonData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.HotbarButtonData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.HotbarButtonData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.HotbarButtonData result;
      
      // Construct using D3.Hero.Hero.HotbarButtonData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.HotbarButtonData();
        return builder;
      }
      
      protected D3.Hero.Hero.HotbarButtonData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.HotbarButtonData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.HotbarButtonData.getDescriptor();
      }
      
      public D3.Hero.Hero.HotbarButtonData getDefaultInstanceForType() {
        return D3.Hero.Hero.HotbarButtonData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.HotbarButtonData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.HotbarButtonData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.HotbarButtonData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.HotbarButtonData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.HotbarButtonData) {
          return mergeFrom((D3.Hero.Hero.HotbarButtonData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.HotbarButtonData other) {
        if (other == D3.Hero.Hero.HotbarButtonData.getDefaultInstance()) return this;
        if (other.hasSnoPower()) {
          setSnoPower(other.getSnoPower());
        }
        if (other.hasGbidItem()) {
          setGbidItem(other.getGbidItem());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setSnoPower(input.readSFixed32());
              break;
            }
            case 21: {
              setGbidItem(input.readSFixed32());
              break;
            }
          }
        }
      }
      
      
      // required sfixed32 sno_power = 1;
      public boolean hasSnoPower() {
        return result.hasSnoPower();
      }
      public int getSnoPower() {
        return result.getSnoPower();
      }
      public Builder setSnoPower(int value) {
        result.hasSnoPower = true;
        result.snoPower_ = value;
        return this;
      }
      public Builder clearSnoPower() {
        result.hasSnoPower = false;
        result.snoPower_ = 0;
        return this;
      }
      
      // required sfixed32 gbid_item = 2;
      public boolean hasGbidItem() {
        return result.hasGbidItem();
      }
      public int getGbidItem() {
        return result.getGbidItem();
      }
      public Builder setGbidItem(int value) {
        result.hasGbidItem = true;
        result.gbidItem_ = value;
        return this;
      }
      public Builder clearGbidItem() {
        result.hasGbidItem = false;
        result.gbidItem_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.HotbarButtonData)
    }
    
    static {
      defaultInstance = new HotbarButtonData(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.HotbarButtonData)
  }
  
  public static final class SkillKeyMapping extends
      com.google.protobuf.GeneratedMessage {
    // Use SkillKeyMapping.newBuilder() to construct.
    private SkillKeyMapping() {
      initFields();
    }
    private SkillKeyMapping(boolean noInit) {}
    
    private static final SkillKeyMapping defaultInstance;
    public static SkillKeyMapping getDefaultInstance() {
      return defaultInstance;
    }
    
    public SkillKeyMapping getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_SkillKeyMapping_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_SkillKeyMapping_fieldAccessorTable;
    }
    
    // required sfixed32 sno_power = 1;
    public static final int SNO_POWER_FIELD_NUMBER = 1;
    private boolean hasSnoPower;
    private int snoPower_ = 0;
    public boolean hasSnoPower() { return hasSnoPower; }
    public int getSnoPower() { return snoPower_; }
    
    // required sint32 id_hotkey = 2;
    public static final int ID_HOTKEY_FIELD_NUMBER = 2;
    private boolean hasIdHotkey;
    private int idHotkey_ = 0;
    public boolean hasIdHotkey() { return hasIdHotkey; }
    public int getIdHotkey() { return idHotkey_; }
    
    // required sint32 skill_button = 3;
    public static final int SKILL_BUTTON_FIELD_NUMBER = 3;
    private boolean hasSkillButton;
    private int skillButton_ = 0;
    public boolean hasSkillButton() { return hasSkillButton; }
    public int getSkillButton() { return skillButton_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSnoPower) return false;
      if (!hasIdHotkey) return false;
      if (!hasSkillButton) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSnoPower()) {
        output.writeSFixed32(1, getSnoPower());
      }
      if (hasIdHotkey()) {
        output.writeSInt32(2, getIdHotkey());
      }
      if (hasSkillButton()) {
        output.writeSInt32(3, getSkillButton());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSnoPower()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getSnoPower());
      }
      if (hasIdHotkey()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getIdHotkey());
      }
      if (hasSkillButton()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getSkillButton());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SkillKeyMapping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SkillKeyMapping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.SkillKeyMapping prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.SkillKeyMapping result;
      
      // Construct using D3.Hero.Hero.SkillKeyMapping.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.SkillKeyMapping();
        return builder;
      }
      
      protected D3.Hero.Hero.SkillKeyMapping internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.SkillKeyMapping();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.SkillKeyMapping.getDescriptor();
      }
      
      public D3.Hero.Hero.SkillKeyMapping getDefaultInstanceForType() {
        return D3.Hero.Hero.SkillKeyMapping.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.SkillKeyMapping build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.SkillKeyMapping buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.SkillKeyMapping buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.SkillKeyMapping returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.SkillKeyMapping) {
          return mergeFrom((D3.Hero.Hero.SkillKeyMapping)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.SkillKeyMapping other) {
        if (other == D3.Hero.Hero.SkillKeyMapping.getDefaultInstance()) return this;
        if (other.hasSnoPower()) {
          setSnoPower(other.getSnoPower());
        }
        if (other.hasIdHotkey()) {
          setIdHotkey(other.getIdHotkey());
        }
        if (other.hasSkillButton()) {
          setSkillButton(other.getSkillButton());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setSnoPower(input.readSFixed32());
              break;
            }
            case 16: {
              setIdHotkey(input.readSInt32());
              break;
            }
            case 24: {
              setSkillButton(input.readSInt32());
              break;
            }
          }
        }
      }
      
      
      // required sfixed32 sno_power = 1;
      public boolean hasSnoPower() {
        return result.hasSnoPower();
      }
      public int getSnoPower() {
        return result.getSnoPower();
      }
      public Builder setSnoPower(int value) {
        result.hasSnoPower = true;
        result.snoPower_ = value;
        return this;
      }
      public Builder clearSnoPower() {
        result.hasSnoPower = false;
        result.snoPower_ = 0;
        return this;
      }
      
      // required sint32 id_hotkey = 2;
      public boolean hasIdHotkey() {
        return result.hasIdHotkey();
      }
      public int getIdHotkey() {
        return result.getIdHotkey();
      }
      public Builder setIdHotkey(int value) {
        result.hasIdHotkey = true;
        result.idHotkey_ = value;
        return this;
      }
      public Builder clearIdHotkey() {
        result.hasIdHotkey = false;
        result.idHotkey_ = 0;
        return this;
      }
      
      // required sint32 skill_button = 3;
      public boolean hasSkillButton() {
        return result.hasSkillButton();
      }
      public int getSkillButton() {
        return result.getSkillButton();
      }
      public Builder setSkillButton(int value) {
        result.hasSkillButton = true;
        result.skillButton_ = value;
        return this;
      }
      public Builder clearSkillButton() {
        result.hasSkillButton = false;
        result.skillButton_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.SkillKeyMapping)
    }
    
    static {
      defaultInstance = new SkillKeyMapping(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.SkillKeyMapping)
  }
  
  public static final class SavedQuest extends
      com.google.protobuf.GeneratedMessage {
    // Use SavedQuest.newBuilder() to construct.
    private SavedQuest() {
      initFields();
    }
    private SavedQuest(boolean noInit) {}
    
    private static final SavedQuest defaultInstance;
    public static SavedQuest getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavedQuest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedQuest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedQuest_fieldAccessorTable;
    }
    
    // required sfixed32 sno_quest = 1;
    public static final int SNO_QUEST_FIELD_NUMBER = 1;
    private boolean hasSnoQuest;
    private int snoQuest_ = 0;
    public boolean hasSnoQuest() { return hasSnoQuest; }
    public int getSnoQuest() { return snoQuest_; }
    
    // required sint32 difficulty = 2;
    public static final int DIFFICULTY_FIELD_NUMBER = 2;
    private boolean hasDifficulty;
    private int difficulty_ = 0;
    public boolean hasDifficulty() { return hasDifficulty; }
    public int getDifficulty() { return difficulty_; }
    
    // required sint32 current_step_uid = 3;
    public static final int CURRENT_STEP_UID_FIELD_NUMBER = 3;
    private boolean hasCurrentStepUid;
    private int currentStepUid_ = 0;
    public boolean hasCurrentStepUid() { return hasCurrentStepUid; }
    public int getCurrentStepUid() { return currentStepUid_; }
    
    // repeated sint32 objective_state = 4;
    public static final int OBJECTIVE_STATE_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> objectiveState_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getObjectiveStateList() {
      return objectiveState_;
    }
    public int getObjectiveStateCount() { return objectiveState_.size(); }
    public int getObjectiveState(int index) {
      return objectiveState_.get(index);
    }
    
    // repeated sint32 failure_condition_state = 5;
    public static final int FAILURE_CONDITION_STATE_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> failureConditionState_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFailureConditionStateList() {
      return failureConditionState_;
    }
    public int getFailureConditionStateCount() { return failureConditionState_.size(); }
    public int getFailureConditionState(int index) {
      return failureConditionState_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSnoQuest) return false;
      if (!hasDifficulty) return false;
      if (!hasCurrentStepUid) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSnoQuest()) {
        output.writeSFixed32(1, getSnoQuest());
      }
      if (hasDifficulty()) {
        output.writeSInt32(2, getDifficulty());
      }
      if (hasCurrentStepUid()) {
        output.writeSInt32(3, getCurrentStepUid());
      }
      for (int element : getObjectiveStateList()) {
        output.writeSInt32(4, element);
      }
      for (int element : getFailureConditionStateList()) {
        output.writeSInt32(5, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSnoQuest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getSnoQuest());
      }
      if (hasDifficulty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getDifficulty());
      }
      if (hasCurrentStepUid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getCurrentStepUid());
      }
      {
        int dataSize = 0;
        for (int element : getObjectiveStateList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getObjectiveStateList().size();
      }
      {
        int dataSize = 0;
        for (int element : getFailureConditionStateList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFailureConditionStateList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.SavedQuest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedQuest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedQuest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.SavedQuest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.SavedQuest result;
      
      // Construct using D3.Hero.Hero.SavedQuest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.SavedQuest();
        return builder;
      }
      
      protected D3.Hero.Hero.SavedQuest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.SavedQuest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.SavedQuest.getDescriptor();
      }
      
      public D3.Hero.Hero.SavedQuest getDefaultInstanceForType() {
        return D3.Hero.Hero.SavedQuest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.SavedQuest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.SavedQuest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.SavedQuest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.objectiveState_ != java.util.Collections.EMPTY_LIST) {
          result.objectiveState_ =
            java.util.Collections.unmodifiableList(result.objectiveState_);
        }
        if (result.failureConditionState_ != java.util.Collections.EMPTY_LIST) {
          result.failureConditionState_ =
            java.util.Collections.unmodifiableList(result.failureConditionState_);
        }
        D3.Hero.Hero.SavedQuest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.SavedQuest) {
          return mergeFrom((D3.Hero.Hero.SavedQuest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.SavedQuest other) {
        if (other == D3.Hero.Hero.SavedQuest.getDefaultInstance()) return this;
        if (other.hasSnoQuest()) {
          setSnoQuest(other.getSnoQuest());
        }
        if (other.hasDifficulty()) {
          setDifficulty(other.getDifficulty());
        }
        if (other.hasCurrentStepUid()) {
          setCurrentStepUid(other.getCurrentStepUid());
        }
        if (!other.objectiveState_.isEmpty()) {
          if (result.objectiveState_.isEmpty()) {
            result.objectiveState_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.objectiveState_.addAll(other.objectiveState_);
        }
        if (!other.failureConditionState_.isEmpty()) {
          if (result.failureConditionState_.isEmpty()) {
            result.failureConditionState_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.failureConditionState_.addAll(other.failureConditionState_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setSnoQuest(input.readSFixed32());
              break;
            }
            case 16: {
              setDifficulty(input.readSInt32());
              break;
            }
            case 24: {
              setCurrentStepUid(input.readSInt32());
              break;
            }
            case 32: {
              addObjectiveState(input.readSInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addObjectiveState(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              addFailureConditionState(input.readSInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addFailureConditionState(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // required sfixed32 sno_quest = 1;
      public boolean hasSnoQuest() {
        return result.hasSnoQuest();
      }
      public int getSnoQuest() {
        return result.getSnoQuest();
      }
      public Builder setSnoQuest(int value) {
        result.hasSnoQuest = true;
        result.snoQuest_ = value;
        return this;
      }
      public Builder clearSnoQuest() {
        result.hasSnoQuest = false;
        result.snoQuest_ = 0;
        return this;
      }
      
      // required sint32 difficulty = 2;
      public boolean hasDifficulty() {
        return result.hasDifficulty();
      }
      public int getDifficulty() {
        return result.getDifficulty();
      }
      public Builder setDifficulty(int value) {
        result.hasDifficulty = true;
        result.difficulty_ = value;
        return this;
      }
      public Builder clearDifficulty() {
        result.hasDifficulty = false;
        result.difficulty_ = 0;
        return this;
      }
      
      // required sint32 current_step_uid = 3;
      public boolean hasCurrentStepUid() {
        return result.hasCurrentStepUid();
      }
      public int getCurrentStepUid() {
        return result.getCurrentStepUid();
      }
      public Builder setCurrentStepUid(int value) {
        result.hasCurrentStepUid = true;
        result.currentStepUid_ = value;
        return this;
      }
      public Builder clearCurrentStepUid() {
        result.hasCurrentStepUid = false;
        result.currentStepUid_ = 0;
        return this;
      }
      
      // repeated sint32 objective_state = 4;
      public java.util.List<java.lang.Integer> getObjectiveStateList() {
        return java.util.Collections.unmodifiableList(result.objectiveState_);
      }
      public int getObjectiveStateCount() {
        return result.getObjectiveStateCount();
      }
      public int getObjectiveState(int index) {
        return result.getObjectiveState(index);
      }
      public Builder setObjectiveState(int index, int value) {
        result.objectiveState_.set(index, value);
        return this;
      }
      public Builder addObjectiveState(int value) {
        if (result.objectiveState_.isEmpty()) {
          result.objectiveState_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.objectiveState_.add(value);
        return this;
      }
      public Builder addAllObjectiveState(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.objectiveState_.isEmpty()) {
          result.objectiveState_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.objectiveState_);
        return this;
      }
      public Builder clearObjectiveState() {
        result.objectiveState_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sint32 failure_condition_state = 5;
      public java.util.List<java.lang.Integer> getFailureConditionStateList() {
        return java.util.Collections.unmodifiableList(result.failureConditionState_);
      }
      public int getFailureConditionStateCount() {
        return result.getFailureConditionStateCount();
      }
      public int getFailureConditionState(int index) {
        return result.getFailureConditionState(index);
      }
      public Builder setFailureConditionState(int index, int value) {
        result.failureConditionState_.set(index, value);
        return this;
      }
      public Builder addFailureConditionState(int value) {
        if (result.failureConditionState_.isEmpty()) {
          result.failureConditionState_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.failureConditionState_.add(value);
        return this;
      }
      public Builder addAllFailureConditionState(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.failureConditionState_.isEmpty()) {
          result.failureConditionState_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.failureConditionState_);
        return this;
      }
      public Builder clearFailureConditionState() {
        result.failureConditionState_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.SavedQuest)
    }
    
    static {
      defaultInstance = new SavedQuest(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.SavedQuest)
  }
  
  public static final class LearnedLore extends
      com.google.protobuf.GeneratedMessage {
    // Use LearnedLore.newBuilder() to construct.
    private LearnedLore() {
      initFields();
    }
    private LearnedLore(boolean noInit) {}
    
    private static final LearnedLore defaultInstance;
    public static LearnedLore getDefaultInstance() {
      return defaultInstance;
    }
    
    public LearnedLore getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_LearnedLore_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_LearnedLore_fieldAccessorTable;
    }
    
    // repeated sfixed32 sno_lore_learned = 1;
    public static final int SNO_LORE_LEARNED_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> snoLoreLearned_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSnoLoreLearnedList() {
      return snoLoreLearned_;
    }
    public int getSnoLoreLearnedCount() { return snoLoreLearned_.size(); }
    public int getSnoLoreLearned(int index) {
      return snoLoreLearned_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int element : getSnoLoreLearnedList()) {
        output.writeSFixed32(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getSnoLoreLearnedList().size();
        size += dataSize;
        size += 1 * getSnoLoreLearnedList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.LearnedLore parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.LearnedLore parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.LearnedLore parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.LearnedLore prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.LearnedLore result;
      
      // Construct using D3.Hero.Hero.LearnedLore.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.LearnedLore();
        return builder;
      }
      
      protected D3.Hero.Hero.LearnedLore internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.LearnedLore();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.LearnedLore.getDescriptor();
      }
      
      public D3.Hero.Hero.LearnedLore getDefaultInstanceForType() {
        return D3.Hero.Hero.LearnedLore.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.LearnedLore build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.LearnedLore buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.LearnedLore buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.snoLoreLearned_ != java.util.Collections.EMPTY_LIST) {
          result.snoLoreLearned_ =
            java.util.Collections.unmodifiableList(result.snoLoreLearned_);
        }
        D3.Hero.Hero.LearnedLore returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.LearnedLore) {
          return mergeFrom((D3.Hero.Hero.LearnedLore)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.LearnedLore other) {
        if (other == D3.Hero.Hero.LearnedLore.getDefaultInstance()) return this;
        if (!other.snoLoreLearned_.isEmpty()) {
          if (result.snoLoreLearned_.isEmpty()) {
            result.snoLoreLearned_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.snoLoreLearned_.addAll(other.snoLoreLearned_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              addSnoLoreLearned(input.readSFixed32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSnoLoreLearned(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // repeated sfixed32 sno_lore_learned = 1;
      public java.util.List<java.lang.Integer> getSnoLoreLearnedList() {
        return java.util.Collections.unmodifiableList(result.snoLoreLearned_);
      }
      public int getSnoLoreLearnedCount() {
        return result.getSnoLoreLearnedCount();
      }
      public int getSnoLoreLearned(int index) {
        return result.getSnoLoreLearned(index);
      }
      public Builder setSnoLoreLearned(int index, int value) {
        result.snoLoreLearned_.set(index, value);
        return this;
      }
      public Builder addSnoLoreLearned(int value) {
        if (result.snoLoreLearned_.isEmpty()) {
          result.snoLoreLearned_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.snoLoreLearned_.add(value);
        return this;
      }
      public Builder addAllSnoLoreLearned(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.snoLoreLearned_.isEmpty()) {
          result.snoLoreLearned_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.snoLoreLearned_);
        return this;
      }
      public Builder clearSnoLoreLearned() {
        result.snoLoreLearned_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.LearnedLore)
    }
    
    static {
      defaultInstance = new LearnedLore(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.LearnedLore)
  }
  
  public static final class SavedConversations extends
      com.google.protobuf.GeneratedMessage {
    // Use SavedConversations.newBuilder() to construct.
    private SavedConversations() {
      initFields();
    }
    private SavedConversations(boolean noInit) {}
    
    private static final SavedConversations defaultInstance;
    public static SavedConversations getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavedConversations getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedConversations_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedConversations_fieldAccessorTable;
    }
    
    // required bytes played_conversations_bitfield = 1;
    public static final int PLAYED_CONVERSATIONS_BITFIELD_FIELD_NUMBER = 1;
    private boolean hasPlayedConversationsBitfield;
    private com.google.protobuf.ByteString playedConversationsBitfield_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasPlayedConversationsBitfield() { return hasPlayedConversationsBitfield; }
    public com.google.protobuf.ByteString getPlayedConversationsBitfield() { return playedConversationsBitfield_; }
    
    // repeated sfixed32 sno_saved_conversations = 2;
    public static final int SNO_SAVED_CONVERSATIONS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> snoSavedConversations_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSnoSavedConversationsList() {
      return snoSavedConversations_;
    }
    public int getSnoSavedConversationsCount() { return snoSavedConversations_.size(); }
    public int getSnoSavedConversations(int index) {
      return snoSavedConversations_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasPlayedConversationsBitfield) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasPlayedConversationsBitfield()) {
        output.writeBytes(1, getPlayedConversationsBitfield());
      }
      for (int element : getSnoSavedConversationsList()) {
        output.writeSFixed32(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasPlayedConversationsBitfield()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getPlayedConversationsBitfield());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSnoSavedConversationsList().size();
        size += dataSize;
        size += 1 * getSnoSavedConversationsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.SavedConversations parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedConversations parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedConversations parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.SavedConversations prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.SavedConversations result;
      
      // Construct using D3.Hero.Hero.SavedConversations.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.SavedConversations();
        return builder;
      }
      
      protected D3.Hero.Hero.SavedConversations internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.SavedConversations();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.SavedConversations.getDescriptor();
      }
      
      public D3.Hero.Hero.SavedConversations getDefaultInstanceForType() {
        return D3.Hero.Hero.SavedConversations.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.SavedConversations build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.SavedConversations buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.SavedConversations buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.snoSavedConversations_ != java.util.Collections.EMPTY_LIST) {
          result.snoSavedConversations_ =
            java.util.Collections.unmodifiableList(result.snoSavedConversations_);
        }
        D3.Hero.Hero.SavedConversations returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.SavedConversations) {
          return mergeFrom((D3.Hero.Hero.SavedConversations)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.SavedConversations other) {
        if (other == D3.Hero.Hero.SavedConversations.getDefaultInstance()) return this;
        if (other.hasPlayedConversationsBitfield()) {
          setPlayedConversationsBitfield(other.getPlayedConversationsBitfield());
        }
        if (!other.snoSavedConversations_.isEmpty()) {
          if (result.snoSavedConversations_.isEmpty()) {
            result.snoSavedConversations_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.snoSavedConversations_.addAll(other.snoSavedConversations_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setPlayedConversationsBitfield(input.readBytes());
              break;
            }
            case 21: {
              addSnoSavedConversations(input.readSFixed32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSnoSavedConversations(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // required bytes played_conversations_bitfield = 1;
      public boolean hasPlayedConversationsBitfield() {
        return result.hasPlayedConversationsBitfield();
      }
      public com.google.protobuf.ByteString getPlayedConversationsBitfield() {
        return result.getPlayedConversationsBitfield();
      }
      public Builder setPlayedConversationsBitfield(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPlayedConversationsBitfield = true;
        result.playedConversationsBitfield_ = value;
        return this;
      }
      public Builder clearPlayedConversationsBitfield() {
        result.hasPlayedConversationsBitfield = false;
        result.playedConversationsBitfield_ = getDefaultInstance().getPlayedConversationsBitfield();
        return this;
      }
      
      // repeated sfixed32 sno_saved_conversations = 2;
      public java.util.List<java.lang.Integer> getSnoSavedConversationsList() {
        return java.util.Collections.unmodifiableList(result.snoSavedConversations_);
      }
      public int getSnoSavedConversationsCount() {
        return result.getSnoSavedConversationsCount();
      }
      public int getSnoSavedConversations(int index) {
        return result.getSnoSavedConversations(index);
      }
      public Builder setSnoSavedConversations(int index, int value) {
        result.snoSavedConversations_.set(index, value);
        return this;
      }
      public Builder addSnoSavedConversations(int value) {
        if (result.snoSavedConversations_.isEmpty()) {
          result.snoSavedConversations_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.snoSavedConversations_.add(value);
        return this;
      }
      public Builder addAllSnoSavedConversations(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.snoSavedConversations_.isEmpty()) {
          result.snoSavedConversations_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.snoSavedConversations_);
        return this;
      }
      public Builder clearSnoSavedConversations() {
        result.snoSavedConversations_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.SavedConversations)
    }
    
    static {
      defaultInstance = new SavedConversations(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.SavedConversations)
  }
  
  public static final class SavePointData_Proto extends
      com.google.protobuf.GeneratedMessage {
    // Use SavePointData_Proto.newBuilder() to construct.
    private SavePointData_Proto() {
      initFields();
    }
    private SavePointData_Proto(boolean noInit) {}
    
    private static final SavePointData_Proto defaultInstance;
    public static SavePointData_Proto getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavePointData_Proto getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavePointData_Proto_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavePointData_Proto_fieldAccessorTable;
    }
    
    // required sfixed32 sno_world = 1;
    public static final int SNO_WORLD_FIELD_NUMBER = 1;
    private boolean hasSnoWorld;
    private int snoWorld_ = 0;
    public boolean hasSnoWorld() { return hasSnoWorld; }
    public int getSnoWorld() { return snoWorld_; }
    
    // required sint32 savepoint_number = 2;
    public static final int SAVEPOINT_NUMBER_FIELD_NUMBER = 2;
    private boolean hasSavepointNumber;
    private int savepointNumber_ = 0;
    public boolean hasSavepointNumber() { return hasSavepointNumber; }
    public int getSavepointNumber() { return savepointNumber_; }
    
    // required uint32 creates_portal = 3;
    public static final int CREATES_PORTAL_FIELD_NUMBER = 3;
    private boolean hasCreatesPortal;
    private int createsPortal_ = 0;
    public boolean hasCreatesPortal() { return hasCreatesPortal; }
    public int getCreatesPortal() { return createsPortal_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasSnoWorld) return false;
      if (!hasSavepointNumber) return false;
      if (!hasCreatesPortal) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSnoWorld()) {
        output.writeSFixed32(1, getSnoWorld());
      }
      if (hasSavepointNumber()) {
        output.writeSInt32(2, getSavepointNumber());
      }
      if (hasCreatesPortal()) {
        output.writeUInt32(3, getCreatesPortal());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSnoWorld()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, getSnoWorld());
      }
      if (hasSavepointNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, getSavepointNumber());
      }
      if (hasCreatesPortal()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getCreatesPortal());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavePointData_Proto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavePointData_Proto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.SavePointData_Proto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.SavePointData_Proto result;
      
      // Construct using D3.Hero.Hero.SavePointData_Proto.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.SavePointData_Proto();
        return builder;
      }
      
      protected D3.Hero.Hero.SavePointData_Proto internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.SavePointData_Proto();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.SavePointData_Proto.getDescriptor();
      }
      
      public D3.Hero.Hero.SavePointData_Proto getDefaultInstanceForType() {
        return D3.Hero.Hero.SavePointData_Proto.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.SavePointData_Proto build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.SavePointData_Proto buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.SavePointData_Proto buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.SavePointData_Proto returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.SavePointData_Proto) {
          return mergeFrom((D3.Hero.Hero.SavePointData_Proto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.SavePointData_Proto other) {
        if (other == D3.Hero.Hero.SavePointData_Proto.getDefaultInstance()) return this;
        if (other.hasSnoWorld()) {
          setSnoWorld(other.getSnoWorld());
        }
        if (other.hasSavepointNumber()) {
          setSavepointNumber(other.getSavepointNumber());
        }
        if (other.hasCreatesPortal()) {
          setCreatesPortal(other.getCreatesPortal());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setSnoWorld(input.readSFixed32());
              break;
            }
            case 16: {
              setSavepointNumber(input.readSInt32());
              break;
            }
            case 24: {
              setCreatesPortal(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required sfixed32 sno_world = 1;
      public boolean hasSnoWorld() {
        return result.hasSnoWorld();
      }
      public int getSnoWorld() {
        return result.getSnoWorld();
      }
      public Builder setSnoWorld(int value) {
        result.hasSnoWorld = true;
        result.snoWorld_ = value;
        return this;
      }
      public Builder clearSnoWorld() {
        result.hasSnoWorld = false;
        result.snoWorld_ = 0;
        return this;
      }
      
      // required sint32 savepoint_number = 2;
      public boolean hasSavepointNumber() {
        return result.hasSavepointNumber();
      }
      public int getSavepointNumber() {
        return result.getSavepointNumber();
      }
      public Builder setSavepointNumber(int value) {
        result.hasSavepointNumber = true;
        result.savepointNumber_ = value;
        return this;
      }
      public Builder clearSavepointNumber() {
        result.hasSavepointNumber = false;
        result.savepointNumber_ = 0;
        return this;
      }
      
      // required uint32 creates_portal = 3;
      public boolean hasCreatesPortal() {
        return result.hasCreatesPortal();
      }
      public int getCreatesPortal() {
        return result.getCreatesPortal();
      }
      public Builder setCreatesPortal(int value) {
        result.hasCreatesPortal = true;
        result.createsPortal_ = value;
        return this;
      }
      public Builder clearCreatesPortal() {
        result.hasCreatesPortal = false;
        result.createsPortal_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.SavePointData_Proto)
    }
    
    static {
      defaultInstance = new SavePointData_Proto(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.SavePointData_Proto)
  }
  
  public static final class SavedData extends
      com.google.protobuf.GeneratedMessage {
    // Use SavedData.newBuilder() to construct.
    private SavedData() {
      initFields();
    }
    private SavedData(boolean noInit) {}
    
    private static final SavedData defaultInstance;
    public static SavedData getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavedData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedData_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedData_fieldAccessorTable;
    }
    
    // repeated .D3.Hero.HotbarButtonData hotbar_button_assignments = 1;
    public static final int HOTBAR_BUTTON_ASSIGNMENTS_FIELD_NUMBER = 1;
    private java.util.List<D3.Hero.Hero.HotbarButtonData> hotbarButtonAssignments_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.HotbarButtonData> getHotbarButtonAssignmentsList() {
      return hotbarButtonAssignments_;
    }
    public int getHotbarButtonAssignmentsCount() { return hotbarButtonAssignments_.size(); }
    public D3.Hero.Hero.HotbarButtonData getHotbarButtonAssignments(int index) {
      return hotbarButtonAssignments_.get(index);
    }
    
    // repeated .D3.Hero.SkillKeyMapping skill_key_map = 2;
    public static final int SKILL_KEY_MAP_FIELD_NUMBER = 2;
    private java.util.List<D3.Hero.Hero.SkillKeyMapping> skillKeyMap_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.SkillKeyMapping> getSkillKeyMapList() {
      return skillKeyMap_;
    }
    public int getSkillKeyMapCount() { return skillKeyMap_.size(); }
    public D3.Hero.Hero.SkillKeyMapping getSkillKeyMap(int index) {
      return skillKeyMap_.get(index);
    }
    
    // required uint32 time_played = 3;
    public static final int TIME_PLAYED_FIELD_NUMBER = 3;
    private boolean hasTimePlayed;
    private int timePlayed_ = 0;
    public boolean hasTimePlayed() { return hasTimePlayed; }
    public int getTimePlayed() { return timePlayed_; }
    
    // required uint32 activated_waypoints = 4;
    public static final int ACTIVATED_WAYPOINTS_FIELD_NUMBER = 4;
    private boolean hasActivatedWaypoints;
    private int activatedWaypoints_ = 0;
    public boolean hasActivatedWaypoints() { return hasActivatedWaypoints; }
    public int getActivatedWaypoints() { return activatedWaypoints_; }
    
    // required .D3.Hireling.SavedData hireling_saved_data = 5;
    public static final int HIRELING_SAVED_DATA_FIELD_NUMBER = 5;
    private boolean hasHirelingSavedData;
    private D3.Hireling.Hireling.SavedData hirelingSavedData_;
    public boolean hasHirelingSavedData() { return hasHirelingSavedData; }
    public D3.Hireling.Hireling.SavedData getHirelingSavedData() { return hirelingSavedData_; }
    
    // required uint32 last_level_time = 6;
    public static final int LAST_LEVEL_TIME_FIELD_NUMBER = 6;
    private boolean hasLastLevelTime;
    private int lastLevelTime_ = 0;
    public boolean hasLastLevelTime() { return hasLastLevelTime; }
    public int getLastLevelTime() { return lastLevelTime_; }
    
    // required .D3.Hero.LearnedLore learned_lore = 7;
    public static final int LEARNED_LORE_FIELD_NUMBER = 7;
    private boolean hasLearnedLore;
    private D3.Hero.Hero.LearnedLore learnedLore_;
    public boolean hasLearnedLore() { return hasLearnedLore; }
    public D3.Hero.Hero.LearnedLore getLearnedLore() { return learnedLore_; }
    
    // required .D3.Hero.SavedConversations saved_conversations = 8;
    public static final int SAVED_CONVERSATIONS_FIELD_NUMBER = 8;
    private boolean hasSavedConversations;
    private D3.Hero.Hero.SavedConversations savedConversations_;
    public boolean hasSavedConversations() { return hasSavedConversations; }
    public D3.Hero.Hero.SavedConversations getSavedConversations() { return savedConversations_; }
    
    // repeated sfixed32 sno_active_skills = 9;
    public static final int SNO_ACTIVE_SKILLS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> snoActiveSkills_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSnoActiveSkillsList() {
      return snoActiveSkills_;
    }
    public int getSnoActiveSkillsCount() { return snoActiveSkills_.size(); }
    public int getSnoActiveSkills(int index) {
      return snoActiveSkills_.get(index);
    }
    
    // repeated sfixed32 sno_traits = 10;
    public static final int SNO_TRAITS_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> snoTraits_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSnoTraitsList() {
      return snoTraits_;
    }
    public int getSnoTraitsCount() { return snoTraits_.size(); }
    public int getSnoTraits(int index) {
      return snoTraits_.get(index);
    }
    
    // repeated sfixed32 seen_tutorials = 11;
    public static final int SEEN_TUTORIALS_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> seenTutorials_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSeenTutorialsList() {
      return seenTutorials_;
    }
    public int getSeenTutorialsCount() { return seenTutorials_.size(); }
    public int getSeenTutorials(int index) {
      return seenTutorials_.get(index);
    }
    
    // required .D3.Hero.SavePointData_Proto save_point = 12;
    public static final int SAVE_POINT_FIELD_NUMBER = 12;
    private boolean hasSavePoint;
    private D3.Hero.Hero.SavePointData_Proto savePoint_;
    public boolean hasSavePoint() { return hasSavePoint; }
    public D3.Hero.Hero.SavePointData_Proto getSavePoint() { return savePoint_; }
    
    private void initFields() {
      hirelingSavedData_ = D3.Hireling.Hireling.SavedData.getDefaultInstance();
      learnedLore_ = D3.Hero.Hero.LearnedLore.getDefaultInstance();
      savedConversations_ = D3.Hero.Hero.SavedConversations.getDefaultInstance();
      savePoint_ = D3.Hero.Hero.SavePointData_Proto.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasTimePlayed) return false;
      if (!hasActivatedWaypoints) return false;
      if (!hasHirelingSavedData) return false;
      if (!hasLastLevelTime) return false;
      if (!hasLearnedLore) return false;
      if (!hasSavedConversations) return false;
      if (!hasSavePoint) return false;
      for (D3.Hero.Hero.HotbarButtonData element : getHotbarButtonAssignmentsList()) {
        if (!element.isInitialized()) return false;
      }
      for (D3.Hero.Hero.SkillKeyMapping element : getSkillKeyMapList()) {
        if (!element.isInitialized()) return false;
      }
      if (!getHirelingSavedData().isInitialized()) return false;
      if (!getSavedConversations().isInitialized()) return false;
      if (!getSavePoint().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (D3.Hero.Hero.HotbarButtonData element : getHotbarButtonAssignmentsList()) {
        output.writeMessage(1, element);
      }
      for (D3.Hero.Hero.SkillKeyMapping element : getSkillKeyMapList()) {
        output.writeMessage(2, element);
      }
      if (hasTimePlayed()) {
        output.writeUInt32(3, getTimePlayed());
      }
      if (hasActivatedWaypoints()) {
        output.writeUInt32(4, getActivatedWaypoints());
      }
      if (hasHirelingSavedData()) {
        output.writeMessage(5, getHirelingSavedData());
      }
      if (hasLastLevelTime()) {
        output.writeUInt32(6, getLastLevelTime());
      }
      if (hasLearnedLore()) {
        output.writeMessage(7, getLearnedLore());
      }
      if (hasSavedConversations()) {
        output.writeMessage(8, getSavedConversations());
      }
      for (int element : getSnoActiveSkillsList()) {
        output.writeSFixed32(9, element);
      }
      for (int element : getSnoTraitsList()) {
        output.writeSFixed32(10, element);
      }
      for (int element : getSeenTutorialsList()) {
        output.writeSFixed32(11, element);
      }
      if (hasSavePoint()) {
        output.writeMessage(12, getSavePoint());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (D3.Hero.Hero.HotbarButtonData element : getHotbarButtonAssignmentsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      for (D3.Hero.Hero.SkillKeyMapping element : getSkillKeyMapList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      if (hasTimePlayed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getTimePlayed());
      }
      if (hasActivatedWaypoints()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getActivatedWaypoints());
      }
      if (hasHirelingSavedData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getHirelingSavedData());
      }
      if (hasLastLevelTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, getLastLevelTime());
      }
      if (hasLearnedLore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getLearnedLore());
      }
      if (hasSavedConversations()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getSavedConversations());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSnoActiveSkillsList().size();
        size += dataSize;
        size += 1 * getSnoActiveSkillsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSnoTraitsList().size();
        size += dataSize;
        size += 1 * getSnoTraitsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSeenTutorialsList().size();
        size += dataSize;
        size += 1 * getSeenTutorialsList().size();
      }
      if (hasSavePoint()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getSavePoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.SavedData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.SavedData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.SavedData result;
      
      // Construct using D3.Hero.Hero.SavedData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.SavedData();
        return builder;
      }
      
      protected D3.Hero.Hero.SavedData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.SavedData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.SavedData.getDescriptor();
      }
      
      public D3.Hero.Hero.SavedData getDefaultInstanceForType() {
        return D3.Hero.Hero.SavedData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.SavedData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.SavedData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.SavedData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.hotbarButtonAssignments_ != java.util.Collections.EMPTY_LIST) {
          result.hotbarButtonAssignments_ =
            java.util.Collections.unmodifiableList(result.hotbarButtonAssignments_);
        }
        if (result.skillKeyMap_ != java.util.Collections.EMPTY_LIST) {
          result.skillKeyMap_ =
            java.util.Collections.unmodifiableList(result.skillKeyMap_);
        }
        if (result.snoActiveSkills_ != java.util.Collections.EMPTY_LIST) {
          result.snoActiveSkills_ =
            java.util.Collections.unmodifiableList(result.snoActiveSkills_);
        }
        if (result.snoTraits_ != java.util.Collections.EMPTY_LIST) {
          result.snoTraits_ =
            java.util.Collections.unmodifiableList(result.snoTraits_);
        }
        if (result.seenTutorials_ != java.util.Collections.EMPTY_LIST) {
          result.seenTutorials_ =
            java.util.Collections.unmodifiableList(result.seenTutorials_);
        }
        D3.Hero.Hero.SavedData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.SavedData) {
          return mergeFrom((D3.Hero.Hero.SavedData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.SavedData other) {
        if (other == D3.Hero.Hero.SavedData.getDefaultInstance()) return this;
        if (!other.hotbarButtonAssignments_.isEmpty()) {
          if (result.hotbarButtonAssignments_.isEmpty()) {
            result.hotbarButtonAssignments_ = new java.util.ArrayList<D3.Hero.Hero.HotbarButtonData>();
          }
          result.hotbarButtonAssignments_.addAll(other.hotbarButtonAssignments_);
        }
        if (!other.skillKeyMap_.isEmpty()) {
          if (result.skillKeyMap_.isEmpty()) {
            result.skillKeyMap_ = new java.util.ArrayList<D3.Hero.Hero.SkillKeyMapping>();
          }
          result.skillKeyMap_.addAll(other.skillKeyMap_);
        }
        if (other.hasTimePlayed()) {
          setTimePlayed(other.getTimePlayed());
        }
        if (other.hasActivatedWaypoints()) {
          setActivatedWaypoints(other.getActivatedWaypoints());
        }
        if (other.hasHirelingSavedData()) {
          mergeHirelingSavedData(other.getHirelingSavedData());
        }
        if (other.hasLastLevelTime()) {
          setLastLevelTime(other.getLastLevelTime());
        }
        if (other.hasLearnedLore()) {
          mergeLearnedLore(other.getLearnedLore());
        }
        if (other.hasSavedConversations()) {
          mergeSavedConversations(other.getSavedConversations());
        }
        if (!other.snoActiveSkills_.isEmpty()) {
          if (result.snoActiveSkills_.isEmpty()) {
            result.snoActiveSkills_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.snoActiveSkills_.addAll(other.snoActiveSkills_);
        }
        if (!other.snoTraits_.isEmpty()) {
          if (result.snoTraits_.isEmpty()) {
            result.snoTraits_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.snoTraits_.addAll(other.snoTraits_);
        }
        if (!other.seenTutorials_.isEmpty()) {
          if (result.seenTutorials_.isEmpty()) {
            result.seenTutorials_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.seenTutorials_.addAll(other.seenTutorials_);
        }
        if (other.hasSavePoint()) {
          mergeSavePoint(other.getSavePoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.Hero.Hero.HotbarButtonData.Builder subBuilder = D3.Hero.Hero.HotbarButtonData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addHotbarButtonAssignments(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Hero.Hero.SkillKeyMapping.Builder subBuilder = D3.Hero.Hero.SkillKeyMapping.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSkillKeyMap(subBuilder.buildPartial());
              break;
            }
            case 24: {
              setTimePlayed(input.readUInt32());
              break;
            }
            case 32: {
              setActivatedWaypoints(input.readUInt32());
              break;
            }
            case 42: {
              D3.Hireling.Hireling.SavedData.Builder subBuilder = D3.Hireling.Hireling.SavedData.newBuilder();
              if (hasHirelingSavedData()) {
                subBuilder.mergeFrom(getHirelingSavedData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHirelingSavedData(subBuilder.buildPartial());
              break;
            }
            case 48: {
              setLastLevelTime(input.readUInt32());
              break;
            }
            case 58: {
              D3.Hero.Hero.LearnedLore.Builder subBuilder = D3.Hero.Hero.LearnedLore.newBuilder();
              if (hasLearnedLore()) {
                subBuilder.mergeFrom(getLearnedLore());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLearnedLore(subBuilder.buildPartial());
              break;
            }
            case 66: {
              D3.Hero.Hero.SavedConversations.Builder subBuilder = D3.Hero.Hero.SavedConversations.newBuilder();
              if (hasSavedConversations()) {
                subBuilder.mergeFrom(getSavedConversations());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSavedConversations(subBuilder.buildPartial());
              break;
            }
            case 77: {
              addSnoActiveSkills(input.readSFixed32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSnoActiveSkills(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 85: {
              addSnoTraits(input.readSFixed32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSnoTraits(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 93: {
              addSeenTutorials(input.readSFixed32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSeenTutorials(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 98: {
              D3.Hero.Hero.SavePointData_Proto.Builder subBuilder = D3.Hero.Hero.SavePointData_Proto.newBuilder();
              if (hasSavePoint()) {
                subBuilder.mergeFrom(getSavePoint());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSavePoint(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .D3.Hero.HotbarButtonData hotbar_button_assignments = 1;
      public java.util.List<D3.Hero.Hero.HotbarButtonData> getHotbarButtonAssignmentsList() {
        return java.util.Collections.unmodifiableList(result.hotbarButtonAssignments_);
      }
      public int getHotbarButtonAssignmentsCount() {
        return result.getHotbarButtonAssignmentsCount();
      }
      public D3.Hero.Hero.HotbarButtonData getHotbarButtonAssignments(int index) {
        return result.getHotbarButtonAssignments(index);
      }
      public Builder setHotbarButtonAssignments(int index, D3.Hero.Hero.HotbarButtonData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hotbarButtonAssignments_.set(index, value);
        return this;
      }
      public Builder setHotbarButtonAssignments(int index, D3.Hero.Hero.HotbarButtonData.Builder builderForValue) {
        result.hotbarButtonAssignments_.set(index, builderForValue.build());
        return this;
      }
      public Builder addHotbarButtonAssignments(D3.Hero.Hero.HotbarButtonData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.hotbarButtonAssignments_.isEmpty()) {
          result.hotbarButtonAssignments_ = new java.util.ArrayList<D3.Hero.Hero.HotbarButtonData>();
        }
        result.hotbarButtonAssignments_.add(value);
        return this;
      }
      public Builder addHotbarButtonAssignments(D3.Hero.Hero.HotbarButtonData.Builder builderForValue) {
        if (result.hotbarButtonAssignments_.isEmpty()) {
          result.hotbarButtonAssignments_ = new java.util.ArrayList<D3.Hero.Hero.HotbarButtonData>();
        }
        result.hotbarButtonAssignments_.add(builderForValue.build());
        return this;
      }
      public Builder addAllHotbarButtonAssignments(
          java.lang.Iterable<? extends D3.Hero.Hero.HotbarButtonData> values) {
        if (result.hotbarButtonAssignments_.isEmpty()) {
          result.hotbarButtonAssignments_ = new java.util.ArrayList<D3.Hero.Hero.HotbarButtonData>();
        }
        super.addAll(values, result.hotbarButtonAssignments_);
        return this;
      }
      public Builder clearHotbarButtonAssignments() {
        result.hotbarButtonAssignments_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .D3.Hero.SkillKeyMapping skill_key_map = 2;
      public java.util.List<D3.Hero.Hero.SkillKeyMapping> getSkillKeyMapList() {
        return java.util.Collections.unmodifiableList(result.skillKeyMap_);
      }
      public int getSkillKeyMapCount() {
        return result.getSkillKeyMapCount();
      }
      public D3.Hero.Hero.SkillKeyMapping getSkillKeyMap(int index) {
        return result.getSkillKeyMap(index);
      }
      public Builder setSkillKeyMap(int index, D3.Hero.Hero.SkillKeyMapping value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.skillKeyMap_.set(index, value);
        return this;
      }
      public Builder setSkillKeyMap(int index, D3.Hero.Hero.SkillKeyMapping.Builder builderForValue) {
        result.skillKeyMap_.set(index, builderForValue.build());
        return this;
      }
      public Builder addSkillKeyMap(D3.Hero.Hero.SkillKeyMapping value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.skillKeyMap_.isEmpty()) {
          result.skillKeyMap_ = new java.util.ArrayList<D3.Hero.Hero.SkillKeyMapping>();
        }
        result.skillKeyMap_.add(value);
        return this;
      }
      public Builder addSkillKeyMap(D3.Hero.Hero.SkillKeyMapping.Builder builderForValue) {
        if (result.skillKeyMap_.isEmpty()) {
          result.skillKeyMap_ = new java.util.ArrayList<D3.Hero.Hero.SkillKeyMapping>();
        }
        result.skillKeyMap_.add(builderForValue.build());
        return this;
      }
      public Builder addAllSkillKeyMap(
          java.lang.Iterable<? extends D3.Hero.Hero.SkillKeyMapping> values) {
        if (result.skillKeyMap_.isEmpty()) {
          result.skillKeyMap_ = new java.util.ArrayList<D3.Hero.Hero.SkillKeyMapping>();
        }
        super.addAll(values, result.skillKeyMap_);
        return this;
      }
      public Builder clearSkillKeyMap() {
        result.skillKeyMap_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required uint32 time_played = 3;
      public boolean hasTimePlayed() {
        return result.hasTimePlayed();
      }
      public int getTimePlayed() {
        return result.getTimePlayed();
      }
      public Builder setTimePlayed(int value) {
        result.hasTimePlayed = true;
        result.timePlayed_ = value;
        return this;
      }
      public Builder clearTimePlayed() {
        result.hasTimePlayed = false;
        result.timePlayed_ = 0;
        return this;
      }
      
      // required uint32 activated_waypoints = 4;
      public boolean hasActivatedWaypoints() {
        return result.hasActivatedWaypoints();
      }
      public int getActivatedWaypoints() {
        return result.getActivatedWaypoints();
      }
      public Builder setActivatedWaypoints(int value) {
        result.hasActivatedWaypoints = true;
        result.activatedWaypoints_ = value;
        return this;
      }
      public Builder clearActivatedWaypoints() {
        result.hasActivatedWaypoints = false;
        result.activatedWaypoints_ = 0;
        return this;
      }
      
      // required .D3.Hireling.SavedData hireling_saved_data = 5;
      public boolean hasHirelingSavedData() {
        return result.hasHirelingSavedData();
      }
      public D3.Hireling.Hireling.SavedData getHirelingSavedData() {
        return result.getHirelingSavedData();
      }
      public Builder setHirelingSavedData(D3.Hireling.Hireling.SavedData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = value;
        return this;
      }
      public Builder setHirelingSavedData(D3.Hireling.Hireling.SavedData.Builder builderForValue) {
        result.hasHirelingSavedData = true;
        result.hirelingSavedData_ = builderForValue.build();
        return this;
      }
      public Builder mergeHirelingSavedData(D3.Hireling.Hireling.SavedData value) {
        if (result.hasHirelingSavedData() &&
            result.hirelingSavedData_ != D3.Hireling.Hireling.SavedData.getDefaultInstance()) {
          result.hirelingSavedData_ =
            D3.Hireling.Hireling.SavedData.newBuilder(result.hirelingSavedData_).mergeFrom(value).buildPartial();
        } else {
          result.hirelingSavedData_ = value;
        }
        result.hasHirelingSavedData = true;
        return this;
      }
      public Builder clearHirelingSavedData() {
        result.hasHirelingSavedData = false;
        result.hirelingSavedData_ = D3.Hireling.Hireling.SavedData.getDefaultInstance();
        return this;
      }
      
      // required uint32 last_level_time = 6;
      public boolean hasLastLevelTime() {
        return result.hasLastLevelTime();
      }
      public int getLastLevelTime() {
        return result.getLastLevelTime();
      }
      public Builder setLastLevelTime(int value) {
        result.hasLastLevelTime = true;
        result.lastLevelTime_ = value;
        return this;
      }
      public Builder clearLastLevelTime() {
        result.hasLastLevelTime = false;
        result.lastLevelTime_ = 0;
        return this;
      }
      
      // required .D3.Hero.LearnedLore learned_lore = 7;
      public boolean hasLearnedLore() {
        return result.hasLearnedLore();
      }
      public D3.Hero.Hero.LearnedLore getLearnedLore() {
        return result.getLearnedLore();
      }
      public Builder setLearnedLore(D3.Hero.Hero.LearnedLore value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLearnedLore = true;
        result.learnedLore_ = value;
        return this;
      }
      public Builder setLearnedLore(D3.Hero.Hero.LearnedLore.Builder builderForValue) {
        result.hasLearnedLore = true;
        result.learnedLore_ = builderForValue.build();
        return this;
      }
      public Builder mergeLearnedLore(D3.Hero.Hero.LearnedLore value) {
        if (result.hasLearnedLore() &&
            result.learnedLore_ != D3.Hero.Hero.LearnedLore.getDefaultInstance()) {
          result.learnedLore_ =
            D3.Hero.Hero.LearnedLore.newBuilder(result.learnedLore_).mergeFrom(value).buildPartial();
        } else {
          result.learnedLore_ = value;
        }
        result.hasLearnedLore = true;
        return this;
      }
      public Builder clearLearnedLore() {
        result.hasLearnedLore = false;
        result.learnedLore_ = D3.Hero.Hero.LearnedLore.getDefaultInstance();
        return this;
      }
      
      // required .D3.Hero.SavedConversations saved_conversations = 8;
      public boolean hasSavedConversations() {
        return result.hasSavedConversations();
      }
      public D3.Hero.Hero.SavedConversations getSavedConversations() {
        return result.getSavedConversations();
      }
      public Builder setSavedConversations(D3.Hero.Hero.SavedConversations value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSavedConversations = true;
        result.savedConversations_ = value;
        return this;
      }
      public Builder setSavedConversations(D3.Hero.Hero.SavedConversations.Builder builderForValue) {
        result.hasSavedConversations = true;
        result.savedConversations_ = builderForValue.build();
        return this;
      }
      public Builder mergeSavedConversations(D3.Hero.Hero.SavedConversations value) {
        if (result.hasSavedConversations() &&
            result.savedConversations_ != D3.Hero.Hero.SavedConversations.getDefaultInstance()) {
          result.savedConversations_ =
            D3.Hero.Hero.SavedConversations.newBuilder(result.savedConversations_).mergeFrom(value).buildPartial();
        } else {
          result.savedConversations_ = value;
        }
        result.hasSavedConversations = true;
        return this;
      }
      public Builder clearSavedConversations() {
        result.hasSavedConversations = false;
        result.savedConversations_ = D3.Hero.Hero.SavedConversations.getDefaultInstance();
        return this;
      }
      
      // repeated sfixed32 sno_active_skills = 9;
      public java.util.List<java.lang.Integer> getSnoActiveSkillsList() {
        return java.util.Collections.unmodifiableList(result.snoActiveSkills_);
      }
      public int getSnoActiveSkillsCount() {
        return result.getSnoActiveSkillsCount();
      }
      public int getSnoActiveSkills(int index) {
        return result.getSnoActiveSkills(index);
      }
      public Builder setSnoActiveSkills(int index, int value) {
        result.snoActiveSkills_.set(index, value);
        return this;
      }
      public Builder addSnoActiveSkills(int value) {
        if (result.snoActiveSkills_.isEmpty()) {
          result.snoActiveSkills_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.snoActiveSkills_.add(value);
        return this;
      }
      public Builder addAllSnoActiveSkills(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.snoActiveSkills_.isEmpty()) {
          result.snoActiveSkills_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.snoActiveSkills_);
        return this;
      }
      public Builder clearSnoActiveSkills() {
        result.snoActiveSkills_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sfixed32 sno_traits = 10;
      public java.util.List<java.lang.Integer> getSnoTraitsList() {
        return java.util.Collections.unmodifiableList(result.snoTraits_);
      }
      public int getSnoTraitsCount() {
        return result.getSnoTraitsCount();
      }
      public int getSnoTraits(int index) {
        return result.getSnoTraits(index);
      }
      public Builder setSnoTraits(int index, int value) {
        result.snoTraits_.set(index, value);
        return this;
      }
      public Builder addSnoTraits(int value) {
        if (result.snoTraits_.isEmpty()) {
          result.snoTraits_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.snoTraits_.add(value);
        return this;
      }
      public Builder addAllSnoTraits(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.snoTraits_.isEmpty()) {
          result.snoTraits_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.snoTraits_);
        return this;
      }
      public Builder clearSnoTraits() {
        result.snoTraits_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated sfixed32 seen_tutorials = 11;
      public java.util.List<java.lang.Integer> getSeenTutorialsList() {
        return java.util.Collections.unmodifiableList(result.seenTutorials_);
      }
      public int getSeenTutorialsCount() {
        return result.getSeenTutorialsCount();
      }
      public int getSeenTutorials(int index) {
        return result.getSeenTutorials(index);
      }
      public Builder setSeenTutorials(int index, int value) {
        result.seenTutorials_.set(index, value);
        return this;
      }
      public Builder addSeenTutorials(int value) {
        if (result.seenTutorials_.isEmpty()) {
          result.seenTutorials_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.seenTutorials_.add(value);
        return this;
      }
      public Builder addAllSeenTutorials(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.seenTutorials_.isEmpty()) {
          result.seenTutorials_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.seenTutorials_);
        return this;
      }
      public Builder clearSeenTutorials() {
        result.seenTutorials_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required .D3.Hero.SavePointData_Proto save_point = 12;
      public boolean hasSavePoint() {
        return result.hasSavePoint();
      }
      public D3.Hero.Hero.SavePointData_Proto getSavePoint() {
        return result.getSavePoint();
      }
      public Builder setSavePoint(D3.Hero.Hero.SavePointData_Proto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSavePoint = true;
        result.savePoint_ = value;
        return this;
      }
      public Builder setSavePoint(D3.Hero.Hero.SavePointData_Proto.Builder builderForValue) {
        result.hasSavePoint = true;
        result.savePoint_ = builderForValue.build();
        return this;
      }
      public Builder mergeSavePoint(D3.Hero.Hero.SavePointData_Proto value) {
        if (result.hasSavePoint() &&
            result.savePoint_ != D3.Hero.Hero.SavePointData_Proto.getDefaultInstance()) {
          result.savePoint_ =
            D3.Hero.Hero.SavePointData_Proto.newBuilder(result.savePoint_).mergeFrom(value).buildPartial();
        } else {
          result.savePoint_ = value;
        }
        result.hasSavePoint = true;
        return this;
      }
      public Builder clearSavePoint() {
        result.hasSavePoint = false;
        result.savePoint_ = D3.Hero.Hero.SavePointData_Proto.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.SavedData)
    }
    
    static {
      defaultInstance = new SavedData(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.SavedData)
  }
  
  public static final class Timestamps extends
      com.google.protobuf.GeneratedMessage {
    // Use Timestamps.newBuilder() to construct.
    private Timestamps() {
      initFields();
    }
    private Timestamps(boolean noInit) {}
    
    private static final Timestamps defaultInstance;
    public static Timestamps getDefaultInstance() {
      return defaultInstance;
    }
    
    public Timestamps getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_Timestamps_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_Timestamps_fieldAccessorTable;
    }
    
    // required sint64 create_time = 1;
    public static final int CREATE_TIME_FIELD_NUMBER = 1;
    private boolean hasCreateTime;
    private long createTime_ = 0L;
    public boolean hasCreateTime() { return hasCreateTime; }
    public long getCreateTime() { return createTime_; }
    
    // optional sint64 delete_time = 2;
    public static final int DELETE_TIME_FIELD_NUMBER = 2;
    private boolean hasDeleteTime;
    private long deleteTime_ = 0L;
    public boolean hasDeleteTime() { return hasDeleteTime; }
    public long getDeleteTime() { return deleteTime_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasCreateTime) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCreateTime()) {
        output.writeSInt64(1, getCreateTime());
      }
      if (hasDeleteTime()) {
        output.writeSInt64(2, getDeleteTime());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCreateTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(1, getCreateTime());
      }
      if (hasDeleteTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(2, getDeleteTime());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.Timestamps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.Timestamps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.Timestamps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.Timestamps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.Timestamps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.Timestamps result;
      
      // Construct using D3.Hero.Hero.Timestamps.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.Timestamps();
        return builder;
      }
      
      protected D3.Hero.Hero.Timestamps internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.Timestamps();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.Timestamps.getDescriptor();
      }
      
      public D3.Hero.Hero.Timestamps getDefaultInstanceForType() {
        return D3.Hero.Hero.Timestamps.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.Timestamps build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.Timestamps buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.Timestamps buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.Timestamps returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.Timestamps) {
          return mergeFrom((D3.Hero.Hero.Timestamps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.Timestamps other) {
        if (other == D3.Hero.Hero.Timestamps.getDefaultInstance()) return this;
        if (other.hasCreateTime()) {
          setCreateTime(other.getCreateTime());
        }
        if (other.hasDeleteTime()) {
          setDeleteTime(other.getDeleteTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setCreateTime(input.readSInt64());
              break;
            }
            case 16: {
              setDeleteTime(input.readSInt64());
              break;
            }
          }
        }
      }
      
      
      // required sint64 create_time = 1;
      public boolean hasCreateTime() {
        return result.hasCreateTime();
      }
      public long getCreateTime() {
        return result.getCreateTime();
      }
      public Builder setCreateTime(long value) {
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder clearCreateTime() {
        result.hasCreateTime = false;
        result.createTime_ = 0L;
        return this;
      }
      
      // optional sint64 delete_time = 2;
      public boolean hasDeleteTime() {
        return result.hasDeleteTime();
      }
      public long getDeleteTime() {
        return result.getDeleteTime();
      }
      public Builder setDeleteTime(long value) {
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder clearDeleteTime() {
        result.hasDeleteTime = false;
        result.deleteTime_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.Timestamps)
    }
    
    static {
      defaultInstance = new Timestamps(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.Timestamps)
  }
  
  public static final class SavedDefinition extends
      com.google.protobuf.GeneratedMessage {
    // Use SavedDefinition.newBuilder() to construct.
    private SavedDefinition() {
      initFields();
    }
    private SavedDefinition(boolean noInit) {}
    
    private static final SavedDefinition defaultInstance;
    public static SavedDefinition getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavedDefinition getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedDefinition_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_SavedDefinition_fieldAccessorTable;
    }
    
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private boolean hasVersion;
    private int version_ = 0;
    public boolean hasVersion() { return hasVersion; }
    public int getVersion() { return version_; }
    
    // optional .D3.Hero.Digest digest = 2;
    public static final int DIGEST_FIELD_NUMBER = 2;
    private boolean hasDigest;
    private D3.Hero.Hero.Digest digest_;
    public boolean hasDigest() { return hasDigest; }
    public D3.Hero.Hero.Digest getDigest() { return digest_; }
    
    // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
    public static final int SAVED_ATTRIBUTES_FIELD_NUMBER = 3;
    private boolean hasSavedAttributes;
    private D3.AttributeSerializer.AttributeSerializer.SavedAttributes savedAttributes_;
    public boolean hasSavedAttributes() { return hasSavedAttributes; }
    public D3.AttributeSerializer.AttributeSerializer.SavedAttributes getSavedAttributes() { return savedAttributes_; }
    
    // optional .D3.Hero.SavedData saved_data = 4;
    public static final int SAVED_DATA_FIELD_NUMBER = 4;
    private boolean hasSavedData;
    private D3.Hero.Hero.SavedData savedData_;
    public boolean hasSavedData() { return hasSavedData; }
    public D3.Hero.Hero.SavedData getSavedData() { return savedData_; }
    
    // repeated .D3.Hero.SavedQuest saved_quest = 5;
    public static final int SAVED_QUEST_FIELD_NUMBER = 5;
    private java.util.List<D3.Hero.Hero.SavedQuest> savedQuest_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.SavedQuest> getSavedQuestList() {
      return savedQuest_;
    }
    public int getSavedQuestCount() { return savedQuest_.size(); }
    public D3.Hero.Hero.SavedQuest getSavedQuest(int index) {
      return savedQuest_.get(index);
    }
    
    // optional .D3.Items.ItemList items = 6;
    public static final int ITEMS_FIELD_NUMBER = 6;
    private boolean hasItems;
    private D3.Items.Items.ItemList items_;
    public boolean hasItems() { return hasItems; }
    public D3.Items.Items.ItemList getItems() { return items_; }
    
    // repeated .D3.Hero.QuestRewardHistoryEntry quest_reward_history = 7;
    public static final int QUEST_REWARD_HISTORY_FIELD_NUMBER = 7;
    private java.util.List<D3.Hero.Hero.QuestRewardHistoryEntry> questRewardHistory_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.QuestRewardHistoryEntry> getQuestRewardHistoryList() {
      return questRewardHistory_;
    }
    public int getQuestRewardHistoryCount() { return questRewardHistory_.size(); }
    public D3.Hero.Hero.QuestRewardHistoryEntry getQuestRewardHistory(int index) {
      return questRewardHistory_.get(index);
    }
    
    private void initFields() {
      digest_ = D3.Hero.Hero.Digest.getDefaultInstance();
      savedAttributes_ = D3.AttributeSerializer.AttributeSerializer.SavedAttributes.getDefaultInstance();
      savedData_ = D3.Hero.Hero.SavedData.getDefaultInstance();
      items_ = D3.Items.Items.ItemList.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasVersion) return false;
      if (!hasSavedAttributes) return false;
      if (hasDigest()) {
        if (!getDigest().isInitialized()) return false;
      }
      if (!getSavedAttributes().isInitialized()) return false;
      if (hasSavedData()) {
        if (!getSavedData().isInitialized()) return false;
      }
      for (D3.Hero.Hero.SavedQuest element : getSavedQuestList()) {
        if (!element.isInitialized()) return false;
      }
      if (hasItems()) {
        if (!getItems().isInitialized()) return false;
      }
      for (D3.Hero.Hero.QuestRewardHistoryEntry element : getQuestRewardHistoryList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVersion()) {
        output.writeUInt32(1, getVersion());
      }
      if (hasDigest()) {
        output.writeMessage(2, getDigest());
      }
      if (hasSavedAttributes()) {
        output.writeMessage(3, getSavedAttributes());
      }
      if (hasSavedData()) {
        output.writeMessage(4, getSavedData());
      }
      for (D3.Hero.Hero.SavedQuest element : getSavedQuestList()) {
        output.writeMessage(5, element);
      }
      if (hasItems()) {
        output.writeMessage(6, getItems());
      }
      for (D3.Hero.Hero.QuestRewardHistoryEntry element : getQuestRewardHistoryList()) {
        output.writeMessage(7, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getVersion());
      }
      if (hasDigest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDigest());
      }
      if (hasSavedAttributes()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSavedAttributes());
      }
      if (hasSavedData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSavedData());
      }
      for (D3.Hero.Hero.SavedQuest element : getSavedQuestList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      if (hasItems()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getItems());
      }
      for (D3.Hero.Hero.QuestRewardHistoryEntry element : getQuestRewardHistoryList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.SavedDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.SavedDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.SavedDefinition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.SavedDefinition result;
      
      // Construct using D3.Hero.Hero.SavedDefinition.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.SavedDefinition();
        return builder;
      }
      
      protected D3.Hero.Hero.SavedDefinition internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.SavedDefinition();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.SavedDefinition.getDescriptor();
      }
      
      public D3.Hero.Hero.SavedDefinition getDefaultInstanceForType() {
        return D3.Hero.Hero.SavedDefinition.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.SavedDefinition build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.SavedDefinition buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.SavedDefinition buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.savedQuest_ != java.util.Collections.EMPTY_LIST) {
          result.savedQuest_ =
            java.util.Collections.unmodifiableList(result.savedQuest_);
        }
        if (result.questRewardHistory_ != java.util.Collections.EMPTY_LIST) {
          result.questRewardHistory_ =
            java.util.Collections.unmodifiableList(result.questRewardHistory_);
        }
        D3.Hero.Hero.SavedDefinition returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.SavedDefinition) {
          return mergeFrom((D3.Hero.Hero.SavedDefinition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.SavedDefinition other) {
        if (other == D3.Hero.Hero.SavedDefinition.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasDigest()) {
          mergeDigest(other.getDigest());
        }
        if (other.hasSavedAttributes()) {
          mergeSavedAttributes(other.getSavedAttributes());
        }
        if (other.hasSavedData()) {
          mergeSavedData(other.getSavedData());
        }
        if (!other.savedQuest_.isEmpty()) {
          if (result.savedQuest_.isEmpty()) {
            result.savedQuest_ = new java.util.ArrayList<D3.Hero.Hero.SavedQuest>();
          }
          result.savedQuest_.addAll(other.savedQuest_);
        }
        if (other.hasItems()) {
          mergeItems(other.getItems());
        }
        if (!other.questRewardHistory_.isEmpty()) {
          if (result.questRewardHistory_.isEmpty()) {
            result.questRewardHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestRewardHistoryEntry>();
          }
          result.questRewardHistory_.addAll(other.questRewardHistory_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setVersion(input.readUInt32());
              break;
            }
            case 18: {
              D3.Hero.Hero.Digest.Builder subBuilder = D3.Hero.Hero.Digest.newBuilder();
              if (hasDigest()) {
                subBuilder.mergeFrom(getDigest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDigest(subBuilder.buildPartial());
              break;
            }
            case 26: {
              D3.AttributeSerializer.AttributeSerializer.SavedAttributes.Builder subBuilder = D3.AttributeSerializer.AttributeSerializer.SavedAttributes.newBuilder();
              if (hasSavedAttributes()) {
                subBuilder.mergeFrom(getSavedAttributes());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSavedAttributes(subBuilder.buildPartial());
              break;
            }
            case 34: {
              D3.Hero.Hero.SavedData.Builder subBuilder = D3.Hero.Hero.SavedData.newBuilder();
              if (hasSavedData()) {
                subBuilder.mergeFrom(getSavedData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSavedData(subBuilder.buildPartial());
              break;
            }
            case 42: {
              D3.Hero.Hero.SavedQuest.Builder subBuilder = D3.Hero.Hero.SavedQuest.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addSavedQuest(subBuilder.buildPartial());
              break;
            }
            case 50: {
              D3.Items.Items.ItemList.Builder subBuilder = D3.Items.Items.ItemList.newBuilder();
              if (hasItems()) {
                subBuilder.mergeFrom(getItems());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setItems(subBuilder.buildPartial());
              break;
            }
            case 58: {
              D3.Hero.Hero.QuestRewardHistoryEntry.Builder subBuilder = D3.Hero.Hero.QuestRewardHistoryEntry.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addQuestRewardHistory(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required uint32 version = 1;
      public boolean hasVersion() {
        return result.hasVersion();
      }
      public int getVersion() {
        return result.getVersion();
      }
      public Builder setVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder clearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      // optional .D3.Hero.Digest digest = 2;
      public boolean hasDigest() {
        return result.hasDigest();
      }
      public D3.Hero.Hero.Digest getDigest() {
        return result.getDigest();
      }
      public Builder setDigest(D3.Hero.Hero.Digest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder setDigest(D3.Hero.Hero.Digest.Builder builderForValue) {
        result.hasDigest = true;
        result.digest_ = builderForValue.build();
        return this;
      }
      public Builder mergeDigest(D3.Hero.Hero.Digest value) {
        if (result.hasDigest() &&
            result.digest_ != D3.Hero.Hero.Digest.getDefaultInstance()) {
          result.digest_ =
            D3.Hero.Hero.Digest.newBuilder(result.digest_).mergeFrom(value).buildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder clearDigest() {
        result.hasDigest = false;
        result.digest_ = D3.Hero.Hero.Digest.getDefaultInstance();
        return this;
      }
      
      // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
      public boolean hasSavedAttributes() {
        return result.hasSavedAttributes();
      }
      public D3.AttributeSerializer.AttributeSerializer.SavedAttributes getSavedAttributes() {
        return result.getSavedAttributes();
      }
      public Builder setSavedAttributes(D3.AttributeSerializer.AttributeSerializer.SavedAttributes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder setSavedAttributes(D3.AttributeSerializer.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.build();
        return this;
      }
      public Builder mergeSavedAttributes(D3.AttributeSerializer.AttributeSerializer.SavedAttributes value) {
        if (result.hasSavedAttributes() &&
            result.savedAttributes_ != D3.AttributeSerializer.AttributeSerializer.SavedAttributes.getDefaultInstance()) {
          result.savedAttributes_ =
            D3.AttributeSerializer.AttributeSerializer.SavedAttributes.newBuilder(result.savedAttributes_).mergeFrom(value).buildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder clearSavedAttributes() {
        result.hasSavedAttributes = false;
        result.savedAttributes_ = D3.AttributeSerializer.AttributeSerializer.SavedAttributes.getDefaultInstance();
        return this;
      }
      
      // optional .D3.Hero.SavedData saved_data = 4;
      public boolean hasSavedData() {
        return result.hasSavedData();
      }
      public D3.Hero.Hero.SavedData getSavedData() {
        return result.getSavedData();
      }
      public Builder setSavedData(D3.Hero.Hero.SavedData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSavedData = true;
        result.savedData_ = value;
        return this;
      }
      public Builder setSavedData(D3.Hero.Hero.SavedData.Builder builderForValue) {
        result.hasSavedData = true;
        result.savedData_ = builderForValue.build();
        return this;
      }
      public Builder mergeSavedData(D3.Hero.Hero.SavedData value) {
        if (result.hasSavedData() &&
            result.savedData_ != D3.Hero.Hero.SavedData.getDefaultInstance()) {
          result.savedData_ =
            D3.Hero.Hero.SavedData.newBuilder(result.savedData_).mergeFrom(value).buildPartial();
        } else {
          result.savedData_ = value;
        }
        result.hasSavedData = true;
        return this;
      }
      public Builder clearSavedData() {
        result.hasSavedData = false;
        result.savedData_ = D3.Hero.Hero.SavedData.getDefaultInstance();
        return this;
      }
      
      // repeated .D3.Hero.SavedQuest saved_quest = 5;
      public java.util.List<D3.Hero.Hero.SavedQuest> getSavedQuestList() {
        return java.util.Collections.unmodifiableList(result.savedQuest_);
      }
      public int getSavedQuestCount() {
        return result.getSavedQuestCount();
      }
      public D3.Hero.Hero.SavedQuest getSavedQuest(int index) {
        return result.getSavedQuest(index);
      }
      public Builder setSavedQuest(int index, D3.Hero.Hero.SavedQuest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.savedQuest_.set(index, value);
        return this;
      }
      public Builder setSavedQuest(int index, D3.Hero.Hero.SavedQuest.Builder builderForValue) {
        result.savedQuest_.set(index, builderForValue.build());
        return this;
      }
      public Builder addSavedQuest(D3.Hero.Hero.SavedQuest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.savedQuest_.isEmpty()) {
          result.savedQuest_ = new java.util.ArrayList<D3.Hero.Hero.SavedQuest>();
        }
        result.savedQuest_.add(value);
        return this;
      }
      public Builder addSavedQuest(D3.Hero.Hero.SavedQuest.Builder builderForValue) {
        if (result.savedQuest_.isEmpty()) {
          result.savedQuest_ = new java.util.ArrayList<D3.Hero.Hero.SavedQuest>();
        }
        result.savedQuest_.add(builderForValue.build());
        return this;
      }
      public Builder addAllSavedQuest(
          java.lang.Iterable<? extends D3.Hero.Hero.SavedQuest> values) {
        if (result.savedQuest_.isEmpty()) {
          result.savedQuest_ = new java.util.ArrayList<D3.Hero.Hero.SavedQuest>();
        }
        super.addAll(values, result.savedQuest_);
        return this;
      }
      public Builder clearSavedQuest() {
        result.savedQuest_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .D3.Items.ItemList items = 6;
      public boolean hasItems() {
        return result.hasItems();
      }
      public D3.Items.Items.ItemList getItems() {
        return result.getItems();
      }
      public Builder setItems(D3.Items.Items.ItemList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasItems = true;
        result.items_ = value;
        return this;
      }
      public Builder setItems(D3.Items.Items.ItemList.Builder builderForValue) {
        result.hasItems = true;
        result.items_ = builderForValue.build();
        return this;
      }
      public Builder mergeItems(D3.Items.Items.ItemList value) {
        if (result.hasItems() &&
            result.items_ != D3.Items.Items.ItemList.getDefaultInstance()) {
          result.items_ =
            D3.Items.Items.ItemList.newBuilder(result.items_).mergeFrom(value).buildPartial();
        } else {
          result.items_ = value;
        }
        result.hasItems = true;
        return this;
      }
      public Builder clearItems() {
        result.hasItems = false;
        result.items_ = D3.Items.Items.ItemList.getDefaultInstance();
        return this;
      }
      
      // repeated .D3.Hero.QuestRewardHistoryEntry quest_reward_history = 7;
      public java.util.List<D3.Hero.Hero.QuestRewardHistoryEntry> getQuestRewardHistoryList() {
        return java.util.Collections.unmodifiableList(result.questRewardHistory_);
      }
      public int getQuestRewardHistoryCount() {
        return result.getQuestRewardHistoryCount();
      }
      public D3.Hero.Hero.QuestRewardHistoryEntry getQuestRewardHistory(int index) {
        return result.getQuestRewardHistory(index);
      }
      public Builder setQuestRewardHistory(int index, D3.Hero.Hero.QuestRewardHistoryEntry value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.questRewardHistory_.set(index, value);
        return this;
      }
      public Builder setQuestRewardHistory(int index, D3.Hero.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        result.questRewardHistory_.set(index, builderForValue.build());
        return this;
      }
      public Builder addQuestRewardHistory(D3.Hero.Hero.QuestRewardHistoryEntry value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.questRewardHistory_.isEmpty()) {
          result.questRewardHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestRewardHistoryEntry>();
        }
        result.questRewardHistory_.add(value);
        return this;
      }
      public Builder addQuestRewardHistory(D3.Hero.Hero.QuestRewardHistoryEntry.Builder builderForValue) {
        if (result.questRewardHistory_.isEmpty()) {
          result.questRewardHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestRewardHistoryEntry>();
        }
        result.questRewardHistory_.add(builderForValue.build());
        return this;
      }
      public Builder addAllQuestRewardHistory(
          java.lang.Iterable<? extends D3.Hero.Hero.QuestRewardHistoryEntry> values) {
        if (result.questRewardHistory_.isEmpty()) {
          result.questRewardHistory_ = new java.util.ArrayList<D3.Hero.Hero.QuestRewardHistoryEntry>();
        }
        super.addAll(values, result.questRewardHistory_);
        return this;
      }
      public Builder clearQuestRewardHistory() {
        result.questRewardHistory_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.SavedDefinition)
    }
    
    static {
      defaultInstance = new SavedDefinition(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.SavedDefinition)
  }
  
  public static final class NameSequence extends
      com.google.protobuf.GeneratedMessage {
    // Use NameSequence.newBuilder() to construct.
    private NameSequence() {
      initFields();
    }
    private NameSequence(boolean noInit) {}
    
    private static final NameSequence defaultInstance;
    public static NameSequence getDefaultInstance() {
      return defaultInstance;
    }
    
    public NameSequence getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_NameSequence_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_NameSequence_fieldAccessorTable;
    }
    
    // optional int64 sequence = 1;
    public static final int SEQUENCE_FIELD_NUMBER = 1;
    private boolean hasSequence;
    private long sequence_ = 0L;
    public boolean hasSequence() { return hasSequence; }
    public long getSequence() { return sequence_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSequence()) {
        output.writeInt64(1, getSequence());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSequence()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getSequence());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.NameSequence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.NameSequence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.NameSequence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.NameSequence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.NameSequence prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.NameSequence result;
      
      // Construct using D3.Hero.Hero.NameSequence.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.NameSequence();
        return builder;
      }
      
      protected D3.Hero.Hero.NameSequence internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.NameSequence();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.NameSequence.getDescriptor();
      }
      
      public D3.Hero.Hero.NameSequence getDefaultInstanceForType() {
        return D3.Hero.Hero.NameSequence.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.NameSequence build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.NameSequence buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.NameSequence buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.NameSequence returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.NameSequence) {
          return mergeFrom((D3.Hero.Hero.NameSequence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.NameSequence other) {
        if (other == D3.Hero.Hero.NameSequence.getDefaultInstance()) return this;
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSequence(input.readInt64());
              break;
            }
          }
        }
      }
      
      
      // optional int64 sequence = 1;
      public boolean hasSequence() {
        return result.hasSequence();
      }
      public long getSequence() {
        return result.getSequence();
      }
      public Builder setSequence(long value) {
        result.hasSequence = true;
        result.sequence_ = value;
        return this;
      }
      public Builder clearSequence() {
        result.hasSequence = false;
        result.sequence_ = 0L;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.NameSequence)
    }
    
    static {
      defaultInstance = new NameSequence(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.NameSequence)
  }
  
  public static final class NameText extends
      com.google.protobuf.GeneratedMessage {
    // Use NameText.newBuilder() to construct.
    private NameText() {
      initFields();
    }
    private NameText(boolean noInit) {}
    
    private static final NameText defaultInstance;
    public static NameText getDefaultInstance() {
      return defaultInstance;
    }
    
    public NameText getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_NameText_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_NameText_fieldAccessorTable;
    }
    
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasName) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasName()) {
        output.writeString(1, getName());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getName());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.NameText parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.NameText parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.NameText parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.NameText parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.NameText parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.NameText parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.NameText parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.NameText parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.NameText parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.NameText parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.NameText prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.NameText result;
      
      // Construct using D3.Hero.Hero.NameText.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.NameText();
        return builder;
      }
      
      protected D3.Hero.Hero.NameText internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.NameText();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.NameText.getDescriptor();
      }
      
      public D3.Hero.Hero.NameText getDefaultInstanceForType() {
        return D3.Hero.Hero.NameText.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.NameText build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.NameText buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.NameText buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.NameText returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.NameText) {
          return mergeFrom((D3.Hero.Hero.NameText)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.NameText other) {
        if (other == D3.Hero.Hero.NameText.getDefaultInstance()) return this;
        if (other.hasName()) {
          setName(other.getName());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string name = 1;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.NameText)
    }
    
    static {
      defaultInstance = new NameText(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.NameText)
  }
  
  public static final class Escrow extends
      com.google.protobuf.GeneratedMessage {
    // Use Escrow.newBuilder() to construct.
    private Escrow() {
      initFields();
    }
    private Escrow(boolean noInit) {}
    
    private static final Escrow defaultInstance;
    public static Escrow getDefaultInstance() {
      return defaultInstance;
    }
    
    public Escrow getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Hero.Hero.internal_static_D3_Hero_Escrow_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Hero.Hero.internal_static_D3_Hero_Escrow_fieldAccessorTable;
    }
    
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private boolean hasVersion;
    private int version_ = 0;
    public boolean hasVersion() { return hasVersion; }
    public int getVersion() { return version_; }
    
    // optional .D3.Items.Generator generator = 2;
    public static final int GENERATOR_FIELD_NUMBER = 2;
    private boolean hasGenerator;
    private D3.Items.Items.Generator generator_;
    public boolean hasGenerator() { return hasGenerator; }
    public D3.Items.Items.Generator getGenerator() { return generator_; }
    
    // optional .D3.Hero.SavedData hero_data = 3;
    public static final int HERO_DATA_FIELD_NUMBER = 3;
    private boolean hasHeroData;
    private D3.Hero.Hero.SavedData heroData_;
    public boolean hasHeroData() { return hasHeroData; }
    public D3.Hero.Hero.SavedData getHeroData() { return heroData_; }
    
    // optional uint32 state = 4;
    public static final int STATE_FIELD_NUMBER = 4;
    private boolean hasState;
    private int state_ = 0;
    public boolean hasState() { return hasState; }
    public int getState() { return state_; }
    
    private void initFields() {
      generator_ = D3.Items.Items.Generator.getDefaultInstance();
      heroData_ = D3.Hero.Hero.SavedData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasVersion) return false;
      if (hasGenerator()) {
        if (!getGenerator().isInitialized()) return false;
      }
      if (hasHeroData()) {
        if (!getHeroData().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVersion()) {
        output.writeUInt32(1, getVersion());
      }
      if (hasGenerator()) {
        output.writeMessage(2, getGenerator());
      }
      if (hasHeroData()) {
        output.writeMessage(3, getHeroData());
      }
      if (hasState()) {
        output.writeUInt32(4, getState());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getVersion());
      }
      if (hasGenerator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGenerator());
      }
      if (hasHeroData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getHeroData());
      }
      if (hasState()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getState());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Hero.Hero.Escrow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.Escrow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Hero.Hero.Escrow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Hero.Hero.Escrow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Hero.Hero.Escrow prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Hero.Hero.Escrow result;
      
      // Construct using D3.Hero.Hero.Escrow.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Hero.Hero.Escrow();
        return builder;
      }
      
      protected D3.Hero.Hero.Escrow internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Hero.Hero.Escrow();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Hero.Hero.Escrow.getDescriptor();
      }
      
      public D3.Hero.Hero.Escrow getDefaultInstanceForType() {
        return D3.Hero.Hero.Escrow.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Hero.Hero.Escrow build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Hero.Hero.Escrow buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Hero.Hero.Escrow buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Hero.Hero.Escrow returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Hero.Hero.Escrow) {
          return mergeFrom((D3.Hero.Hero.Escrow)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Hero.Hero.Escrow other) {
        if (other == D3.Hero.Hero.Escrow.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasGenerator()) {
          mergeGenerator(other.getGenerator());
        }
        if (other.hasHeroData()) {
          mergeHeroData(other.getHeroData());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setVersion(input.readUInt32());
              break;
            }
            case 18: {
              D3.Items.Items.Generator.Builder subBuilder = D3.Items.Items.Generator.newBuilder();
              if (hasGenerator()) {
                subBuilder.mergeFrom(getGenerator());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGenerator(subBuilder.buildPartial());
              break;
            }
            case 26: {
              D3.Hero.Hero.SavedData.Builder subBuilder = D3.Hero.Hero.SavedData.newBuilder();
              if (hasHeroData()) {
                subBuilder.mergeFrom(getHeroData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeroData(subBuilder.buildPartial());
              break;
            }
            case 32: {
              setState(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 version = 1;
      public boolean hasVersion() {
        return result.hasVersion();
      }
      public int getVersion() {
        return result.getVersion();
      }
      public Builder setVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder clearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      // optional .D3.Items.Generator generator = 2;
      public boolean hasGenerator() {
        return result.hasGenerator();
      }
      public D3.Items.Items.Generator getGenerator() {
        return result.getGenerator();
      }
      public Builder setGenerator(D3.Items.Items.Generator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder setGenerator(D3.Items.Items.Generator.Builder builderForValue) {
        result.hasGenerator = true;
        result.generator_ = builderForValue.build();
        return this;
      }
      public Builder mergeGenerator(D3.Items.Items.Generator value) {
        if (result.hasGenerator() &&
            result.generator_ != D3.Items.Items.Generator.getDefaultInstance()) {
          result.generator_ =
            D3.Items.Items.Generator.newBuilder(result.generator_).mergeFrom(value).buildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder clearGenerator() {
        result.hasGenerator = false;
        result.generator_ = D3.Items.Items.Generator.getDefaultInstance();
        return this;
      }
      
      // optional .D3.Hero.SavedData hero_data = 3;
      public boolean hasHeroData() {
        return result.hasHeroData();
      }
      public D3.Hero.Hero.SavedData getHeroData() {
        return result.getHeroData();
      }
      public Builder setHeroData(D3.Hero.Hero.SavedData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeroData = true;
        result.heroData_ = value;
        return this;
      }
      public Builder setHeroData(D3.Hero.Hero.SavedData.Builder builderForValue) {
        result.hasHeroData = true;
        result.heroData_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeroData(D3.Hero.Hero.SavedData value) {
        if (result.hasHeroData() &&
            result.heroData_ != D3.Hero.Hero.SavedData.getDefaultInstance()) {
          result.heroData_ =
            D3.Hero.Hero.SavedData.newBuilder(result.heroData_).mergeFrom(value).buildPartial();
        } else {
          result.heroData_ = value;
        }
        result.hasHeroData = true;
        return this;
      }
      public Builder clearHeroData() {
        result.hasHeroData = false;
        result.heroData_ = D3.Hero.Hero.SavedData.getDefaultInstance();
        return this;
      }
      
      // optional uint32 state = 4;
      public boolean hasState() {
        return result.hasState();
      }
      public int getState() {
        return result.getState();
      }
      public Builder setState(int value) {
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder clearState() {
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Hero.Escrow)
    }
    
    static {
      defaultInstance = new Escrow(true);
      D3.Hero.Hero.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Hero.Escrow)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_VisualItem_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_VisualItem_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_VisualEquipment_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_VisualEquipment_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_QuestHistoryEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_QuestHistoryEntry_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_QuestRewardHistoryEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_QuestRewardHistoryEntry_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_Digest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_Digest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_HotbarButtonData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_HotbarButtonData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_SkillKeyMapping_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_SkillKeyMapping_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_SavedQuest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_SavedQuest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_LearnedLore_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_LearnedLore_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_SavedConversations_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_SavedConversations_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_SavePointData_Proto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_SavePointData_Proto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_SavedData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_SavedData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_Timestamps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_Timestamps_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_SavedDefinition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_SavedDefinition_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_NameSequence_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_NameSequence_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_NameText_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_NameText_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Hero_Escrow_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Hero_Escrow_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nHero.proto\022\007D3.Hero\032\031AttributeSerializ" +
      "er.proto\032\016Hireling.proto\032\013Items.proto\032\023O" +
      "nlineService.proto\"\\\n\nVisualItem\022\014\n\004gbid" +
      "\030\001 \001(\017\022\020\n\010dye_type\030\002 \001(\021\022\030\n\020item_effect_" +
      "type\030\003 \001(\021\022\024\n\014effect_level\030\004 \001(\021\";\n\017Visu" +
      "alEquipment\022(\n\013visual_item\030\001 \003(\0132\023.D3.He" +
      "ro.VisualItem\":\n\021QuestHistoryEntry\022\021\n\tsn" +
      "o_quest\030\001 \002(\017\022\022\n\ndifficulty\030\002 \002(\021\"R\n\027Que" +
      "stRewardHistoryEntry\022\021\n\tsno_quest\030\001 \002(\017\022" +
      "\020\n\010step_uid\030\002 \002(\021\022\022\n\ndifficulty\030\003 \002(\021\"\305\003",
      "\n\006Digest\022\017\n\007version\030\001 \002(\r\022+\n\007hero_id\030\002 \002" +
      "(\0132\032.D3.OnlineService.EntityId\022\021\n\thero_n" +
      "ame\030\003 \002(\t\022\022\n\ngbid_class\030\004 \002(\017\022\r\n\005level\030\005" +
      " \002(\021\022\024\n\014player_flags\030\006 \002(\r\0222\n\020visual_equ" +
      "ipment\030\007 \002(\0132\030.D3.Hero.VisualEquipment\0221" +
      "\n\rquest_history\030\010 \003(\0132\032.D3.Hero.QuestHis" +
      "toryEntry\022\027\n\017last_played_act\030\n \002(\021\022\034\n\024hi" +
      "ghest_unlocked_act\030\013 \002(\021\022\036\n\026last_played_" +
      "difficulty\030\014 \002(\021\022#\n\033highest_unlocked_dif" +
      "ficulty\030\r \002(\021\022\031\n\021last_played_quest\030\016 \002(\017",
      "\022\036\n\026last_played_quest_step\030\017 \002(\021\022\023\n\013time" +
      "_played\030\020 \002(\r\"8\n\020HotbarButtonData\022\021\n\tsno" +
      "_power\030\001 \002(\017\022\021\n\tgbid_item\030\002 \002(\017\"M\n\017Skill" +
      "KeyMapping\022\021\n\tsno_power\030\001 \002(\017\022\021\n\tid_hotk" +
      "ey\030\002 \002(\021\022\024\n\014skill_button\030\003 \002(\021\"\207\001\n\nSaved" +
      "Quest\022\021\n\tsno_quest\030\001 \002(\017\022\022\n\ndifficulty\030\002" +
      " \002(\021\022\030\n\020current_step_uid\030\003 \002(\021\022\027\n\017object" +
      "ive_state\030\004 \003(\021\022\037\n\027failure_condition_sta" +
      "te\030\005 \003(\021\"\'\n\013LearnedLore\022\030\n\020sno_lore_lear" +
      "ned\030\001 \003(\017\"\\\n\022SavedConversations\022%\n\035playe",
      "d_conversations_bitfield\030\001 \002(\014\022\037\n\027sno_sa" +
      "ved_conversations\030\002 \003(\017\"Z\n\023SavePointData" +
      "_Proto\022\021\n\tsno_world\030\001 \002(\017\022\030\n\020savepoint_n" +
      "umber\030\002 \002(\021\022\026\n\016creates_portal\030\003 \002(\r\"\331\003\n\t" +
      "SavedData\022<\n\031hotbar_button_assignments\030\001" +
      " \003(\0132\031.D3.Hero.HotbarButtonData\022/\n\rskill" +
      "_key_map\030\002 \003(\0132\030.D3.Hero.SkillKeyMapping" +
      "\022\023\n\013time_played\030\003 \002(\r\022\033\n\023activated_waypo" +
      "ints\030\004 \002(\r\0223\n\023hireling_saved_data\030\005 \002(\0132" +
      "\026.D3.Hireling.SavedData\022\027\n\017last_level_ti",
      "me\030\006 \002(\r\022*\n\014learned_lore\030\007 \002(\0132\024.D3.Hero" +
      ".LearnedLore\0228\n\023saved_conversations\030\010 \002(" +
      "\0132\033.D3.Hero.SavedConversations\022\031\n\021sno_ac" +
      "tive_skills\030\t \003(\017\022\022\n\nsno_traits\030\n \003(\017\022\026\n" +
      "\016seen_tutorials\030\013 \003(\017\0220\n\nsave_point\030\014 \002(" +
      "\0132\034.D3.Hero.SavePointData_Proto\"6\n\nTimes" +
      "tamps\022\023\n\013create_time\030\001 \002(\022\022\023\n\013delete_tim" +
      "e\030\002 \001(\022\"\273\002\n\017SavedDefinition\022\017\n\007version\030\001" +
      " \002(\r\022\037\n\006digest\030\002 \001(\0132\017.D3.Hero.Digest\022A\n" +
      "\020saved_attributes\030\003 \002(\0132\'.D3.AttributeSe",
      "rializer.SavedAttributes\022&\n\nsaved_data\030\004" +
      " \001(\0132\022.D3.Hero.SavedData\022(\n\013saved_quest\030" +
      "\005 \003(\0132\023.D3.Hero.SavedQuest\022!\n\005items\030\006 \001(" +
      "\0132\022.D3.Items.ItemList\022>\n\024quest_reward_hi" +
      "story\030\007 \003(\0132 .D3.Hero.QuestRewardHistory" +
      "Entry\" \n\014NameSequence\022\020\n\010sequence\030\001 \001(\003\"" +
      "\030\n\010NameText\022\014\n\004name\030\001 \002(\t\"w\n\006Escrow\022\017\n\007v" +
      "ersion\030\001 \002(\r\022&\n\tgenerator\030\002 \001(\0132\023.D3.Ite" +
      "ms.Generator\022%\n\thero_data\030\003 \001(\0132\022.D3.Her" +
      "o.SavedData\022\r\n\005state\030\004 \001(\r"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_Hero_VisualItem_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_Hero_VisualItem_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_VisualItem_descriptor,
              new java.lang.String[] { "Gbid", "DyeType", "ItemEffectType", "EffectLevel", },
              D3.Hero.Hero.VisualItem.class,
              D3.Hero.Hero.VisualItem.Builder.class);
          internal_static_D3_Hero_VisualEquipment_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_D3_Hero_VisualEquipment_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_VisualEquipment_descriptor,
              new java.lang.String[] { "VisualItem", },
              D3.Hero.Hero.VisualEquipment.class,
              D3.Hero.Hero.VisualEquipment.Builder.class);
          internal_static_D3_Hero_QuestHistoryEntry_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_D3_Hero_QuestHistoryEntry_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_QuestHistoryEntry_descriptor,
              new java.lang.String[] { "SnoQuest", "Difficulty", },
              D3.Hero.Hero.QuestHistoryEntry.class,
              D3.Hero.Hero.QuestHistoryEntry.Builder.class);
          internal_static_D3_Hero_QuestRewardHistoryEntry_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_D3_Hero_QuestRewardHistoryEntry_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_QuestRewardHistoryEntry_descriptor,
              new java.lang.String[] { "SnoQuest", "StepUid", "Difficulty", },
              D3.Hero.Hero.QuestRewardHistoryEntry.class,
              D3.Hero.Hero.QuestRewardHistoryEntry.Builder.class);
          internal_static_D3_Hero_Digest_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_D3_Hero_Digest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_Digest_descriptor,
              new java.lang.String[] { "Version", "HeroId", "HeroName", "GbidClass", "Level", "PlayerFlags", "VisualEquipment", "QuestHistory", "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficulty", "HighestUnlockedDifficulty", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", },
              D3.Hero.Hero.Digest.class,
              D3.Hero.Hero.Digest.Builder.class);
          internal_static_D3_Hero_HotbarButtonData_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_D3_Hero_HotbarButtonData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_HotbarButtonData_descriptor,
              new java.lang.String[] { "SnoPower", "GbidItem", },
              D3.Hero.Hero.HotbarButtonData.class,
              D3.Hero.Hero.HotbarButtonData.Builder.class);
          internal_static_D3_Hero_SkillKeyMapping_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_D3_Hero_SkillKeyMapping_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_SkillKeyMapping_descriptor,
              new java.lang.String[] { "SnoPower", "IdHotkey", "SkillButton", },
              D3.Hero.Hero.SkillKeyMapping.class,
              D3.Hero.Hero.SkillKeyMapping.Builder.class);
          internal_static_D3_Hero_SavedQuest_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_D3_Hero_SavedQuest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_SavedQuest_descriptor,
              new java.lang.String[] { "SnoQuest", "Difficulty", "CurrentStepUid", "ObjectiveState", "FailureConditionState", },
              D3.Hero.Hero.SavedQuest.class,
              D3.Hero.Hero.SavedQuest.Builder.class);
          internal_static_D3_Hero_LearnedLore_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_D3_Hero_LearnedLore_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_LearnedLore_descriptor,
              new java.lang.String[] { "SnoLoreLearned", },
              D3.Hero.Hero.LearnedLore.class,
              D3.Hero.Hero.LearnedLore.Builder.class);
          internal_static_D3_Hero_SavedConversations_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_D3_Hero_SavedConversations_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_SavedConversations_descriptor,
              new java.lang.String[] { "PlayedConversationsBitfield", "SnoSavedConversations", },
              D3.Hero.Hero.SavedConversations.class,
              D3.Hero.Hero.SavedConversations.Builder.class);
          internal_static_D3_Hero_SavePointData_Proto_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_D3_Hero_SavePointData_Proto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_SavePointData_Proto_descriptor,
              new java.lang.String[] { "SnoWorld", "SavepointNumber", "CreatesPortal", },
              D3.Hero.Hero.SavePointData_Proto.class,
              D3.Hero.Hero.SavePointData_Proto.Builder.class);
          internal_static_D3_Hero_SavedData_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_D3_Hero_SavedData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_SavedData_descriptor,
              new java.lang.String[] { "HotbarButtonAssignments", "SkillKeyMap", "TimePlayed", "ActivatedWaypoints", "HirelingSavedData", "LastLevelTime", "LearnedLore", "SavedConversations", "SnoActiveSkills", "SnoTraits", "SeenTutorials", "SavePoint", },
              D3.Hero.Hero.SavedData.class,
              D3.Hero.Hero.SavedData.Builder.class);
          internal_static_D3_Hero_Timestamps_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_D3_Hero_Timestamps_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_Timestamps_descriptor,
              new java.lang.String[] { "CreateTime", "DeleteTime", },
              D3.Hero.Hero.Timestamps.class,
              D3.Hero.Hero.Timestamps.Builder.class);
          internal_static_D3_Hero_SavedDefinition_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_D3_Hero_SavedDefinition_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_SavedDefinition_descriptor,
              new java.lang.String[] { "Version", "Digest", "SavedAttributes", "SavedData", "SavedQuest", "Items", "QuestRewardHistory", },
              D3.Hero.Hero.SavedDefinition.class,
              D3.Hero.Hero.SavedDefinition.Builder.class);
          internal_static_D3_Hero_NameSequence_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_D3_Hero_NameSequence_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_NameSequence_descriptor,
              new java.lang.String[] { "Sequence", },
              D3.Hero.Hero.NameSequence.class,
              D3.Hero.Hero.NameSequence.Builder.class);
          internal_static_D3_Hero_NameText_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_D3_Hero_NameText_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_NameText_descriptor,
              new java.lang.String[] { "Name", },
              D3.Hero.Hero.NameText.class,
              D3.Hero.Hero.NameText.Builder.class);
          internal_static_D3_Hero_Escrow_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_D3_Hero_Escrow_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Hero_Escrow_descriptor,
              new java.lang.String[] { "Version", "Generator", "HeroData", "State", },
              D3.Hero.Hero.Escrow.class,
              D3.Hero.Hero.Escrow.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          D3.AttributeSerializer.AttributeSerializer.getDescriptor(),
          D3.Hireling.Hireling.getDescriptor(),
          D3.Items.Items.getDescriptor(),
          D3.OnlineService.OnlineService.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
