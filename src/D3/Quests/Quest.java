// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Quest.proto

package D3.Quests;

public final class Quest {
  private Quest() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class QuestReward extends
      com.google.protobuf.GeneratedMessage {
    // Use QuestReward.newBuilder() to construct.
    private QuestReward() {
      initFields();
    }
    private QuestReward(boolean noInit) {}
    
    private static final QuestReward defaultInstance;
    public static QuestReward getDefaultInstance() {
      return defaultInstance;
    }
    
    public QuestReward getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Quests.Quest.internal_static_D3_Quests_QuestReward_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Quests.Quest.internal_static_D3_Quests_QuestReward_fieldAccessorTable;
    }
    
    // optional int32 xp_granted = 1;
    public static final int XP_GRANTED_FIELD_NUMBER = 1;
    private boolean hasXpGranted;
    private int xpGranted_ = 0;
    public boolean hasXpGranted() { return hasXpGranted; }
    public int getXpGranted() { return xpGranted_; }
    
    // optional int32 gold_granted = 2;
    public static final int GOLD_GRANTED_FIELD_NUMBER = 2;
    private boolean hasGoldGranted;
    private int goldGranted_ = 0;
    public boolean hasGoldGranted() { return hasGoldGranted; }
    public int getGoldGranted() { return goldGranted_; }
    
    // optional .D3.Items.Generator item = 3;
    public static final int ITEM_FIELD_NUMBER = 3;
    private boolean hasItem;
    private D3.Items.Items.Generator item_;
    public boolean hasItem() { return hasItem; }
    public D3.Items.Items.Generator getItem() { return item_; }
    
    private void initFields() {
      item_ = D3.Items.Items.Generator.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (hasItem()) {
        if (!getItem().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasXpGranted()) {
        output.writeInt32(1, getXpGranted());
      }
      if (hasGoldGranted()) {
        output.writeInt32(2, getGoldGranted());
      }
      if (hasItem()) {
        output.writeMessage(3, getItem());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasXpGranted()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getXpGranted());
      }
      if (hasGoldGranted()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getGoldGranted());
      }
      if (hasItem()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getItem());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Quests.Quest.QuestReward parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Quests.Quest.QuestReward parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Quests.Quest.QuestReward parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Quests.Quest.QuestReward parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Quests.Quest.QuestReward prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Quests.Quest.QuestReward result;
      
      // Construct using D3.Quests.Quest.QuestReward.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Quests.Quest.QuestReward();
        return builder;
      }
      
      protected D3.Quests.Quest.QuestReward internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Quests.Quest.QuestReward();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Quests.Quest.QuestReward.getDescriptor();
      }
      
      public D3.Quests.Quest.QuestReward getDefaultInstanceForType() {
        return D3.Quests.Quest.QuestReward.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Quests.Quest.QuestReward build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Quests.Quest.QuestReward buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Quests.Quest.QuestReward buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Quests.Quest.QuestReward returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Quests.Quest.QuestReward) {
          return mergeFrom((D3.Quests.Quest.QuestReward)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Quests.Quest.QuestReward other) {
        if (other == D3.Quests.Quest.QuestReward.getDefaultInstance()) return this;
        if (other.hasXpGranted()) {
          setXpGranted(other.getXpGranted());
        }
        if (other.hasGoldGranted()) {
          setGoldGranted(other.getGoldGranted());
        }
        if (other.hasItem()) {
          mergeItem(other.getItem());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setXpGranted(input.readInt32());
              break;
            }
            case 16: {
              setGoldGranted(input.readInt32());
              break;
            }
            case 26: {
              D3.Items.Items.Generator.Builder subBuilder = D3.Items.Items.Generator.newBuilder();
              if (hasItem()) {
                subBuilder.mergeFrom(getItem());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setItem(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 xp_granted = 1;
      public boolean hasXpGranted() {
        return result.hasXpGranted();
      }
      public int getXpGranted() {
        return result.getXpGranted();
      }
      public Builder setXpGranted(int value) {
        result.hasXpGranted = true;
        result.xpGranted_ = value;
        return this;
      }
      public Builder clearXpGranted() {
        result.hasXpGranted = false;
        result.xpGranted_ = 0;
        return this;
      }
      
      // optional int32 gold_granted = 2;
      public boolean hasGoldGranted() {
        return result.hasGoldGranted();
      }
      public int getGoldGranted() {
        return result.getGoldGranted();
      }
      public Builder setGoldGranted(int value) {
        result.hasGoldGranted = true;
        result.goldGranted_ = value;
        return this;
      }
      public Builder clearGoldGranted() {
        result.hasGoldGranted = false;
        result.goldGranted_ = 0;
        return this;
      }
      
      // optional .D3.Items.Generator item = 3;
      public boolean hasItem() {
        return result.hasItem();
      }
      public D3.Items.Items.Generator getItem() {
        return result.getItem();
      }
      public Builder setItem(D3.Items.Items.Generator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasItem = true;
        result.item_ = value;
        return this;
      }
      public Builder setItem(D3.Items.Items.Generator.Builder builderForValue) {
        result.hasItem = true;
        result.item_ = builderForValue.build();
        return this;
      }
      public Builder mergeItem(D3.Items.Items.Generator value) {
        if (result.hasItem() &&
            result.item_ != D3.Items.Items.Generator.getDefaultInstance()) {
          result.item_ =
            D3.Items.Items.Generator.newBuilder(result.item_).mergeFrom(value).buildPartial();
        } else {
          result.item_ = value;
        }
        result.hasItem = true;
        return this;
      }
      public Builder clearItem() {
        result.hasItem = false;
        result.item_ = D3.Items.Items.Generator.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Quests.QuestReward)
    }
    
    static {
      defaultInstance = new QuestReward(true);
      D3.Quests.Quest.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Quests.QuestReward)
  }
  
  public static final class QuestStepComplete extends
      com.google.protobuf.GeneratedMessage {
    // Use QuestStepComplete.newBuilder() to construct.
    private QuestStepComplete() {
      initFields();
    }
    private QuestStepComplete(boolean noInit) {}
    
    private static final QuestStepComplete defaultInstance;
    public static QuestStepComplete getDefaultInstance() {
      return defaultInstance;
    }
    
    public QuestStepComplete getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Quests.Quest.internal_static_D3_Quests_QuestStepComplete_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Quests.Quest.internal_static_D3_Quests_QuestStepComplete_fieldAccessorTable;
    }
    
    // required bool is_quest_complete = 1;
    public static final int IS_QUEST_COMPLETE_FIELD_NUMBER = 1;
    private boolean hasIsQuestComplete;
    private boolean isQuestComplete_ = false;
    public boolean hasIsQuestComplete() { return hasIsQuestComplete; }
    public boolean getIsQuestComplete() { return isQuestComplete_; }
    
    // optional .D3.Quests.QuestReward reward = 2;
    public static final int REWARD_FIELD_NUMBER = 2;
    private boolean hasReward;
    private D3.Quests.Quest.QuestReward reward_;
    public boolean hasReward() { return hasReward; }
    public D3.Quests.Quest.QuestReward getReward() { return reward_; }
    
    private void initFields() {
      reward_ = D3.Quests.Quest.QuestReward.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasIsQuestComplete) return false;
      if (hasReward()) {
        if (!getReward().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasIsQuestComplete()) {
        output.writeBool(1, getIsQuestComplete());
      }
      if (hasReward()) {
        output.writeMessage(2, getReward());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasIsQuestComplete()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, getIsQuestComplete());
      }
      if (hasReward()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getReward());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Quests.Quest.QuestStepComplete parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Quests.Quest.QuestStepComplete parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Quests.Quest.QuestStepComplete parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Quests.Quest.QuestStepComplete prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Quests.Quest.QuestStepComplete result;
      
      // Construct using D3.Quests.Quest.QuestStepComplete.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Quests.Quest.QuestStepComplete();
        return builder;
      }
      
      protected D3.Quests.Quest.QuestStepComplete internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Quests.Quest.QuestStepComplete();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Quests.Quest.QuestStepComplete.getDescriptor();
      }
      
      public D3.Quests.Quest.QuestStepComplete getDefaultInstanceForType() {
        return D3.Quests.Quest.QuestStepComplete.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Quests.Quest.QuestStepComplete build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Quests.Quest.QuestStepComplete buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Quests.Quest.QuestStepComplete buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Quests.Quest.QuestStepComplete returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Quests.Quest.QuestStepComplete) {
          return mergeFrom((D3.Quests.Quest.QuestStepComplete)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Quests.Quest.QuestStepComplete other) {
        if (other == D3.Quests.Quest.QuestStepComplete.getDefaultInstance()) return this;
        if (other.hasIsQuestComplete()) {
          setIsQuestComplete(other.getIsQuestComplete());
        }
        if (other.hasReward()) {
          mergeReward(other.getReward());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setIsQuestComplete(input.readBool());
              break;
            }
            case 18: {
              D3.Quests.Quest.QuestReward.Builder subBuilder = D3.Quests.Quest.QuestReward.newBuilder();
              if (hasReward()) {
                subBuilder.mergeFrom(getReward());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setReward(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required bool is_quest_complete = 1;
      public boolean hasIsQuestComplete() {
        return result.hasIsQuestComplete();
      }
      public boolean getIsQuestComplete() {
        return result.getIsQuestComplete();
      }
      public Builder setIsQuestComplete(boolean value) {
        result.hasIsQuestComplete = true;
        result.isQuestComplete_ = value;
        return this;
      }
      public Builder clearIsQuestComplete() {
        result.hasIsQuestComplete = false;
        result.isQuestComplete_ = false;
        return this;
      }
      
      // optional .D3.Quests.QuestReward reward = 2;
      public boolean hasReward() {
        return result.hasReward();
      }
      public D3.Quests.Quest.QuestReward getReward() {
        return result.getReward();
      }
      public Builder setReward(D3.Quests.Quest.QuestReward value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasReward = true;
        result.reward_ = value;
        return this;
      }
      public Builder setReward(D3.Quests.Quest.QuestReward.Builder builderForValue) {
        result.hasReward = true;
        result.reward_ = builderForValue.build();
        return this;
      }
      public Builder mergeReward(D3.Quests.Quest.QuestReward value) {
        if (result.hasReward() &&
            result.reward_ != D3.Quests.Quest.QuestReward.getDefaultInstance()) {
          result.reward_ =
            D3.Quests.Quest.QuestReward.newBuilder(result.reward_).mergeFrom(value).buildPartial();
        } else {
          result.reward_ = value;
        }
        result.hasReward = true;
        return this;
      }
      public Builder clearReward() {
        result.hasReward = false;
        result.reward_ = D3.Quests.Quest.QuestReward.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Quests.QuestStepComplete)
    }
    
    static {
      defaultInstance = new QuestStepComplete(true);
      D3.Quests.Quest.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Quests.QuestStepComplete)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Quests_QuestReward_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Quests_QuestReward_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Quests_QuestStepComplete_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Quests_QuestStepComplete_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Quest.proto\022\tD3.Quests\032\013Items.proto\"Z\n" +
      "\013QuestReward\022\022\n\nxp_granted\030\001 \001(\005\022\024\n\014gold" +
      "_granted\030\002 \001(\005\022!\n\004item\030\003 \001(\0132\023.D3.Items." +
      "Generator\"V\n\021QuestStepComplete\022\031\n\021is_que" +
      "st_complete\030\001 \002(\010\022&\n\006reward\030\002 \001(\0132\026.D3.Q" +
      "uests.QuestReward"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_Quests_QuestReward_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_Quests_QuestReward_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Quests_QuestReward_descriptor,
              new java.lang.String[] { "XpGranted", "GoldGranted", "Item", },
              D3.Quests.Quest.QuestReward.class,
              D3.Quests.Quest.QuestReward.Builder.class);
          internal_static_D3_Quests_QuestStepComplete_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_D3_Quests_QuestStepComplete_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Quests_QuestStepComplete_descriptor,
              new java.lang.String[] { "IsQuestComplete", "Reward", },
              D3.Quests.Quest.QuestStepComplete.class,
              D3.Quests.Quest.QuestStepComplete.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          D3.Items.Items.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
