// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Items.proto

package D3.Items;

public final class Items {
  private Items() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class RareItemName extends
      com.google.protobuf.GeneratedMessage {
    // Use RareItemName.newBuilder() to construct.
    private RareItemName() {
      initFields();
    }
    private RareItemName(boolean noInit) {}
    
    private static final RareItemName defaultInstance;
    public static RareItemName getDefaultInstance() {
      return defaultInstance;
    }
    
    public RareItemName getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_RareItemName_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_RareItemName_fieldAccessorTable;
    }
    
    // required bool item_name_is_prefix = 1;
    public static final int ITEM_NAME_IS_PREFIX_FIELD_NUMBER = 1;
    private boolean hasItemNameIsPrefix;
    private boolean itemNameIsPrefix_ = false;
    public boolean hasItemNameIsPrefix() { return hasItemNameIsPrefix; }
    public boolean getItemNameIsPrefix() { return itemNameIsPrefix_; }
    
    // required sfixed32 sno_affix_string_list = 2;
    public static final int SNO_AFFIX_STRING_LIST_FIELD_NUMBER = 2;
    private boolean hasSnoAffixStringList;
    private int snoAffixStringList_ = 0;
    public boolean hasSnoAffixStringList() { return hasSnoAffixStringList; }
    public int getSnoAffixStringList() { return snoAffixStringList_; }
    
    // required sint32 affix_string_list_index = 3;
    public static final int AFFIX_STRING_LIST_INDEX_FIELD_NUMBER = 3;
    private boolean hasAffixStringListIndex;
    private int affixStringListIndex_ = 0;
    public boolean hasAffixStringListIndex() { return hasAffixStringListIndex; }
    public int getAffixStringListIndex() { return affixStringListIndex_; }
    
    // required sint32 item_string_list_index = 4;
    public static final int ITEM_STRING_LIST_INDEX_FIELD_NUMBER = 4;
    private boolean hasItemStringListIndex;
    private int itemStringListIndex_ = 0;
    public boolean hasItemStringListIndex() { return hasItemStringListIndex; }
    public int getItemStringListIndex() { return itemStringListIndex_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasItemNameIsPrefix) return false;
      if (!hasSnoAffixStringList) return false;
      if (!hasAffixStringListIndex) return false;
      if (!hasItemStringListIndex) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasItemNameIsPrefix()) {
        output.writeBool(1, getItemNameIsPrefix());
      }
      if (hasSnoAffixStringList()) {
        output.writeSFixed32(2, getSnoAffixStringList());
      }
      if (hasAffixStringListIndex()) {
        output.writeSInt32(3, getAffixStringListIndex());
      }
      if (hasItemStringListIndex()) {
        output.writeSInt32(4, getItemStringListIndex());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasItemNameIsPrefix()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, getItemNameIsPrefix());
      }
      if (hasSnoAffixStringList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(2, getSnoAffixStringList());
      }
      if (hasAffixStringListIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, getAffixStringListIndex());
      }
      if (hasItemStringListIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, getItemStringListIndex());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.RareItemName parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.RareItemName parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.RareItemName parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.RareItemName parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.RareItemName parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.RareItemName parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.RareItemName parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.RareItemName parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.RareItemName parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.RareItemName parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.RareItemName prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.RareItemName result;
      
      // Construct using D3.Items.Items.RareItemName.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.RareItemName();
        return builder;
      }
      
      protected D3.Items.Items.RareItemName internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.RareItemName();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.RareItemName.getDescriptor();
      }
      
      public D3.Items.Items.RareItemName getDefaultInstanceForType() {
        return D3.Items.Items.RareItemName.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.RareItemName build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.RareItemName buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.RareItemName buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.RareItemName returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.RareItemName) {
          return mergeFrom((D3.Items.Items.RareItemName)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.RareItemName other) {
        if (other == D3.Items.Items.RareItemName.getDefaultInstance()) return this;
        if (other.hasItemNameIsPrefix()) {
          setItemNameIsPrefix(other.getItemNameIsPrefix());
        }
        if (other.hasSnoAffixStringList()) {
          setSnoAffixStringList(other.getSnoAffixStringList());
        }
        if (other.hasAffixStringListIndex()) {
          setAffixStringListIndex(other.getAffixStringListIndex());
        }
        if (other.hasItemStringListIndex()) {
          setItemStringListIndex(other.getItemStringListIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setItemNameIsPrefix(input.readBool());
              break;
            }
            case 21: {
              setSnoAffixStringList(input.readSFixed32());
              break;
            }
            case 24: {
              setAffixStringListIndex(input.readSInt32());
              break;
            }
            case 32: {
              setItemStringListIndex(input.readSInt32());
              break;
            }
          }
        }
      }
      
      
      // required bool item_name_is_prefix = 1;
      public boolean hasItemNameIsPrefix() {
        return result.hasItemNameIsPrefix();
      }
      public boolean getItemNameIsPrefix() {
        return result.getItemNameIsPrefix();
      }
      public Builder setItemNameIsPrefix(boolean value) {
        result.hasItemNameIsPrefix = true;
        result.itemNameIsPrefix_ = value;
        return this;
      }
      public Builder clearItemNameIsPrefix() {
        result.hasItemNameIsPrefix = false;
        result.itemNameIsPrefix_ = false;
        return this;
      }
      
      // required sfixed32 sno_affix_string_list = 2;
      public boolean hasSnoAffixStringList() {
        return result.hasSnoAffixStringList();
      }
      public int getSnoAffixStringList() {
        return result.getSnoAffixStringList();
      }
      public Builder setSnoAffixStringList(int value) {
        result.hasSnoAffixStringList = true;
        result.snoAffixStringList_ = value;
        return this;
      }
      public Builder clearSnoAffixStringList() {
        result.hasSnoAffixStringList = false;
        result.snoAffixStringList_ = 0;
        return this;
      }
      
      // required sint32 affix_string_list_index = 3;
      public boolean hasAffixStringListIndex() {
        return result.hasAffixStringListIndex();
      }
      public int getAffixStringListIndex() {
        return result.getAffixStringListIndex();
      }
      public Builder setAffixStringListIndex(int value) {
        result.hasAffixStringListIndex = true;
        result.affixStringListIndex_ = value;
        return this;
      }
      public Builder clearAffixStringListIndex() {
        result.hasAffixStringListIndex = false;
        result.affixStringListIndex_ = 0;
        return this;
      }
      
      // required sint32 item_string_list_index = 4;
      public boolean hasItemStringListIndex() {
        return result.hasItemStringListIndex();
      }
      public int getItemStringListIndex() {
        return result.getItemStringListIndex();
      }
      public Builder setItemStringListIndex(int value) {
        result.hasItemStringListIndex = true;
        result.itemStringListIndex_ = value;
        return this;
      }
      public Builder clearItemStringListIndex() {
        result.hasItemStringListIndex = false;
        result.itemStringListIndex_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.RareItemName)
    }
    
    static {
      defaultInstance = new RareItemName(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.RareItemName)
  }
  
  public static final class Generator extends
      com.google.protobuf.GeneratedMessage {
    // Use Generator.newBuilder() to construct.
    private Generator() {
      initFields();
    }
    private Generator(boolean noInit) {}
    
    private static final Generator defaultInstance;
    public static Generator getDefaultInstance() {
      return defaultInstance;
    }
    
    public Generator getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_Generator_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_Generator_fieldAccessorTable;
    }
    
    // required uint32 seed = 1;
    public static final int SEED_FIELD_NUMBER = 1;
    private boolean hasSeed;
    private int seed_ = 0;
    public boolean hasSeed() { return hasSeed; }
    public int getSeed() { return seed_; }
    
    // required .D3.GameBalance.Handle gb_handle = 2;
    public static final int GB_HANDLE_FIELD_NUMBER = 2;
    private boolean hasGbHandle;
    private D3.GameBalance.GBHandle.Handle gbHandle_;
    public boolean hasGbHandle() { return hasGbHandle; }
    public D3.GameBalance.GBHandle.Handle getGbHandle() { return gbHandle_; }
    
    // repeated sfixed32 base_affixes = 3;
    public static final int BASE_AFFIXES_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> baseAffixes_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getBaseAffixesList() {
      return baseAffixes_;
    }
    public int getBaseAffixesCount() { return baseAffixes_.size(); }
    public int getBaseAffixes(int index) {
      return baseAffixes_.get(index);
    }
    
    // required .D3.Items.RareItemName rare_item_name = 4;
    public static final int RARE_ITEM_NAME_FIELD_NUMBER = 4;
    private boolean hasRareItemName;
    private D3.Items.Items.RareItemName rareItemName_;
    public boolean hasRareItemName() { return hasRareItemName; }
    public D3.Items.Items.RareItemName getRareItemName() { return rareItemName_; }
    
    // required sfixed32 enchant_affix = 5;
    public static final int ENCHANT_AFFIX_FIELD_NUMBER = 5;
    private boolean hasEnchantAffix;
    private int enchantAffix_ = 0;
    public boolean hasEnchantAffix() { return hasEnchantAffix; }
    public int getEnchantAffix() { return enchantAffix_; }
    
    // required sfixed32 socket_affix = 6;
    public static final int SOCKET_AFFIX_FIELD_NUMBER = 6;
    private boolean hasSocketAffix;
    private int socketAffix_ = 0;
    public boolean hasSocketAffix() { return hasSocketAffix; }
    public int getSocketAffix() { return socketAffix_; }
    
    // required uint32 flags = 7;
    public static final int FLAGS_FIELD_NUMBER = 7;
    private boolean hasFlags;
    private int flags_ = 0;
    public boolean hasFlags() { return hasFlags; }
    public int getFlags() { return flags_; }
    
    // required uint32 durability = 8;
    public static final int DURABILITY_FIELD_NUMBER = 8;
    private boolean hasDurability;
    private int durability_ = 0;
    public boolean hasDurability() { return hasDurability; }
    public int getDurability() { return durability_; }
    
    // required uint64 stack_size = 9;
    public static final int STACK_SIZE_FIELD_NUMBER = 9;
    private boolean hasStackSize;
    private long stackSize_ = 0L;
    public boolean hasStackSize() { return hasStackSize; }
    public long getStackSize() { return stackSize_; }
    
    // required uint32 dye_type = 10;
    public static final int DYE_TYPE_FIELD_NUMBER = 10;
    private boolean hasDyeType;
    private int dyeType_ = 0;
    public boolean hasDyeType() { return hasDyeType; }
    public int getDyeType() { return dyeType_; }
    
    // required sint32 item_quality_level = 11;
    public static final int ITEM_QUALITY_LEVEL_FIELD_NUMBER = 11;
    private boolean hasItemQualityLevel;
    private int itemQualityLevel_ = 0;
    public boolean hasItemQualityLevel() { return hasItemQualityLevel; }
    public int getItemQualityLevel() { return itemQualityLevel_; }
    
    // required sint32 item_binding_level = 12;
    public static final int ITEM_BINDING_LEVEL_FIELD_NUMBER = 12;
    private boolean hasItemBindingLevel;
    private int itemBindingLevel_ = 0;
    public boolean hasItemBindingLevel() { return hasItemBindingLevel; }
    public int getItemBindingLevel() { return itemBindingLevel_; }
    
    // required uint32 max_durability = 13;
    public static final int MAX_DURABILITY_FIELD_NUMBER = 13;
    private boolean hasMaxDurability;
    private int maxDurability_ = 0;
    public boolean hasMaxDurability() { return hasMaxDurability; }
    public int getMaxDurability() { return maxDurability_; }
    
    // repeated .D3.Items.EmbeddedGenerator contents = 14;
    public static final int CONTENTS_FIELD_NUMBER = 14;
    private java.util.List<D3.Items.Items.EmbeddedGenerator> contents_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Items.Items.EmbeddedGenerator> getContentsList() {
      return contents_;
    }
    public int getContentsCount() { return contents_.size(); }
    public D3.Items.Items.EmbeddedGenerator getContents(int index) {
      return contents_.get(index);
    }
    
    // optional sfixed32 attuned_skill = 15;
    public static final int ATTUNED_SKILL_FIELD_NUMBER = 15;
    private boolean hasAttunedSkill;
    private int attunedSkill_ = 0;
    public boolean hasAttunedSkill() { return hasAttunedSkill; }
    public int getAttunedSkill() { return attunedSkill_; }
    
    private void initFields() {
      gbHandle_ = D3.GameBalance.GBHandle.Handle.getDefaultInstance();
      rareItemName_ = D3.Items.Items.RareItemName.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasSeed) return false;
      if (!hasGbHandle) return false;
      if (!hasRareItemName) return false;
      if (!hasEnchantAffix) return false;
      if (!hasSocketAffix) return false;
      if (!hasFlags) return false;
      if (!hasDurability) return false;
      if (!hasStackSize) return false;
      if (!hasDyeType) return false;
      if (!hasItemQualityLevel) return false;
      if (!hasItemBindingLevel) return false;
      if (!hasMaxDurability) return false;
      if (!getGbHandle().isInitialized()) return false;
      if (!getRareItemName().isInitialized()) return false;
      for (D3.Items.Items.EmbeddedGenerator element : getContentsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSeed()) {
        output.writeUInt32(1, getSeed());
      }
      if (hasGbHandle()) {
        output.writeMessage(2, getGbHandle());
      }
      for (int element : getBaseAffixesList()) {
        output.writeSFixed32(3, element);
      }
      if (hasRareItemName()) {
        output.writeMessage(4, getRareItemName());
      }
      if (hasEnchantAffix()) {
        output.writeSFixed32(5, getEnchantAffix());
      }
      if (hasSocketAffix()) {
        output.writeSFixed32(6, getSocketAffix());
      }
      if (hasFlags()) {
        output.writeUInt32(7, getFlags());
      }
      if (hasDurability()) {
        output.writeUInt32(8, getDurability());
      }
      if (hasStackSize()) {
        output.writeUInt64(9, getStackSize());
      }
      if (hasDyeType()) {
        output.writeUInt32(10, getDyeType());
      }
      if (hasItemQualityLevel()) {
        output.writeSInt32(11, getItemQualityLevel());
      }
      if (hasItemBindingLevel()) {
        output.writeSInt32(12, getItemBindingLevel());
      }
      if (hasMaxDurability()) {
        output.writeUInt32(13, getMaxDurability());
      }
      for (D3.Items.Items.EmbeddedGenerator element : getContentsList()) {
        output.writeMessage(14, element);
      }
      if (hasAttunedSkill()) {
        output.writeSFixed32(15, getAttunedSkill());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSeed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getSeed());
      }
      if (hasGbHandle()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGbHandle());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBaseAffixesList().size();
        size += dataSize;
        size += 1 * getBaseAffixesList().size();
      }
      if (hasRareItemName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getRareItemName());
      }
      if (hasEnchantAffix()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(5, getEnchantAffix());
      }
      if (hasSocketAffix()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(6, getSocketAffix());
      }
      if (hasFlags()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, getFlags());
      }
      if (hasDurability()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, getDurability());
      }
      if (hasStackSize()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, getStackSize());
      }
      if (hasDyeType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, getDyeType());
      }
      if (hasItemQualityLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(11, getItemQualityLevel());
      }
      if (hasItemBindingLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(12, getItemBindingLevel());
      }
      if (hasMaxDurability()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, getMaxDurability());
      }
      for (D3.Items.Items.EmbeddedGenerator element : getContentsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, element);
      }
      if (hasAttunedSkill()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(15, getAttunedSkill());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.Generator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.Generator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.Generator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.Generator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.Generator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.Generator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.Generator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.Generator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.Generator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.Generator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.Generator prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.Generator result;
      
      // Construct using D3.Items.Items.Generator.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.Generator();
        return builder;
      }
      
      protected D3.Items.Items.Generator internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.Generator();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.Generator.getDescriptor();
      }
      
      public D3.Items.Items.Generator getDefaultInstanceForType() {
        return D3.Items.Items.Generator.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.Generator build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.Generator buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.Generator buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.baseAffixes_ != java.util.Collections.EMPTY_LIST) {
          result.baseAffixes_ =
            java.util.Collections.unmodifiableList(result.baseAffixes_);
        }
        if (result.contents_ != java.util.Collections.EMPTY_LIST) {
          result.contents_ =
            java.util.Collections.unmodifiableList(result.contents_);
        }
        D3.Items.Items.Generator returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.Generator) {
          return mergeFrom((D3.Items.Items.Generator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.Generator other) {
        if (other == D3.Items.Items.Generator.getDefaultInstance()) return this;
        if (other.hasSeed()) {
          setSeed(other.getSeed());
        }
        if (other.hasGbHandle()) {
          mergeGbHandle(other.getGbHandle());
        }
        if (!other.baseAffixes_.isEmpty()) {
          if (result.baseAffixes_.isEmpty()) {
            result.baseAffixes_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.baseAffixes_.addAll(other.baseAffixes_);
        }
        if (other.hasRareItemName()) {
          mergeRareItemName(other.getRareItemName());
        }
        if (other.hasEnchantAffix()) {
          setEnchantAffix(other.getEnchantAffix());
        }
        if (other.hasSocketAffix()) {
          setSocketAffix(other.getSocketAffix());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasDurability()) {
          setDurability(other.getDurability());
        }
        if (other.hasStackSize()) {
          setStackSize(other.getStackSize());
        }
        if (other.hasDyeType()) {
          setDyeType(other.getDyeType());
        }
        if (other.hasItemQualityLevel()) {
          setItemQualityLevel(other.getItemQualityLevel());
        }
        if (other.hasItemBindingLevel()) {
          setItemBindingLevel(other.getItemBindingLevel());
        }
        if (other.hasMaxDurability()) {
          setMaxDurability(other.getMaxDurability());
        }
        if (!other.contents_.isEmpty()) {
          if (result.contents_.isEmpty()) {
            result.contents_ = new java.util.ArrayList<D3.Items.Items.EmbeddedGenerator>();
          }
          result.contents_.addAll(other.contents_);
        }
        if (other.hasAttunedSkill()) {
          setAttunedSkill(other.getAttunedSkill());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setSeed(input.readUInt32());
              break;
            }
            case 18: {
              D3.GameBalance.GBHandle.Handle.Builder subBuilder = D3.GameBalance.GBHandle.Handle.newBuilder();
              if (hasGbHandle()) {
                subBuilder.mergeFrom(getGbHandle());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGbHandle(subBuilder.buildPartial());
              break;
            }
            case 29: {
              addBaseAffixes(input.readSFixed32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addBaseAffixes(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              D3.Items.Items.RareItemName.Builder subBuilder = D3.Items.Items.RareItemName.newBuilder();
              if (hasRareItemName()) {
                subBuilder.mergeFrom(getRareItemName());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRareItemName(subBuilder.buildPartial());
              break;
            }
            case 45: {
              setEnchantAffix(input.readSFixed32());
              break;
            }
            case 53: {
              setSocketAffix(input.readSFixed32());
              break;
            }
            case 56: {
              setFlags(input.readUInt32());
              break;
            }
            case 64: {
              setDurability(input.readUInt32());
              break;
            }
            case 72: {
              setStackSize(input.readUInt64());
              break;
            }
            case 80: {
              setDyeType(input.readUInt32());
              break;
            }
            case 88: {
              setItemQualityLevel(input.readSInt32());
              break;
            }
            case 96: {
              setItemBindingLevel(input.readSInt32());
              break;
            }
            case 104: {
              setMaxDurability(input.readUInt32());
              break;
            }
            case 114: {
              D3.Items.Items.EmbeddedGenerator.Builder subBuilder = D3.Items.Items.EmbeddedGenerator.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addContents(subBuilder.buildPartial());
              break;
            }
            case 125: {
              setAttunedSkill(input.readSFixed32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 seed = 1;
      public boolean hasSeed() {
        return result.hasSeed();
      }
      public int getSeed() {
        return result.getSeed();
      }
      public Builder setSeed(int value) {
        result.hasSeed = true;
        result.seed_ = value;
        return this;
      }
      public Builder clearSeed() {
        result.hasSeed = false;
        result.seed_ = 0;
        return this;
      }
      
      // required .D3.GameBalance.Handle gb_handle = 2;
      public boolean hasGbHandle() {
        return result.hasGbHandle();
      }
      public D3.GameBalance.GBHandle.Handle getGbHandle() {
        return result.getGbHandle();
      }
      public Builder setGbHandle(D3.GameBalance.GBHandle.Handle value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGbHandle = true;
        result.gbHandle_ = value;
        return this;
      }
      public Builder setGbHandle(D3.GameBalance.GBHandle.Handle.Builder builderForValue) {
        result.hasGbHandle = true;
        result.gbHandle_ = builderForValue.build();
        return this;
      }
      public Builder mergeGbHandle(D3.GameBalance.GBHandle.Handle value) {
        if (result.hasGbHandle() &&
            result.gbHandle_ != D3.GameBalance.GBHandle.Handle.getDefaultInstance()) {
          result.gbHandle_ =
            D3.GameBalance.GBHandle.Handle.newBuilder(result.gbHandle_).mergeFrom(value).buildPartial();
        } else {
          result.gbHandle_ = value;
        }
        result.hasGbHandle = true;
        return this;
      }
      public Builder clearGbHandle() {
        result.hasGbHandle = false;
        result.gbHandle_ = D3.GameBalance.GBHandle.Handle.getDefaultInstance();
        return this;
      }
      
      // repeated sfixed32 base_affixes = 3;
      public java.util.List<java.lang.Integer> getBaseAffixesList() {
        return java.util.Collections.unmodifiableList(result.baseAffixes_);
      }
      public int getBaseAffixesCount() {
        return result.getBaseAffixesCount();
      }
      public int getBaseAffixes(int index) {
        return result.getBaseAffixes(index);
      }
      public Builder setBaseAffixes(int index, int value) {
        result.baseAffixes_.set(index, value);
        return this;
      }
      public Builder addBaseAffixes(int value) {
        if (result.baseAffixes_.isEmpty()) {
          result.baseAffixes_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.baseAffixes_.add(value);
        return this;
      }
      public Builder addAllBaseAffixes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.baseAffixes_.isEmpty()) {
          result.baseAffixes_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.baseAffixes_);
        return this;
      }
      public Builder clearBaseAffixes() {
        result.baseAffixes_ = java.util.Collections.emptyList();
        return this;
      }
      
      // required .D3.Items.RareItemName rare_item_name = 4;
      public boolean hasRareItemName() {
        return result.hasRareItemName();
      }
      public D3.Items.Items.RareItemName getRareItemName() {
        return result.getRareItemName();
      }
      public Builder setRareItemName(D3.Items.Items.RareItemName value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRareItemName = true;
        result.rareItemName_ = value;
        return this;
      }
      public Builder setRareItemName(D3.Items.Items.RareItemName.Builder builderForValue) {
        result.hasRareItemName = true;
        result.rareItemName_ = builderForValue.build();
        return this;
      }
      public Builder mergeRareItemName(D3.Items.Items.RareItemName value) {
        if (result.hasRareItemName() &&
            result.rareItemName_ != D3.Items.Items.RareItemName.getDefaultInstance()) {
          result.rareItemName_ =
            D3.Items.Items.RareItemName.newBuilder(result.rareItemName_).mergeFrom(value).buildPartial();
        } else {
          result.rareItemName_ = value;
        }
        result.hasRareItemName = true;
        return this;
      }
      public Builder clearRareItemName() {
        result.hasRareItemName = false;
        result.rareItemName_ = D3.Items.Items.RareItemName.getDefaultInstance();
        return this;
      }
      
      // required sfixed32 enchant_affix = 5;
      public boolean hasEnchantAffix() {
        return result.hasEnchantAffix();
      }
      public int getEnchantAffix() {
        return result.getEnchantAffix();
      }
      public Builder setEnchantAffix(int value) {
        result.hasEnchantAffix = true;
        result.enchantAffix_ = value;
        return this;
      }
      public Builder clearEnchantAffix() {
        result.hasEnchantAffix = false;
        result.enchantAffix_ = 0;
        return this;
      }
      
      // required sfixed32 socket_affix = 6;
      public boolean hasSocketAffix() {
        return result.hasSocketAffix();
      }
      public int getSocketAffix() {
        return result.getSocketAffix();
      }
      public Builder setSocketAffix(int value) {
        result.hasSocketAffix = true;
        result.socketAffix_ = value;
        return this;
      }
      public Builder clearSocketAffix() {
        result.hasSocketAffix = false;
        result.socketAffix_ = 0;
        return this;
      }
      
      // required uint32 flags = 7;
      public boolean hasFlags() {
        return result.hasFlags();
      }
      public int getFlags() {
        return result.getFlags();
      }
      public Builder setFlags(int value) {
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder clearFlags() {
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      // required uint32 durability = 8;
      public boolean hasDurability() {
        return result.hasDurability();
      }
      public int getDurability() {
        return result.getDurability();
      }
      public Builder setDurability(int value) {
        result.hasDurability = true;
        result.durability_ = value;
        return this;
      }
      public Builder clearDurability() {
        result.hasDurability = false;
        result.durability_ = 0;
        return this;
      }
      
      // required uint64 stack_size = 9;
      public boolean hasStackSize() {
        return result.hasStackSize();
      }
      public long getStackSize() {
        return result.getStackSize();
      }
      public Builder setStackSize(long value) {
        result.hasStackSize = true;
        result.stackSize_ = value;
        return this;
      }
      public Builder clearStackSize() {
        result.hasStackSize = false;
        result.stackSize_ = 0L;
        return this;
      }
      
      // required uint32 dye_type = 10;
      public boolean hasDyeType() {
        return result.hasDyeType();
      }
      public int getDyeType() {
        return result.getDyeType();
      }
      public Builder setDyeType(int value) {
        result.hasDyeType = true;
        result.dyeType_ = value;
        return this;
      }
      public Builder clearDyeType() {
        result.hasDyeType = false;
        result.dyeType_ = 0;
        return this;
      }
      
      // required sint32 item_quality_level = 11;
      public boolean hasItemQualityLevel() {
        return result.hasItemQualityLevel();
      }
      public int getItemQualityLevel() {
        return result.getItemQualityLevel();
      }
      public Builder setItemQualityLevel(int value) {
        result.hasItemQualityLevel = true;
        result.itemQualityLevel_ = value;
        return this;
      }
      public Builder clearItemQualityLevel() {
        result.hasItemQualityLevel = false;
        result.itemQualityLevel_ = 0;
        return this;
      }
      
      // required sint32 item_binding_level = 12;
      public boolean hasItemBindingLevel() {
        return result.hasItemBindingLevel();
      }
      public int getItemBindingLevel() {
        return result.getItemBindingLevel();
      }
      public Builder setItemBindingLevel(int value) {
        result.hasItemBindingLevel = true;
        result.itemBindingLevel_ = value;
        return this;
      }
      public Builder clearItemBindingLevel() {
        result.hasItemBindingLevel = false;
        result.itemBindingLevel_ = 0;
        return this;
      }
      
      // required uint32 max_durability = 13;
      public boolean hasMaxDurability() {
        return result.hasMaxDurability();
      }
      public int getMaxDurability() {
        return result.getMaxDurability();
      }
      public Builder setMaxDurability(int value) {
        result.hasMaxDurability = true;
        result.maxDurability_ = value;
        return this;
      }
      public Builder clearMaxDurability() {
        result.hasMaxDurability = false;
        result.maxDurability_ = 0;
        return this;
      }
      
      // repeated .D3.Items.EmbeddedGenerator contents = 14;
      public java.util.List<D3.Items.Items.EmbeddedGenerator> getContentsList() {
        return java.util.Collections.unmodifiableList(result.contents_);
      }
      public int getContentsCount() {
        return result.getContentsCount();
      }
      public D3.Items.Items.EmbeddedGenerator getContents(int index) {
        return result.getContents(index);
      }
      public Builder setContents(int index, D3.Items.Items.EmbeddedGenerator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.contents_.set(index, value);
        return this;
      }
      public Builder setContents(int index, D3.Items.Items.EmbeddedGenerator.Builder builderForValue) {
        result.contents_.set(index, builderForValue.build());
        return this;
      }
      public Builder addContents(D3.Items.Items.EmbeddedGenerator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.contents_.isEmpty()) {
          result.contents_ = new java.util.ArrayList<D3.Items.Items.EmbeddedGenerator>();
        }
        result.contents_.add(value);
        return this;
      }
      public Builder addContents(D3.Items.Items.EmbeddedGenerator.Builder builderForValue) {
        if (result.contents_.isEmpty()) {
          result.contents_ = new java.util.ArrayList<D3.Items.Items.EmbeddedGenerator>();
        }
        result.contents_.add(builderForValue.build());
        return this;
      }
      public Builder addAllContents(
          java.lang.Iterable<? extends D3.Items.Items.EmbeddedGenerator> values) {
        if (result.contents_.isEmpty()) {
          result.contents_ = new java.util.ArrayList<D3.Items.Items.EmbeddedGenerator>();
        }
        super.addAll(values, result.contents_);
        return this;
      }
      public Builder clearContents() {
        result.contents_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional sfixed32 attuned_skill = 15;
      public boolean hasAttunedSkill() {
        return result.hasAttunedSkill();
      }
      public int getAttunedSkill() {
        return result.getAttunedSkill();
      }
      public Builder setAttunedSkill(int value) {
        result.hasAttunedSkill = true;
        result.attunedSkill_ = value;
        return this;
      }
      public Builder clearAttunedSkill() {
        result.hasAttunedSkill = false;
        result.attunedSkill_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.Generator)
    }
    
    static {
      defaultInstance = new Generator(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.Generator)
  }
  
  public static final class EmbeddedGenerator extends
      com.google.protobuf.GeneratedMessage {
    // Use EmbeddedGenerator.newBuilder() to construct.
    private EmbeddedGenerator() {
      initFields();
    }
    private EmbeddedGenerator(boolean noInit) {}
    
    private static final EmbeddedGenerator defaultInstance;
    public static EmbeddedGenerator getDefaultInstance() {
      return defaultInstance;
    }
    
    public EmbeddedGenerator getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_EmbeddedGenerator_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_EmbeddedGenerator_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.ItemId id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private D3.OnlineService.OnlineService.ItemId id_;
    public boolean hasId() { return hasId; }
    public D3.OnlineService.OnlineService.ItemId getId() { return id_; }
    
    // required .D3.Items.Generator generator = 2;
    public static final int GENERATOR_FIELD_NUMBER = 2;
    private boolean hasGenerator;
    private D3.Items.Items.Generator generator_;
    public boolean hasGenerator() { return hasGenerator; }
    public D3.Items.Items.Generator getGenerator() { return generator_; }
    
    private void initFields() {
      id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
      generator_ = D3.Items.Items.Generator.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasId) return false;
      if (!hasGenerator) return false;
      if (!getId().isInitialized()) return false;
      if (!getGenerator().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasId()) {
        output.writeMessage(1, getId());
      }
      if (hasGenerator()) {
        output.writeMessage(2, getGenerator());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (hasGenerator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGenerator());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.EmbeddedGenerator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.EmbeddedGenerator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.EmbeddedGenerator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.EmbeddedGenerator prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.EmbeddedGenerator result;
      
      // Construct using D3.Items.Items.EmbeddedGenerator.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.EmbeddedGenerator();
        return builder;
      }
      
      protected D3.Items.Items.EmbeddedGenerator internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.EmbeddedGenerator();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.EmbeddedGenerator.getDescriptor();
      }
      
      public D3.Items.Items.EmbeddedGenerator getDefaultInstanceForType() {
        return D3.Items.Items.EmbeddedGenerator.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.EmbeddedGenerator build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.EmbeddedGenerator buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.EmbeddedGenerator buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.EmbeddedGenerator returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.EmbeddedGenerator) {
          return mergeFrom((D3.Items.Items.EmbeddedGenerator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.EmbeddedGenerator other) {
        if (other == D3.Items.Items.EmbeddedGenerator.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasGenerator()) {
          mergeGenerator(other.getGenerator());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.ItemId.Builder subBuilder = D3.OnlineService.OnlineService.ItemId.newBuilder();
              if (hasId()) {
                subBuilder.mergeFrom(getId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Items.Items.Generator.Builder subBuilder = D3.Items.Items.Generator.newBuilder();
              if (hasGenerator()) {
                subBuilder.mergeFrom(getGenerator());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGenerator(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.ItemId id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public D3.OnlineService.OnlineService.ItemId getId() {
        return result.getId();
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId.Builder builderForValue) {
        result.hasId = true;
        result.id_ = builderForValue.build();
        return this;
      }
      public Builder mergeId(D3.OnlineService.OnlineService.ItemId value) {
        if (result.hasId() &&
            result.id_ != D3.OnlineService.OnlineService.ItemId.getDefaultInstance()) {
          result.id_ =
            D3.OnlineService.OnlineService.ItemId.newBuilder(result.id_).mergeFrom(value).buildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
        return this;
      }
      
      // required .D3.Items.Generator generator = 2;
      public boolean hasGenerator() {
        return result.hasGenerator();
      }
      public D3.Items.Items.Generator getGenerator() {
        return result.getGenerator();
      }
      public Builder setGenerator(D3.Items.Items.Generator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder setGenerator(D3.Items.Items.Generator.Builder builderForValue) {
        result.hasGenerator = true;
        result.generator_ = builderForValue.build();
        return this;
      }
      public Builder mergeGenerator(D3.Items.Items.Generator value) {
        if (result.hasGenerator() &&
            result.generator_ != D3.Items.Items.Generator.getDefaultInstance()) {
          result.generator_ =
            D3.Items.Items.Generator.newBuilder(result.generator_).mergeFrom(value).buildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder clearGenerator() {
        result.hasGenerator = false;
        result.generator_ = D3.Items.Items.Generator.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.EmbeddedGenerator)
    }
    
    static {
      defaultInstance = new EmbeddedGenerator(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.EmbeddedGenerator)
  }
  
  public static final class SavedItem extends
      com.google.protobuf.GeneratedMessage {
    // Use SavedItem.newBuilder() to construct.
    private SavedItem() {
      initFields();
    }
    private SavedItem(boolean noInit) {}
    
    private static final SavedItem defaultInstance;
    public static SavedItem getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavedItem getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_SavedItem_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_SavedItem_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.ItemId id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private D3.OnlineService.OnlineService.ItemId id_;
    public boolean hasId() { return hasId; }
    public D3.OnlineService.OnlineService.ItemId getId() { return id_; }
    
    // optional .D3.OnlineService.EntityId owner_entity_id = 2;
    public static final int OWNER_ENTITY_ID_FIELD_NUMBER = 2;
    private boolean hasOwnerEntityId;
    private D3.OnlineService.OnlineService.EntityId ownerEntityId_;
    public boolean hasOwnerEntityId() { return hasOwnerEntityId; }
    public D3.OnlineService.OnlineService.EntityId getOwnerEntityId() { return ownerEntityId_; }
    
    // optional .D3.OnlineService.ItemId socket_id = 3;
    public static final int SOCKET_ID_FIELD_NUMBER = 3;
    private boolean hasSocketId;
    private D3.OnlineService.OnlineService.ItemId socketId_;
    public boolean hasSocketId() { return hasSocketId; }
    public D3.OnlineService.OnlineService.ItemId getSocketId() { return socketId_; }
    
    // required sint32 hireling_class = 4;
    public static final int HIRELING_CLASS_FIELD_NUMBER = 4;
    private boolean hasHirelingClass;
    private int hirelingClass_ = 0;
    public boolean hasHirelingClass() { return hasHirelingClass; }
    public int getHirelingClass() { return hirelingClass_; }
    
    // required sint32 item_slot = 5;
    public static final int ITEM_SLOT_FIELD_NUMBER = 5;
    private boolean hasItemSlot;
    private int itemSlot_ = 0;
    public boolean hasItemSlot() { return hasItemSlot; }
    public int getItemSlot() { return itemSlot_; }
    
    // required sint32 square_index = 6;
    public static final int SQUARE_INDEX_FIELD_NUMBER = 6;
    private boolean hasSquareIndex;
    private int squareIndex_ = 0;
    public boolean hasSquareIndex() { return hasSquareIndex; }
    public int getSquareIndex() { return squareIndex_; }
    
    // required uint32 used_socket_count = 7;
    public static final int USED_SOCKET_COUNT_FIELD_NUMBER = 7;
    private boolean hasUsedSocketCount;
    private int usedSocketCount_ = 0;
    public boolean hasUsedSocketCount() { return hasUsedSocketCount; }
    public int getUsedSocketCount() { return usedSocketCount_; }
    
    // optional .D3.Items.Generator generator = 8;
    public static final int GENERATOR_FIELD_NUMBER = 8;
    private boolean hasGenerator;
    private D3.Items.Items.Generator generator_;
    public boolean hasGenerator() { return hasGenerator; }
    public D3.Items.Items.Generator getGenerator() { return generator_; }
    
    private void initFields() {
      id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
      ownerEntityId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      socketId_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
      generator_ = D3.Items.Items.Generator.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasId) return false;
      if (!hasHirelingClass) return false;
      if (!hasItemSlot) return false;
      if (!hasSquareIndex) return false;
      if (!hasUsedSocketCount) return false;
      if (!getId().isInitialized()) return false;
      if (hasOwnerEntityId()) {
        if (!getOwnerEntityId().isInitialized()) return false;
      }
      if (hasSocketId()) {
        if (!getSocketId().isInitialized()) return false;
      }
      if (hasGenerator()) {
        if (!getGenerator().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasId()) {
        output.writeMessage(1, getId());
      }
      if (hasOwnerEntityId()) {
        output.writeMessage(2, getOwnerEntityId());
      }
      if (hasSocketId()) {
        output.writeMessage(3, getSocketId());
      }
      if (hasHirelingClass()) {
        output.writeSInt32(4, getHirelingClass());
      }
      if (hasItemSlot()) {
        output.writeSInt32(5, getItemSlot());
      }
      if (hasSquareIndex()) {
        output.writeSInt32(6, getSquareIndex());
      }
      if (hasUsedSocketCount()) {
        output.writeUInt32(7, getUsedSocketCount());
      }
      if (hasGenerator()) {
        output.writeMessage(8, getGenerator());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (hasOwnerEntityId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOwnerEntityId());
      }
      if (hasSocketId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSocketId());
      }
      if (hasHirelingClass()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, getHirelingClass());
      }
      if (hasItemSlot()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, getItemSlot());
      }
      if (hasSquareIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, getSquareIndex());
      }
      if (hasUsedSocketCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, getUsedSocketCount());
      }
      if (hasGenerator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getGenerator());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.SavedItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.SavedItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.SavedItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.SavedItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.SavedItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.SavedItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.SavedItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.SavedItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.SavedItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.SavedItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.SavedItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.SavedItem result;
      
      // Construct using D3.Items.Items.SavedItem.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.SavedItem();
        return builder;
      }
      
      protected D3.Items.Items.SavedItem internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.SavedItem();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.SavedItem.getDescriptor();
      }
      
      public D3.Items.Items.SavedItem getDefaultInstanceForType() {
        return D3.Items.Items.SavedItem.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.SavedItem build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.SavedItem buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.SavedItem buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.SavedItem returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.SavedItem) {
          return mergeFrom((D3.Items.Items.SavedItem)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.SavedItem other) {
        if (other == D3.Items.Items.SavedItem.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasOwnerEntityId()) {
          mergeOwnerEntityId(other.getOwnerEntityId());
        }
        if (other.hasSocketId()) {
          mergeSocketId(other.getSocketId());
        }
        if (other.hasHirelingClass()) {
          setHirelingClass(other.getHirelingClass());
        }
        if (other.hasItemSlot()) {
          setItemSlot(other.getItemSlot());
        }
        if (other.hasSquareIndex()) {
          setSquareIndex(other.getSquareIndex());
        }
        if (other.hasUsedSocketCount()) {
          setUsedSocketCount(other.getUsedSocketCount());
        }
        if (other.hasGenerator()) {
          mergeGenerator(other.getGenerator());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.ItemId.Builder subBuilder = D3.OnlineService.OnlineService.ItemId.newBuilder();
              if (hasId()) {
                subBuilder.mergeFrom(getId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasOwnerEntityId()) {
                subBuilder.mergeFrom(getOwnerEntityId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOwnerEntityId(subBuilder.buildPartial());
              break;
            }
            case 26: {
              D3.OnlineService.OnlineService.ItemId.Builder subBuilder = D3.OnlineService.OnlineService.ItemId.newBuilder();
              if (hasSocketId()) {
                subBuilder.mergeFrom(getSocketId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSocketId(subBuilder.buildPartial());
              break;
            }
            case 32: {
              setHirelingClass(input.readSInt32());
              break;
            }
            case 40: {
              setItemSlot(input.readSInt32());
              break;
            }
            case 48: {
              setSquareIndex(input.readSInt32());
              break;
            }
            case 56: {
              setUsedSocketCount(input.readUInt32());
              break;
            }
            case 66: {
              D3.Items.Items.Generator.Builder subBuilder = D3.Items.Items.Generator.newBuilder();
              if (hasGenerator()) {
                subBuilder.mergeFrom(getGenerator());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGenerator(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.ItemId id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public D3.OnlineService.OnlineService.ItemId getId() {
        return result.getId();
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId.Builder builderForValue) {
        result.hasId = true;
        result.id_ = builderForValue.build();
        return this;
      }
      public Builder mergeId(D3.OnlineService.OnlineService.ItemId value) {
        if (result.hasId() &&
            result.id_ != D3.OnlineService.OnlineService.ItemId.getDefaultInstance()) {
          result.id_ =
            D3.OnlineService.OnlineService.ItemId.newBuilder(result.id_).mergeFrom(value).buildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
        return this;
      }
      
      // optional .D3.OnlineService.EntityId owner_entity_id = 2;
      public boolean hasOwnerEntityId() {
        return result.hasOwnerEntityId();
      }
      public D3.OnlineService.OnlineService.EntityId getOwnerEntityId() {
        return result.getOwnerEntityId();
      }
      public Builder setOwnerEntityId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder setOwnerEntityId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = builderForValue.build();
        return this;
      }
      public Builder mergeOwnerEntityId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasOwnerEntityId() &&
            result.ownerEntityId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.ownerEntityId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.ownerEntityId_).mergeFrom(value).buildPartial();
        } else {
          result.ownerEntityId_ = value;
        }
        result.hasOwnerEntityId = true;
        return this;
      }
      public Builder clearOwnerEntityId() {
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // optional .D3.OnlineService.ItemId socket_id = 3;
      public boolean hasSocketId() {
        return result.hasSocketId();
      }
      public D3.OnlineService.OnlineService.ItemId getSocketId() {
        return result.getSocketId();
      }
      public Builder setSocketId(D3.OnlineService.OnlineService.ItemId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSocketId = true;
        result.socketId_ = value;
        return this;
      }
      public Builder setSocketId(D3.OnlineService.OnlineService.ItemId.Builder builderForValue) {
        result.hasSocketId = true;
        result.socketId_ = builderForValue.build();
        return this;
      }
      public Builder mergeSocketId(D3.OnlineService.OnlineService.ItemId value) {
        if (result.hasSocketId() &&
            result.socketId_ != D3.OnlineService.OnlineService.ItemId.getDefaultInstance()) {
          result.socketId_ =
            D3.OnlineService.OnlineService.ItemId.newBuilder(result.socketId_).mergeFrom(value).buildPartial();
        } else {
          result.socketId_ = value;
        }
        result.hasSocketId = true;
        return this;
      }
      public Builder clearSocketId() {
        result.hasSocketId = false;
        result.socketId_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
        return this;
      }
      
      // required sint32 hireling_class = 4;
      public boolean hasHirelingClass() {
        return result.hasHirelingClass();
      }
      public int getHirelingClass() {
        return result.getHirelingClass();
      }
      public Builder setHirelingClass(int value) {
        result.hasHirelingClass = true;
        result.hirelingClass_ = value;
        return this;
      }
      public Builder clearHirelingClass() {
        result.hasHirelingClass = false;
        result.hirelingClass_ = 0;
        return this;
      }
      
      // required sint32 item_slot = 5;
      public boolean hasItemSlot() {
        return result.hasItemSlot();
      }
      public int getItemSlot() {
        return result.getItemSlot();
      }
      public Builder setItemSlot(int value) {
        result.hasItemSlot = true;
        result.itemSlot_ = value;
        return this;
      }
      public Builder clearItemSlot() {
        result.hasItemSlot = false;
        result.itemSlot_ = 0;
        return this;
      }
      
      // required sint32 square_index = 6;
      public boolean hasSquareIndex() {
        return result.hasSquareIndex();
      }
      public int getSquareIndex() {
        return result.getSquareIndex();
      }
      public Builder setSquareIndex(int value) {
        result.hasSquareIndex = true;
        result.squareIndex_ = value;
        return this;
      }
      public Builder clearSquareIndex() {
        result.hasSquareIndex = false;
        result.squareIndex_ = 0;
        return this;
      }
      
      // required uint32 used_socket_count = 7;
      public boolean hasUsedSocketCount() {
        return result.hasUsedSocketCount();
      }
      public int getUsedSocketCount() {
        return result.getUsedSocketCount();
      }
      public Builder setUsedSocketCount(int value) {
        result.hasUsedSocketCount = true;
        result.usedSocketCount_ = value;
        return this;
      }
      public Builder clearUsedSocketCount() {
        result.hasUsedSocketCount = false;
        result.usedSocketCount_ = 0;
        return this;
      }
      
      // optional .D3.Items.Generator generator = 8;
      public boolean hasGenerator() {
        return result.hasGenerator();
      }
      public D3.Items.Items.Generator getGenerator() {
        return result.getGenerator();
      }
      public Builder setGenerator(D3.Items.Items.Generator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder setGenerator(D3.Items.Items.Generator.Builder builderForValue) {
        result.hasGenerator = true;
        result.generator_ = builderForValue.build();
        return this;
      }
      public Builder mergeGenerator(D3.Items.Items.Generator value) {
        if (result.hasGenerator() &&
            result.generator_ != D3.Items.Items.Generator.getDefaultInstance()) {
          result.generator_ =
            D3.Items.Items.Generator.newBuilder(result.generator_).mergeFrom(value).buildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder clearGenerator() {
        result.hasGenerator = false;
        result.generator_ = D3.Items.Items.Generator.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.SavedItem)
    }
    
    static {
      defaultInstance = new SavedItem(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.SavedItem)
  }
  
  public static final class AuctionAccountInfo extends
      com.google.protobuf.GeneratedMessage {
    // Use AuctionAccountInfo.newBuilder() to construct.
    private AuctionAccountInfo() {
      initFields();
    }
    private AuctionAccountInfo(boolean noInit) {}
    
    private static final AuctionAccountInfo defaultInstance;
    public static AuctionAccountInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public AuctionAccountInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_AuctionAccountInfo_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_AuctionAccountInfo_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.EntityId account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private boolean hasAccountId;
    private D3.OnlineService.OnlineService.EntityId accountId_;
    public boolean hasAccountId() { return hasAccountId; }
    public D3.OnlineService.OnlineService.EntityId getAccountId() { return accountId_; }
    
    // required .D3.OnlineService.EntityId escrow_id = 2;
    public static final int ESCROW_ID_FIELD_NUMBER = 2;
    private boolean hasEscrowId;
    private D3.OnlineService.OnlineService.EntityId escrowId_;
    public boolean hasEscrowId() { return hasEscrowId; }
    public D3.OnlineService.OnlineService.EntityId getEscrowId() { return escrowId_; }
    
    private void initFields() {
      accountId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      escrowId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasAccountId) return false;
      if (!hasEscrowId) return false;
      if (!getAccountId().isInitialized()) return false;
      if (!getEscrowId().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAccountId()) {
        output.writeMessage(1, getAccountId());
      }
      if (hasEscrowId()) {
        output.writeMessage(2, getEscrowId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAccountId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAccountId());
      }
      if (hasEscrowId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getEscrowId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.AuctionAccountInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.AuctionAccountInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.AuctionAccountInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.AuctionAccountInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.AuctionAccountInfo result;
      
      // Construct using D3.Items.Items.AuctionAccountInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.AuctionAccountInfo();
        return builder;
      }
      
      protected D3.Items.Items.AuctionAccountInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.AuctionAccountInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.AuctionAccountInfo.getDescriptor();
      }
      
      public D3.Items.Items.AuctionAccountInfo getDefaultInstanceForType() {
        return D3.Items.Items.AuctionAccountInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.AuctionAccountInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.AuctionAccountInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.AuctionAccountInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.AuctionAccountInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.AuctionAccountInfo) {
          return mergeFrom((D3.Items.Items.AuctionAccountInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.AuctionAccountInfo other) {
        if (other == D3.Items.Items.AuctionAccountInfo.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          mergeAccountId(other.getAccountId());
        }
        if (other.hasEscrowId()) {
          mergeEscrowId(other.getEscrowId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasAccountId()) {
                subBuilder.mergeFrom(getAccountId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAccountId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasEscrowId()) {
                subBuilder.mergeFrom(getEscrowId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setEscrowId(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.EntityId account_id = 1;
      public boolean hasAccountId() {
        return result.hasAccountId();
      }
      public D3.OnlineService.OnlineService.EntityId getAccountId() {
        return result.getAccountId();
      }
      public Builder setAccountId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder setAccountId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasAccountId = true;
        result.accountId_ = builderForValue.build();
        return this;
      }
      public Builder mergeAccountId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasAccountId() &&
            result.accountId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.accountId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.accountId_).mergeFrom(value).buildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder clearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // required .D3.OnlineService.EntityId escrow_id = 2;
      public boolean hasEscrowId() {
        return result.hasEscrowId();
      }
      public D3.OnlineService.OnlineService.EntityId getEscrowId() {
        return result.getEscrowId();
      }
      public Builder setEscrowId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasEscrowId = true;
        result.escrowId_ = value;
        return this;
      }
      public Builder setEscrowId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasEscrowId = true;
        result.escrowId_ = builderForValue.build();
        return this;
      }
      public Builder mergeEscrowId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasEscrowId() &&
            result.escrowId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.escrowId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.escrowId_).mergeFrom(value).buildPartial();
        } else {
          result.escrowId_ = value;
        }
        result.hasEscrowId = true;
        return this;
      }
      public Builder clearEscrowId() {
        result.hasEscrowId = false;
        result.escrowId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.AuctionAccountInfo)
    }
    
    static {
      defaultInstance = new AuctionAccountInfo(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.AuctionAccountInfo)
  }
  
  public static final class AuctionItem extends
      com.google.protobuf.GeneratedMessage {
    // Use AuctionItem.newBuilder() to construct.
    private AuctionItem() {
      initFields();
    }
    private AuctionItem(boolean noInit) {}
    
    private static final AuctionItem defaultInstance;
    public static AuctionItem getDefaultInstance() {
      return defaultInstance;
    }
    
    public AuctionItem getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_AuctionItem_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_AuctionItem_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.ItemId id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private D3.OnlineService.OnlineService.ItemId id_;
    public boolean hasId() { return hasId; }
    public D3.OnlineService.OnlineService.ItemId getId() { return id_; }
    
    // required .D3.Items.Generator generator = 2;
    public static final int GENERATOR_FIELD_NUMBER = 2;
    private boolean hasGenerator;
    private D3.Items.Items.Generator generator_;
    public boolean hasGenerator() { return hasGenerator; }
    public D3.Items.Items.Generator getGenerator() { return generator_; }
    
    private void initFields() {
      id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
      generator_ = D3.Items.Items.Generator.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasId) return false;
      if (!hasGenerator) return false;
      if (!getId().isInitialized()) return false;
      if (!getGenerator().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasId()) {
        output.writeMessage(1, getId());
      }
      if (hasGenerator()) {
        output.writeMessage(2, getGenerator());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (hasGenerator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGenerator());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.AuctionItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.AuctionItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.AuctionItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.AuctionItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.AuctionItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.AuctionItem result;
      
      // Construct using D3.Items.Items.AuctionItem.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.AuctionItem();
        return builder;
      }
      
      protected D3.Items.Items.AuctionItem internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.AuctionItem();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.AuctionItem.getDescriptor();
      }
      
      public D3.Items.Items.AuctionItem getDefaultInstanceForType() {
        return D3.Items.Items.AuctionItem.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.AuctionItem build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.AuctionItem buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.AuctionItem buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.AuctionItem returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.AuctionItem) {
          return mergeFrom((D3.Items.Items.AuctionItem)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.AuctionItem other) {
        if (other == D3.Items.Items.AuctionItem.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasGenerator()) {
          mergeGenerator(other.getGenerator());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.ItemId.Builder subBuilder = D3.OnlineService.OnlineService.ItemId.newBuilder();
              if (hasId()) {
                subBuilder.mergeFrom(getId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Items.Items.Generator.Builder subBuilder = D3.Items.Items.Generator.newBuilder();
              if (hasGenerator()) {
                subBuilder.mergeFrom(getGenerator());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGenerator(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.ItemId id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public D3.OnlineService.OnlineService.ItemId getId() {
        return result.getId();
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId.Builder builderForValue) {
        result.hasId = true;
        result.id_ = builderForValue.build();
        return this;
      }
      public Builder mergeId(D3.OnlineService.OnlineService.ItemId value) {
        if (result.hasId() &&
            result.id_ != D3.OnlineService.OnlineService.ItemId.getDefaultInstance()) {
          result.id_ =
            D3.OnlineService.OnlineService.ItemId.newBuilder(result.id_).mergeFrom(value).buildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
        return this;
      }
      
      // required .D3.Items.Generator generator = 2;
      public boolean hasGenerator() {
        return result.hasGenerator();
      }
      public D3.Items.Items.Generator getGenerator() {
        return result.getGenerator();
      }
      public Builder setGenerator(D3.Items.Items.Generator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGenerator = true;
        result.generator_ = value;
        return this;
      }
      public Builder setGenerator(D3.Items.Items.Generator.Builder builderForValue) {
        result.hasGenerator = true;
        result.generator_ = builderForValue.build();
        return this;
      }
      public Builder mergeGenerator(D3.Items.Items.Generator value) {
        if (result.hasGenerator() &&
            result.generator_ != D3.Items.Items.Generator.getDefaultInstance()) {
          result.generator_ =
            D3.Items.Items.Generator.newBuilder(result.generator_).mergeFrom(value).buildPartial();
        } else {
          result.generator_ = value;
        }
        result.hasGenerator = true;
        return this;
      }
      public Builder clearGenerator() {
        result.hasGenerator = false;
        result.generator_ = D3.Items.Items.Generator.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.AuctionItem)
    }
    
    static {
      defaultInstance = new AuctionItem(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.AuctionItem)
  }
  
  public static final class AuctionInfo extends
      com.google.protobuf.GeneratedMessage {
    // Use AuctionInfo.newBuilder() to construct.
    private AuctionInfo() {
      initFields();
    }
    private AuctionInfo(boolean noInit) {}
    
    private static final AuctionInfo defaultInstance;
    public static AuctionInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public AuctionInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_AuctionInfo_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_AuctionInfo_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.ItemId id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private D3.OnlineService.OnlineService.ItemId id_;
    public boolean hasId() { return hasId; }
    public D3.OnlineService.OnlineService.ItemId getId() { return id_; }
    
    // optional .D3.Items.Ownership owner = 2;
    public static final int OWNER_FIELD_NUMBER = 2;
    private boolean hasOwner;
    private D3.Items.Items.Ownership owner_;
    public boolean hasOwner() { return hasOwner; }
    public D3.Items.Items.Ownership getOwner() { return owner_; }
    
    private void initFields() {
      id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
      owner_ = D3.Items.Items.Ownership.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasId) return false;
      if (!getId().isInitialized()) return false;
      if (hasOwner()) {
        if (!getOwner().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasId()) {
        output.writeMessage(1, getId());
      }
      if (hasOwner()) {
        output.writeMessage(2, getOwner());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (hasOwner()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOwner());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.AuctionInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.AuctionInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.AuctionInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.AuctionInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.AuctionInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.AuctionInfo result;
      
      // Construct using D3.Items.Items.AuctionInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.AuctionInfo();
        return builder;
      }
      
      protected D3.Items.Items.AuctionInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.AuctionInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.AuctionInfo.getDescriptor();
      }
      
      public D3.Items.Items.AuctionInfo getDefaultInstanceForType() {
        return D3.Items.Items.AuctionInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.AuctionInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.AuctionInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.AuctionInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.AuctionInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.AuctionInfo) {
          return mergeFrom((D3.Items.Items.AuctionInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.AuctionInfo other) {
        if (other == D3.Items.Items.AuctionInfo.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasOwner()) {
          mergeOwner(other.getOwner());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.ItemId.Builder subBuilder = D3.OnlineService.OnlineService.ItemId.newBuilder();
              if (hasId()) {
                subBuilder.mergeFrom(getId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Items.Items.Ownership.Builder subBuilder = D3.Items.Items.Ownership.newBuilder();
              if (hasOwner()) {
                subBuilder.mergeFrom(getOwner());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOwner(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.ItemId id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public D3.OnlineService.OnlineService.ItemId getId() {
        return result.getId();
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder setId(D3.OnlineService.OnlineService.ItemId.Builder builderForValue) {
        result.hasId = true;
        result.id_ = builderForValue.build();
        return this;
      }
      public Builder mergeId(D3.OnlineService.OnlineService.ItemId value) {
        if (result.hasId() &&
            result.id_ != D3.OnlineService.OnlineService.ItemId.getDefaultInstance()) {
          result.id_ =
            D3.OnlineService.OnlineService.ItemId.newBuilder(result.id_).mergeFrom(value).buildPartial();
        } else {
          result.id_ = value;
        }
        result.hasId = true;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = D3.OnlineService.OnlineService.ItemId.getDefaultInstance();
        return this;
      }
      
      // optional .D3.Items.Ownership owner = 2;
      public boolean hasOwner() {
        return result.hasOwner();
      }
      public D3.Items.Items.Ownership getOwner() {
        return result.getOwner();
      }
      public Builder setOwner(D3.Items.Items.Ownership value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOwner = true;
        result.owner_ = value;
        return this;
      }
      public Builder setOwner(D3.Items.Items.Ownership.Builder builderForValue) {
        result.hasOwner = true;
        result.owner_ = builderForValue.build();
        return this;
      }
      public Builder mergeOwner(D3.Items.Items.Ownership value) {
        if (result.hasOwner() &&
            result.owner_ != D3.Items.Items.Ownership.getDefaultInstance()) {
          result.owner_ =
            D3.Items.Items.Ownership.newBuilder(result.owner_).mergeFrom(value).buildPartial();
        } else {
          result.owner_ = value;
        }
        result.hasOwner = true;
        return this;
      }
      public Builder clearOwner() {
        result.hasOwner = false;
        result.owner_ = D3.Items.Items.Ownership.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.AuctionInfo)
    }
    
    static {
      defaultInstance = new AuctionInfo(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.AuctionInfo)
  }
  
  public static final class ItemList extends
      com.google.protobuf.GeneratedMessage {
    // Use ItemList.newBuilder() to construct.
    private ItemList() {
      initFields();
    }
    private ItemList(boolean noInit) {}
    
    private static final ItemList defaultInstance;
    public static ItemList getDefaultInstance() {
      return defaultInstance;
    }
    
    public ItemList getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_ItemList_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_ItemList_fieldAccessorTable;
    }
    
    // repeated .D3.Items.SavedItem items = 1;
    public static final int ITEMS_FIELD_NUMBER = 1;
    private java.util.List<D3.Items.Items.SavedItem> items_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Items.Items.SavedItem> getItemsList() {
      return items_;
    }
    public int getItemsCount() { return items_.size(); }
    public D3.Items.Items.SavedItem getItems(int index) {
      return items_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (D3.Items.Items.SavedItem element : getItemsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (D3.Items.Items.SavedItem element : getItemsList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (D3.Items.Items.SavedItem element : getItemsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.ItemList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.ItemList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.ItemList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.ItemList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.ItemList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.ItemList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.ItemList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.ItemList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.ItemList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.ItemList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.ItemList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.ItemList result;
      
      // Construct using D3.Items.Items.ItemList.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.ItemList();
        return builder;
      }
      
      protected D3.Items.Items.ItemList internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.ItemList();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.ItemList.getDescriptor();
      }
      
      public D3.Items.Items.ItemList getDefaultInstanceForType() {
        return D3.Items.Items.ItemList.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.ItemList build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.ItemList buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.ItemList buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.items_ != java.util.Collections.EMPTY_LIST) {
          result.items_ =
            java.util.Collections.unmodifiableList(result.items_);
        }
        D3.Items.Items.ItemList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.ItemList) {
          return mergeFrom((D3.Items.Items.ItemList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.ItemList other) {
        if (other == D3.Items.Items.ItemList.getDefaultInstance()) return this;
        if (!other.items_.isEmpty()) {
          if (result.items_.isEmpty()) {
            result.items_ = new java.util.ArrayList<D3.Items.Items.SavedItem>();
          }
          result.items_.addAll(other.items_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.Items.Items.SavedItem.Builder subBuilder = D3.Items.Items.SavedItem.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addItems(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .D3.Items.SavedItem items = 1;
      public java.util.List<D3.Items.Items.SavedItem> getItemsList() {
        return java.util.Collections.unmodifiableList(result.items_);
      }
      public int getItemsCount() {
        return result.getItemsCount();
      }
      public D3.Items.Items.SavedItem getItems(int index) {
        return result.getItems(index);
      }
      public Builder setItems(int index, D3.Items.Items.SavedItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.items_.set(index, value);
        return this;
      }
      public Builder setItems(int index, D3.Items.Items.SavedItem.Builder builderForValue) {
        result.items_.set(index, builderForValue.build());
        return this;
      }
      public Builder addItems(D3.Items.Items.SavedItem value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.items_.isEmpty()) {
          result.items_ = new java.util.ArrayList<D3.Items.Items.SavedItem>();
        }
        result.items_.add(value);
        return this;
      }
      public Builder addItems(D3.Items.Items.SavedItem.Builder builderForValue) {
        if (result.items_.isEmpty()) {
          result.items_ = new java.util.ArrayList<D3.Items.Items.SavedItem>();
        }
        result.items_.add(builderForValue.build());
        return this;
      }
      public Builder addAllItems(
          java.lang.Iterable<? extends D3.Items.Items.SavedItem> values) {
        if (result.items_.isEmpty()) {
          result.items_ = new java.util.ArrayList<D3.Items.Items.SavedItem>();
        }
        super.addAll(values, result.items_);
        return this;
      }
      public Builder clearItems() {
        result.items_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.ItemList)
    }
    
    static {
      defaultInstance = new ItemList(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.ItemList)
  }
  
  public static final class Ownership extends
      com.google.protobuf.GeneratedMessage {
    // Use Ownership.newBuilder() to construct.
    private Ownership() {
      initFields();
    }
    private Ownership(boolean noInit) {}
    
    private static final Ownership defaultInstance;
    public static Ownership getDefaultInstance() {
      return defaultInstance;
    }
    
    public Ownership getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Items.Items.internal_static_D3_Items_Ownership_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Items.Items.internal_static_D3_Items_Ownership_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.EntityId owner_entity_id = 1;
    public static final int OWNER_ENTITY_ID_FIELD_NUMBER = 1;
    private boolean hasOwnerEntityId;
    private D3.OnlineService.OnlineService.EntityId ownerEntityId_;
    public boolean hasOwnerEntityId() { return hasOwnerEntityId; }
    public D3.OnlineService.OnlineService.EntityId getOwnerEntityId() { return ownerEntityId_; }
    
    // optional sint64 delete_time = 2;
    public static final int DELETE_TIME_FIELD_NUMBER = 2;
    private boolean hasDeleteTime;
    private long deleteTime_ = 0L;
    public boolean hasDeleteTime() { return hasDeleteTime; }
    public long getDeleteTime() { return deleteTime_; }
    
    // optional .D3.OnlineService.EntityId escrow_id = 3;
    public static final int ESCROW_ID_FIELD_NUMBER = 3;
    private boolean hasEscrowId;
    private D3.OnlineService.OnlineService.EntityId escrowId_;
    public boolean hasEscrowId() { return hasEscrowId; }
    public D3.OnlineService.OnlineService.EntityId getEscrowId() { return escrowId_; }
    
    private void initFields() {
      ownerEntityId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      escrowId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasOwnerEntityId) return false;
      if (!getOwnerEntityId().isInitialized()) return false;
      if (hasEscrowId()) {
        if (!getEscrowId().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasOwnerEntityId()) {
        output.writeMessage(1, getOwnerEntityId());
      }
      if (hasDeleteTime()) {
        output.writeSInt64(2, getDeleteTime());
      }
      if (hasEscrowId()) {
        output.writeMessage(3, getEscrowId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasOwnerEntityId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOwnerEntityId());
      }
      if (hasDeleteTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt64Size(2, getDeleteTime());
      }
      if (hasEscrowId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getEscrowId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Items.Items.Ownership parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.Ownership parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.Ownership parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Items.Items.Ownership parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.Ownership parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.Ownership parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Items.Items.Ownership parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.Ownership parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Items.Items.Ownership parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Items.Items.Ownership parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Items.Items.Ownership prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Items.Items.Ownership result;
      
      // Construct using D3.Items.Items.Ownership.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Items.Items.Ownership();
        return builder;
      }
      
      protected D3.Items.Items.Ownership internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Items.Items.Ownership();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Items.Items.Ownership.getDescriptor();
      }
      
      public D3.Items.Items.Ownership getDefaultInstanceForType() {
        return D3.Items.Items.Ownership.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Items.Items.Ownership build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Items.Items.Ownership buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Items.Items.Ownership buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Items.Items.Ownership returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Items.Items.Ownership) {
          return mergeFrom((D3.Items.Items.Ownership)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Items.Items.Ownership other) {
        if (other == D3.Items.Items.Ownership.getDefaultInstance()) return this;
        if (other.hasOwnerEntityId()) {
          mergeOwnerEntityId(other.getOwnerEntityId());
        }
        if (other.hasDeleteTime()) {
          setDeleteTime(other.getDeleteTime());
        }
        if (other.hasEscrowId()) {
          mergeEscrowId(other.getEscrowId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasOwnerEntityId()) {
                subBuilder.mergeFrom(getOwnerEntityId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setOwnerEntityId(subBuilder.buildPartial());
              break;
            }
            case 16: {
              setDeleteTime(input.readSInt64());
              break;
            }
            case 26: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasEscrowId()) {
                subBuilder.mergeFrom(getEscrowId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setEscrowId(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.EntityId owner_entity_id = 1;
      public boolean hasOwnerEntityId() {
        return result.hasOwnerEntityId();
      }
      public D3.OnlineService.OnlineService.EntityId getOwnerEntityId() {
        return result.getOwnerEntityId();
      }
      public Builder setOwnerEntityId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = value;
        return this;
      }
      public Builder setOwnerEntityId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasOwnerEntityId = true;
        result.ownerEntityId_ = builderForValue.build();
        return this;
      }
      public Builder mergeOwnerEntityId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasOwnerEntityId() &&
            result.ownerEntityId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.ownerEntityId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.ownerEntityId_).mergeFrom(value).buildPartial();
        } else {
          result.ownerEntityId_ = value;
        }
        result.hasOwnerEntityId = true;
        return this;
      }
      public Builder clearOwnerEntityId() {
        result.hasOwnerEntityId = false;
        result.ownerEntityId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // optional sint64 delete_time = 2;
      public boolean hasDeleteTime() {
        return result.hasDeleteTime();
      }
      public long getDeleteTime() {
        return result.getDeleteTime();
      }
      public Builder setDeleteTime(long value) {
        result.hasDeleteTime = true;
        result.deleteTime_ = value;
        return this;
      }
      public Builder clearDeleteTime() {
        result.hasDeleteTime = false;
        result.deleteTime_ = 0L;
        return this;
      }
      
      // optional .D3.OnlineService.EntityId escrow_id = 3;
      public boolean hasEscrowId() {
        return result.hasEscrowId();
      }
      public D3.OnlineService.OnlineService.EntityId getEscrowId() {
        return result.getEscrowId();
      }
      public Builder setEscrowId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasEscrowId = true;
        result.escrowId_ = value;
        return this;
      }
      public Builder setEscrowId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasEscrowId = true;
        result.escrowId_ = builderForValue.build();
        return this;
      }
      public Builder mergeEscrowId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasEscrowId() &&
            result.escrowId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.escrowId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.escrowId_).mergeFrom(value).buildPartial();
        } else {
          result.escrowId_ = value;
        }
        result.hasEscrowId = true;
        return this;
      }
      public Builder clearEscrowId() {
        result.hasEscrowId = false;
        result.escrowId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Items.Ownership)
    }
    
    static {
      defaultInstance = new Ownership(true);
      D3.Items.Items.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Items.Ownership)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_RareItemName_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_RareItemName_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_Generator_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_Generator_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_EmbeddedGenerator_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_EmbeddedGenerator_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_SavedItem_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_SavedItem_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_AuctionAccountInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_AuctionAccountInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_AuctionItem_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_AuctionItem_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_AuctionInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_AuctionInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_ItemList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_ItemList_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Items_Ownership_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Items_Ownership_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013Items.proto\022\010D3.Items\032\016GBHandle.proto\032" +
      "\023OnlineService.proto\"\213\001\n\014RareItemName\022\033\n" +
      "\023item_name_is_prefix\030\001 \002(\010\022\035\n\025sno_affix_" +
      "string_list\030\002 \002(\017\022\037\n\027affix_string_list_i" +
      "ndex\030\003 \002(\021\022\036\n\026item_string_list_index\030\004 \002" +
      "(\021\"\226\003\n\tGenerator\022\014\n\004seed\030\001 \002(\r\022)\n\tgb_han" +
      "dle\030\002 \002(\0132\026.D3.GameBalance.Handle\022\024\n\014bas" +
      "e_affixes\030\003 \003(\017\022.\n\016rare_item_name\030\004 \002(\0132" +
      "\026.D3.Items.RareItemName\022\025\n\renchant_affix" +
      "\030\005 \002(\017\022\024\n\014socket_affix\030\006 \002(\017\022\r\n\005flags\030\007 ",
      "\002(\r\022\022\n\ndurability\030\010 \002(\r\022\022\n\nstack_size\030\t " +
      "\002(\004\022\020\n\010dye_type\030\n \002(\r\022\032\n\022item_quality_le" +
      "vel\030\013 \002(\021\022\032\n\022item_binding_level\030\014 \002(\021\022\026\n" +
      "\016max_durability\030\r \002(\r\022-\n\010contents\030\016 \003(\0132" +
      "\033.D3.Items.EmbeddedGenerator\022\025\n\rattuned_" +
      "skill\030\017 \001(\017\"a\n\021EmbeddedGenerator\022$\n\002id\030\001" +
      " \002(\0132\030.D3.OnlineService.ItemId\022&\n\tgenera" +
      "tor\030\002 \002(\0132\023.D3.Items.Generator\"\227\002\n\tSaved" +
      "Item\022$\n\002id\030\001 \002(\0132\030.D3.OnlineService.Item" +
      "Id\0223\n\017owner_entity_id\030\002 \001(\0132\032.D3.OnlineS",
      "ervice.EntityId\022+\n\tsocket_id\030\003 \001(\0132\030.D3." +
      "OnlineService.ItemId\022\026\n\016hireling_class\030\004" +
      " \002(\021\022\021\n\titem_slot\030\005 \002(\021\022\024\n\014square_index\030" +
      "\006 \002(\021\022\031\n\021used_socket_count\030\007 \002(\r\022&\n\tgene" +
      "rator\030\010 \001(\0132\023.D3.Items.Generator\"s\n\022Auct" +
      "ionAccountInfo\022.\n\naccount_id\030\001 \002(\0132\032.D3." +
      "OnlineService.EntityId\022-\n\tescrow_id\030\002 \002(" +
      "\0132\032.D3.OnlineService.EntityId\"[\n\013Auction" +
      "Item\022$\n\002id\030\001 \002(\0132\030.D3.OnlineService.Item" +
      "Id\022&\n\tgenerator\030\002 \002(\0132\023.D3.Items.Generat",
      "or\"W\n\013AuctionInfo\022$\n\002id\030\001 \002(\0132\030.D3.Onlin" +
      "eService.ItemId\022\"\n\005owner\030\002 \001(\0132\023.D3.Item" +
      "s.Ownership\".\n\010ItemList\022\"\n\005items\030\001 \003(\0132\023" +
      ".D3.Items.SavedItem\"\204\001\n\tOwnership\0223\n\017own" +
      "er_entity_id\030\001 \002(\0132\032.D3.OnlineService.En" +
      "tityId\022\023\n\013delete_time\030\002 \001(\022\022-\n\tescrow_id" +
      "\030\003 \001(\0132\032.D3.OnlineService.EntityId"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_Items_RareItemName_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_Items_RareItemName_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_RareItemName_descriptor,
              new java.lang.String[] { "ItemNameIsPrefix", "SnoAffixStringList", "AffixStringListIndex", "ItemStringListIndex", },
              D3.Items.Items.RareItemName.class,
              D3.Items.Items.RareItemName.Builder.class);
          internal_static_D3_Items_Generator_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_D3_Items_Generator_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_Generator_descriptor,
              new java.lang.String[] { "Seed", "GbHandle", "BaseAffixes", "RareItemName", "EnchantAffix", "SocketAffix", "Flags", "Durability", "StackSize", "DyeType", "ItemQualityLevel", "ItemBindingLevel", "MaxDurability", "Contents", "AttunedSkill", },
              D3.Items.Items.Generator.class,
              D3.Items.Items.Generator.Builder.class);
          internal_static_D3_Items_EmbeddedGenerator_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_D3_Items_EmbeddedGenerator_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_EmbeddedGenerator_descriptor,
              new java.lang.String[] { "Id", "Generator", },
              D3.Items.Items.EmbeddedGenerator.class,
              D3.Items.Items.EmbeddedGenerator.Builder.class);
          internal_static_D3_Items_SavedItem_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_D3_Items_SavedItem_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_SavedItem_descriptor,
              new java.lang.String[] { "Id", "OwnerEntityId", "SocketId", "HirelingClass", "ItemSlot", "SquareIndex", "UsedSocketCount", "Generator", },
              D3.Items.Items.SavedItem.class,
              D3.Items.Items.SavedItem.Builder.class);
          internal_static_D3_Items_AuctionAccountInfo_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_D3_Items_AuctionAccountInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_AuctionAccountInfo_descriptor,
              new java.lang.String[] { "AccountId", "EscrowId", },
              D3.Items.Items.AuctionAccountInfo.class,
              D3.Items.Items.AuctionAccountInfo.Builder.class);
          internal_static_D3_Items_AuctionItem_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_D3_Items_AuctionItem_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_AuctionItem_descriptor,
              new java.lang.String[] { "Id", "Generator", },
              D3.Items.Items.AuctionItem.class,
              D3.Items.Items.AuctionItem.Builder.class);
          internal_static_D3_Items_AuctionInfo_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_D3_Items_AuctionInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_AuctionInfo_descriptor,
              new java.lang.String[] { "Id", "Owner", },
              D3.Items.Items.AuctionInfo.class,
              D3.Items.Items.AuctionInfo.Builder.class);
          internal_static_D3_Items_ItemList_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_D3_Items_ItemList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_ItemList_descriptor,
              new java.lang.String[] { "Items", },
              D3.Items.Items.ItemList.class,
              D3.Items.Items.ItemList.Builder.class);
          internal_static_D3_Items_Ownership_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_D3_Items_Ownership_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Items_Ownership_descriptor,
              new java.lang.String[] { "OwnerEntityId", "DeleteTime", "EscrowId", },
              D3.Items.Items.Ownership.class,
              D3.Items.Items.Ownership.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          D3.GameBalance.GBHandle.getDescriptor(),
          D3.OnlineService.OnlineService.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
