// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Settings.proto

package D3.Client;

public final class Settings {
  private Settings() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class ToonSettings extends
      com.google.protobuf.GeneratedMessage {
    // Use ToonSettings.newBuilder() to construct.
    private ToonSettings() {
      initFields();
    }
    private ToonSettings(boolean noInit) {}
    
    private static final ToonSettings defaultInstance;
    public static ToonSettings getDefaultInstance() {
      return defaultInstance;
    }
    
    public ToonSettings getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Client.Settings.internal_static_D3_Client_ToonSettings_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Client.Settings.internal_static_D3_Client_ToonSettings_fieldAccessorTable;
    }
    
    // optional uint32 ui_flags = 1;
    public static final int UI_FLAGS_FIELD_NUMBER = 1;
    private boolean hasUiFlags;
    private int uiFlags_ = 0;
    public boolean hasUiFlags() { return hasUiFlags; }
    public int getUiFlags() { return uiFlags_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasUiFlags()) {
        output.writeUInt32(1, getUiFlags());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasUiFlags()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getUiFlags());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Client.Settings.ToonSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Client.Settings.ToonSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Client.Settings.ToonSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Client.Settings.ToonSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Client.Settings.ToonSettings prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Client.Settings.ToonSettings result;
      
      // Construct using D3.Client.Settings.ToonSettings.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Client.Settings.ToonSettings();
        return builder;
      }
      
      protected D3.Client.Settings.ToonSettings internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Client.Settings.ToonSettings();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Client.Settings.ToonSettings.getDescriptor();
      }
      
      public D3.Client.Settings.ToonSettings getDefaultInstanceForType() {
        return D3.Client.Settings.ToonSettings.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Client.Settings.ToonSettings build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Client.Settings.ToonSettings buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Client.Settings.ToonSettings buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Client.Settings.ToonSettings returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Client.Settings.ToonSettings) {
          return mergeFrom((D3.Client.Settings.ToonSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Client.Settings.ToonSettings other) {
        if (other == D3.Client.Settings.ToonSettings.getDefaultInstance()) return this;
        if (other.hasUiFlags()) {
          setUiFlags(other.getUiFlags());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setUiFlags(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // optional uint32 ui_flags = 1;
      public boolean hasUiFlags() {
        return result.hasUiFlags();
      }
      public int getUiFlags() {
        return result.getUiFlags();
      }
      public Builder setUiFlags(int value) {
        result.hasUiFlags = true;
        result.uiFlags_ = value;
        return this;
      }
      public Builder clearUiFlags() {
        result.hasUiFlags = false;
        result.uiFlags_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Client.ToonSettings)
    }
    
    static {
      defaultInstance = new ToonSettings(true);
      D3.Client.Settings.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Client.ToonSettings)
  }
  
  public static final class GameAccountSettings extends
      com.google.protobuf.GeneratedMessage {
    // Use GameAccountSettings.newBuilder() to construct.
    private GameAccountSettings() {
      initFields();
    }
    private GameAccountSettings(boolean noInit) {}
    
    private static final GameAccountSettings defaultInstance;
    public static GameAccountSettings getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameAccountSettings getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Client.Settings.internal_static_D3_Client_GameAccountSettings_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Client.Settings.internal_static_D3_Client_GameAccountSettings_fieldAccessorTable;
    }
    
    // optional int32 use_last_hero = 1;
    public static final int USE_LAST_HERO_FIELD_NUMBER = 1;
    private boolean hasUseLastHero;
    private int useLastHero_ = 0;
    public boolean hasUseLastHero() { return hasUseLastHero; }
    public int getUseLastHero() { return useLastHero_; }
    
    // optional int32 show_offline_toast = 2;
    public static final int SHOW_OFFLINE_TOAST_FIELD_NUMBER = 2;
    private boolean hasShowOfflineToast;
    private int showOfflineToast_ = 0;
    public boolean hasShowOfflineToast() { return hasShowOfflineToast; }
    public int getShowOfflineToast() { return showOfflineToast_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasUseLastHero()) {
        output.writeInt32(1, getUseLastHero());
      }
      if (hasShowOfflineToast()) {
        output.writeInt32(2, getShowOfflineToast());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasUseLastHero()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getUseLastHero());
      }
      if (hasShowOfflineToast()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getShowOfflineToast());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Client.Settings.GameAccountSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Client.Settings.GameAccountSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Client.Settings.GameAccountSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Client.Settings.GameAccountSettings prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Client.Settings.GameAccountSettings result;
      
      // Construct using D3.Client.Settings.GameAccountSettings.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Client.Settings.GameAccountSettings();
        return builder;
      }
      
      protected D3.Client.Settings.GameAccountSettings internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Client.Settings.GameAccountSettings();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Client.Settings.GameAccountSettings.getDescriptor();
      }
      
      public D3.Client.Settings.GameAccountSettings getDefaultInstanceForType() {
        return D3.Client.Settings.GameAccountSettings.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Client.Settings.GameAccountSettings build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Client.Settings.GameAccountSettings buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Client.Settings.GameAccountSettings buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Client.Settings.GameAccountSettings returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Client.Settings.GameAccountSettings) {
          return mergeFrom((D3.Client.Settings.GameAccountSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Client.Settings.GameAccountSettings other) {
        if (other == D3.Client.Settings.GameAccountSettings.getDefaultInstance()) return this;
        if (other.hasUseLastHero()) {
          setUseLastHero(other.getUseLastHero());
        }
        if (other.hasShowOfflineToast()) {
          setShowOfflineToast(other.getShowOfflineToast());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setUseLastHero(input.readInt32());
              break;
            }
            case 16: {
              setShowOfflineToast(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 use_last_hero = 1;
      public boolean hasUseLastHero() {
        return result.hasUseLastHero();
      }
      public int getUseLastHero() {
        return result.getUseLastHero();
      }
      public Builder setUseLastHero(int value) {
        result.hasUseLastHero = true;
        result.useLastHero_ = value;
        return this;
      }
      public Builder clearUseLastHero() {
        result.hasUseLastHero = false;
        result.useLastHero_ = 0;
        return this;
      }
      
      // optional int32 show_offline_toast = 2;
      public boolean hasShowOfflineToast() {
        return result.hasShowOfflineToast();
      }
      public int getShowOfflineToast() {
        return result.getShowOfflineToast();
      }
      public Builder setShowOfflineToast(int value) {
        result.hasShowOfflineToast = true;
        result.showOfflineToast_ = value;
        return this;
      }
      public Builder clearShowOfflineToast() {
        result.hasShowOfflineToast = false;
        result.showOfflineToast_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Client.GameAccountSettings)
    }
    
    static {
      defaultInstance = new GameAccountSettings(true);
      D3.Client.Settings.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Client.GameAccountSettings)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Client_ToonSettings_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Client_ToonSettings_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Client_GameAccountSettings_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Client_GameAccountSettings_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016Settings.proto\022\tD3.Client\" \n\014ToonSetti" +
      "ngs\022\020\n\010ui_flags\030\001 \001(\r\"H\n\023GameAccountSett" +
      "ings\022\025\n\ruse_last_hero\030\001 \001(\005\022\032\n\022show_offl" +
      "ine_toast\030\002 \001(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_Client_ToonSettings_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_Client_ToonSettings_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Client_ToonSettings_descriptor,
              new java.lang.String[] { "UiFlags", },
              D3.Client.Settings.ToonSettings.class,
              D3.Client.Settings.ToonSettings.Builder.class);
          internal_static_D3_Client_GameAccountSettings_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_D3_Client_GameAccountSettings_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Client_GameAccountSettings_descriptor,
              new java.lang.String[] { "UseLastHero", "ShowOfflineToast", },
              D3.Client.Settings.GameAccountSettings.class,
              D3.Client.Settings.GameAccountSettings.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
