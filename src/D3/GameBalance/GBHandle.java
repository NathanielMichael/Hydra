// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GBHandle.proto

package D3.GameBalance;

public final class GBHandle {
  private GBHandle() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Handle extends
      com.google.protobuf.GeneratedMessage {
    // Use Handle.newBuilder() to construct.
    private Handle() {
      initFields();
    }
    private Handle(boolean noInit) {}
    
    private static final Handle defaultInstance;
    public static Handle getDefaultInstance() {
      return defaultInstance;
    }
    
    public Handle getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameBalance.GBHandle.internal_static_D3_GameBalance_Handle_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameBalance.GBHandle.internal_static_D3_GameBalance_Handle_fieldAccessorTable;
    }
    
    // required sint32 game_balance_type = 1;
    public static final int GAME_BALANCE_TYPE_FIELD_NUMBER = 1;
    private boolean hasGameBalanceType;
    private int gameBalanceType_ = 0;
    public boolean hasGameBalanceType() { return hasGameBalanceType; }
    public int getGameBalanceType() { return gameBalanceType_; }
    
    // required sfixed32 gbid = 2;
    public static final int GBID_FIELD_NUMBER = 2;
    private boolean hasGbid;
    private int gbid_ = 0;
    public boolean hasGbid() { return hasGbid; }
    public int getGbid() { return gbid_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasGameBalanceType) return false;
      if (!hasGbid) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasGameBalanceType()) {
        output.writeSInt32(1, getGameBalanceType());
      }
      if (hasGbid()) {
        output.writeSFixed32(2, getGbid());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasGameBalanceType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, getGameBalanceType());
      }
      if (hasGbid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(2, getGbid());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameBalance.GBHandle.Handle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameBalance.GBHandle.Handle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameBalance.GBHandle.Handle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameBalance.GBHandle.Handle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameBalance.GBHandle.Handle result;
      
      // Construct using D3.GameBalance.GBHandle.Handle.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameBalance.GBHandle.Handle();
        return builder;
      }
      
      protected D3.GameBalance.GBHandle.Handle internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameBalance.GBHandle.Handle();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameBalance.GBHandle.Handle.getDescriptor();
      }
      
      public D3.GameBalance.GBHandle.Handle getDefaultInstanceForType() {
        return D3.GameBalance.GBHandle.Handle.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameBalance.GBHandle.Handle build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameBalance.GBHandle.Handle buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameBalance.GBHandle.Handle buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.GameBalance.GBHandle.Handle returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameBalance.GBHandle.Handle) {
          return mergeFrom((D3.GameBalance.GBHandle.Handle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameBalance.GBHandle.Handle other) {
        if (other == D3.GameBalance.GBHandle.Handle.getDefaultInstance()) return this;
        if (other.hasGameBalanceType()) {
          setGameBalanceType(other.getGameBalanceType());
        }
        if (other.hasGbid()) {
          setGbid(other.getGbid());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setGameBalanceType(input.readSInt32());
              break;
            }
            case 21: {
              setGbid(input.readSFixed32());
              break;
            }
          }
        }
      }
      
      
      // required sint32 game_balance_type = 1;
      public boolean hasGameBalanceType() {
        return result.hasGameBalanceType();
      }
      public int getGameBalanceType() {
        return result.getGameBalanceType();
      }
      public Builder setGameBalanceType(int value) {
        result.hasGameBalanceType = true;
        result.gameBalanceType_ = value;
        return this;
      }
      public Builder clearGameBalanceType() {
        result.hasGameBalanceType = false;
        result.gameBalanceType_ = 0;
        return this;
      }
      
      // required sfixed32 gbid = 2;
      public boolean hasGbid() {
        return result.hasGbid();
      }
      public int getGbid() {
        return result.getGbid();
      }
      public Builder setGbid(int value) {
        result.hasGbid = true;
        result.gbid_ = value;
        return this;
      }
      public Builder clearGbid() {
        result.hasGbid = false;
        result.gbid_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameBalance.Handle)
    }
    
    static {
      defaultInstance = new Handle(true);
      D3.GameBalance.GBHandle.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameBalance.Handle)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameBalance_Handle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameBalance_Handle_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016GBHandle.proto\022\016D3.GameBalance\"1\n\006Hand" +
      "le\022\031\n\021game_balance_type\030\001 \002(\021\022\014\n\004gbid\030\002 " +
      "\002(\017"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_GameBalance_Handle_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_GameBalance_Handle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameBalance_Handle_descriptor,
              new java.lang.String[] { "GameBalanceType", "Gbid", },
              D3.GameBalance.GBHandle.Handle.class,
              D3.GameBalance.GBHandle.Handle.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
