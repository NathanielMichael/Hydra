// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

package D3.GameMessage;

public final class GameMessage {
  private GameMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class HeroDigestList extends
      com.google.protobuf.GeneratedMessage {
    // Use HeroDigestList.newBuilder() to construct.
    private HeroDigestList() {
      initFields();
    }
    private HeroDigestList(boolean noInit) {}
    
    private static final HeroDigestList defaultInstance;
    public static HeroDigestList getDefaultInstance() {
      return defaultInstance;
    }
    
    public HeroDigestList getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestList_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestList_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.EntityId account_id = 1;
    public static final int ACCOUNT_ID_FIELD_NUMBER = 1;
    private boolean hasAccountId;
    private D3.OnlineService.OnlineService.EntityId accountId_;
    public boolean hasAccountId() { return hasAccountId; }
    public D3.OnlineService.OnlineService.EntityId getAccountId() { return accountId_; }
    
    // repeated .D3.Hero.Digest digest_list = 2;
    public static final int DIGEST_LIST_FIELD_NUMBER = 2;
    private java.util.List<D3.Hero.Hero.Digest> digestList_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.Hero.Hero.Digest> getDigestListList() {
      return digestList_;
    }
    public int getDigestListCount() { return digestList_.size(); }
    public D3.Hero.Hero.Digest getDigestList(int index) {
      return digestList_.get(index);
    }
    
    private void initFields() {
      accountId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasAccountId) return false;
      if (!getAccountId().isInitialized()) return false;
      for (D3.Hero.Hero.Digest element : getDigestListList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAccountId()) {
        output.writeMessage(1, getAccountId());
      }
      for (D3.Hero.Hero.Digest element : getDigestListList()) {
        output.writeMessage(2, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAccountId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAccountId());
      }
      for (D3.Hero.Hero.Digest element : getDigestListList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.HeroDigestList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.HeroDigestList result;
      
      // Construct using D3.GameMessage.GameMessage.HeroDigestList.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.HeroDigestList();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.HeroDigestList internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.HeroDigestList();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.HeroDigestList.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestList getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.HeroDigestList.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.HeroDigestList build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.HeroDigestList buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestList buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.digestList_ != java.util.Collections.EMPTY_LIST) {
          result.digestList_ =
            java.util.Collections.unmodifiableList(result.digestList_);
        }
        D3.GameMessage.GameMessage.HeroDigestList returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.HeroDigestList) {
          return mergeFrom((D3.GameMessage.GameMessage.HeroDigestList)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.HeroDigestList other) {
        if (other == D3.GameMessage.GameMessage.HeroDigestList.getDefaultInstance()) return this;
        if (other.hasAccountId()) {
          mergeAccountId(other.getAccountId());
        }
        if (!other.digestList_.isEmpty()) {
          if (result.digestList_.isEmpty()) {
            result.digestList_ = new java.util.ArrayList<D3.Hero.Hero.Digest>();
          }
          result.digestList_.addAll(other.digestList_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasAccountId()) {
                subBuilder.mergeFrom(getAccountId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAccountId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Hero.Hero.Digest.Builder subBuilder = D3.Hero.Hero.Digest.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addDigestList(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.EntityId account_id = 1;
      public boolean hasAccountId() {
        return result.hasAccountId();
      }
      public D3.OnlineService.OnlineService.EntityId getAccountId() {
        return result.getAccountId();
      }
      public Builder setAccountId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder setAccountId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasAccountId = true;
        result.accountId_ = builderForValue.build();
        return this;
      }
      public Builder mergeAccountId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasAccountId() &&
            result.accountId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.accountId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.accountId_).mergeFrom(value).buildPartial();
        } else {
          result.accountId_ = value;
        }
        result.hasAccountId = true;
        return this;
      }
      public Builder clearAccountId() {
        result.hasAccountId = false;
        result.accountId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // repeated .D3.Hero.Digest digest_list = 2;
      public java.util.List<D3.Hero.Hero.Digest> getDigestListList() {
        return java.util.Collections.unmodifiableList(result.digestList_);
      }
      public int getDigestListCount() {
        return result.getDigestListCount();
      }
      public D3.Hero.Hero.Digest getDigestList(int index) {
        return result.getDigestList(index);
      }
      public Builder setDigestList(int index, D3.Hero.Hero.Digest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.digestList_.set(index, value);
        return this;
      }
      public Builder setDigestList(int index, D3.Hero.Hero.Digest.Builder builderForValue) {
        result.digestList_.set(index, builderForValue.build());
        return this;
      }
      public Builder addDigestList(D3.Hero.Hero.Digest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.digestList_.isEmpty()) {
          result.digestList_ = new java.util.ArrayList<D3.Hero.Hero.Digest>();
        }
        result.digestList_.add(value);
        return this;
      }
      public Builder addDigestList(D3.Hero.Hero.Digest.Builder builderForValue) {
        if (result.digestList_.isEmpty()) {
          result.digestList_ = new java.util.ArrayList<D3.Hero.Hero.Digest>();
        }
        result.digestList_.add(builderForValue.build());
        return this;
      }
      public Builder addAllDigestList(
          java.lang.Iterable<? extends D3.Hero.Hero.Digest> values) {
        if (result.digestList_.isEmpty()) {
          result.digestList_ = new java.util.ArrayList<D3.Hero.Hero.Digest>();
        }
        super.addAll(values, result.digestList_);
        return this;
      }
      public Builder clearDigestList() {
        result.digestList_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.HeroDigestList)
    }
    
    static {
      defaultInstance = new HeroDigestList(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestList)
  }
  
  public static final class ClientToonSettings extends
      com.google.protobuf.GeneratedMessage {
    // Use ClientToonSettings.newBuilder() to construct.
    private ClientToonSettings() {
      initFields();
    }
    private ClientToonSettings(boolean noInit) {}
    
    private static final ClientToonSettings defaultInstance;
    public static ClientToonSettings getDefaultInstance() {
      return defaultInstance;
    }
    
    public ClientToonSettings getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_ClientToonSettings_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_ClientToonSettings_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.EntityId toon_id = 1;
    public static final int TOON_ID_FIELD_NUMBER = 1;
    private boolean hasToonId;
    private D3.OnlineService.OnlineService.EntityId toonId_;
    public boolean hasToonId() { return hasToonId; }
    public D3.OnlineService.OnlineService.EntityId getToonId() { return toonId_; }
    
    // required .D3.Client.ToonSettings client_toon_settings = 2;
    public static final int CLIENT_TOON_SETTINGS_FIELD_NUMBER = 2;
    private boolean hasClientToonSettings;
    private D3.Client.Settings.ToonSettings clientToonSettings_;
    public boolean hasClientToonSettings() { return hasClientToonSettings; }
    public D3.Client.Settings.ToonSettings getClientToonSettings() { return clientToonSettings_; }
    
    private void initFields() {
      toonId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      clientToonSettings_ = D3.Client.Settings.ToonSettings.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasToonId) return false;
      if (!hasClientToonSettings) return false;
      if (!getToonId().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasToonId()) {
        output.writeMessage(1, getToonId());
      }
      if (hasClientToonSettings()) {
        output.writeMessage(2, getClientToonSettings());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasToonId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getToonId());
      }
      if (hasClientToonSettings()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getClientToonSettings());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.ClientToonSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.ClientToonSettings prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.ClientToonSettings result;
      
      // Construct using D3.GameMessage.GameMessage.ClientToonSettings.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.ClientToonSettings();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.ClientToonSettings internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.ClientToonSettings();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.ClientToonSettings.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.ClientToonSettings getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.ClientToonSettings.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.ClientToonSettings build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.ClientToonSettings buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.ClientToonSettings buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.GameMessage.GameMessage.ClientToonSettings returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.ClientToonSettings) {
          return mergeFrom((D3.GameMessage.GameMessage.ClientToonSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.ClientToonSettings other) {
        if (other == D3.GameMessage.GameMessage.ClientToonSettings.getDefaultInstance()) return this;
        if (other.hasToonId()) {
          mergeToonId(other.getToonId());
        }
        if (other.hasClientToonSettings()) {
          mergeClientToonSettings(other.getClientToonSettings());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasToonId()) {
                subBuilder.mergeFrom(getToonId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToonId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Client.Settings.ToonSettings.Builder subBuilder = D3.Client.Settings.ToonSettings.newBuilder();
              if (hasClientToonSettings()) {
                subBuilder.mergeFrom(getClientToonSettings());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setClientToonSettings(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.EntityId toon_id = 1;
      public boolean hasToonId() {
        return result.hasToonId();
      }
      public D3.OnlineService.OnlineService.EntityId getToonId() {
        return result.getToonId();
      }
      public Builder setToonId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder setToonId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasToonId = true;
        result.toonId_ = builderForValue.build();
        return this;
      }
      public Builder mergeToonId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasToonId() &&
            result.toonId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.toonId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.toonId_).mergeFrom(value).buildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder clearToonId() {
        result.hasToonId = false;
        result.toonId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // required .D3.Client.ToonSettings client_toon_settings = 2;
      public boolean hasClientToonSettings() {
        return result.hasClientToonSettings();
      }
      public D3.Client.Settings.ToonSettings getClientToonSettings() {
        return result.getClientToonSettings();
      }
      public Builder setClientToonSettings(D3.Client.Settings.ToonSettings value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasClientToonSettings = true;
        result.clientToonSettings_ = value;
        return this;
      }
      public Builder setClientToonSettings(D3.Client.Settings.ToonSettings.Builder builderForValue) {
        result.hasClientToonSettings = true;
        result.clientToonSettings_ = builderForValue.build();
        return this;
      }
      public Builder mergeClientToonSettings(D3.Client.Settings.ToonSettings value) {
        if (result.hasClientToonSettings() &&
            result.clientToonSettings_ != D3.Client.Settings.ToonSettings.getDefaultInstance()) {
          result.clientToonSettings_ =
            D3.Client.Settings.ToonSettings.newBuilder(result.clientToonSettings_).mergeFrom(value).buildPartial();
        } else {
          result.clientToonSettings_ = value;
        }
        result.hasClientToonSettings = true;
        return this;
      }
      public Builder clearClientToonSettings() {
        result.hasClientToonSettings = false;
        result.clientToonSettings_ = D3.Client.Settings.ToonSettings.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.ClientToonSettings)
    }
    
    static {
      defaultInstance = new ClientToonSettings(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.ClientToonSettings)
  }
  
  public static final class HeroDigestListRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use HeroDigestListRequest.newBuilder() to construct.
    private HeroDigestListRequest() {
      initFields();
    }
    private HeroDigestListRequest(boolean noInit) {}
    
    private static final HeroDigestListRequest defaultInstance;
    public static HeroDigestListRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public HeroDigestListRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestListRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestListRequest_fieldAccessorTable;
    }
    
    // repeated .D3.OnlineService.EntityId toon_id = 1;
    public static final int TOON_ID_FIELD_NUMBER = 1;
    private java.util.List<D3.OnlineService.OnlineService.EntityId> toonId_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.OnlineService.OnlineService.EntityId> getToonIdList() {
      return toonId_;
    }
    public int getToonIdCount() { return toonId_.size(); }
    public D3.OnlineService.OnlineService.EntityId getToonId(int index) {
      return toonId_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (D3.OnlineService.OnlineService.EntityId element : getToonIdList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (D3.OnlineService.OnlineService.EntityId element : getToonIdList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (D3.OnlineService.OnlineService.EntityId element : getToonIdList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.HeroDigestListRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.HeroDigestListRequest result;
      
      // Construct using D3.GameMessage.GameMessage.HeroDigestListRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.HeroDigestListRequest();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.HeroDigestListRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.HeroDigestListRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.HeroDigestListRequest.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestListRequest getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.HeroDigestListRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.HeroDigestListRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.HeroDigestListRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestListRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.toonId_ != java.util.Collections.EMPTY_LIST) {
          result.toonId_ =
            java.util.Collections.unmodifiableList(result.toonId_);
        }
        D3.GameMessage.GameMessage.HeroDigestListRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.HeroDigestListRequest) {
          return mergeFrom((D3.GameMessage.GameMessage.HeroDigestListRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.HeroDigestListRequest other) {
        if (other == D3.GameMessage.GameMessage.HeroDigestListRequest.getDefaultInstance()) return this;
        if (!other.toonId_.isEmpty()) {
          if (result.toonId_.isEmpty()) {
            result.toonId_ = new java.util.ArrayList<D3.OnlineService.OnlineService.EntityId>();
          }
          result.toonId_.addAll(other.toonId_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addToonId(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .D3.OnlineService.EntityId toon_id = 1;
      public java.util.List<D3.OnlineService.OnlineService.EntityId> getToonIdList() {
        return java.util.Collections.unmodifiableList(result.toonId_);
      }
      public int getToonIdCount() {
        return result.getToonIdCount();
      }
      public D3.OnlineService.OnlineService.EntityId getToonId(int index) {
        return result.getToonId(index);
      }
      public Builder setToonId(int index, D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.toonId_.set(index, value);
        return this;
      }
      public Builder setToonId(int index, D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.toonId_.set(index, builderForValue.build());
        return this;
      }
      public Builder addToonId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.toonId_.isEmpty()) {
          result.toonId_ = new java.util.ArrayList<D3.OnlineService.OnlineService.EntityId>();
        }
        result.toonId_.add(value);
        return this;
      }
      public Builder addToonId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        if (result.toonId_.isEmpty()) {
          result.toonId_ = new java.util.ArrayList<D3.OnlineService.OnlineService.EntityId>();
        }
        result.toonId_.add(builderForValue.build());
        return this;
      }
      public Builder addAllToonId(
          java.lang.Iterable<? extends D3.OnlineService.OnlineService.EntityId> values) {
        if (result.toonId_.isEmpty()) {
          result.toonId_ = new java.util.ArrayList<D3.OnlineService.OnlineService.EntityId>();
        }
        super.addAll(values, result.toonId_);
        return this;
      }
      public Builder clearToonId() {
        result.toonId_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.HeroDigestListRequest)
    }
    
    static {
      defaultInstance = new HeroDigestListRequest(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestListRequest)
  }
  
  public static final class HeroDigestResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use HeroDigestResponse.newBuilder() to construct.
    private HeroDigestResponse() {
      initFields();
    }
    private HeroDigestResponse(boolean noInit) {}
    
    private static final HeroDigestResponse defaultInstance;
    public static HeroDigestResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public HeroDigestResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestResponse_fieldAccessorTable;
    }
    
    // required .D3.OnlineService.EntityId toon_id = 1;
    public static final int TOON_ID_FIELD_NUMBER = 1;
    private boolean hasToonId;
    private D3.OnlineService.OnlineService.EntityId toonId_;
    public boolean hasToonId() { return hasToonId; }
    public D3.OnlineService.OnlineService.EntityId getToonId() { return toonId_; }
    
    // required bool success = 2;
    public static final int SUCCESS_FIELD_NUMBER = 2;
    private boolean hasSuccess;
    private boolean success_ = false;
    public boolean hasSuccess() { return hasSuccess; }
    public boolean getSuccess() { return success_; }
    
    // optional .D3.Hero.Digest hero_digest = 3;
    public static final int HERO_DIGEST_FIELD_NUMBER = 3;
    private boolean hasHeroDigest;
    private D3.Hero.Hero.Digest heroDigest_;
    public boolean hasHeroDigest() { return hasHeroDigest; }
    public D3.Hero.Hero.Digest getHeroDigest() { return heroDigest_; }
    
    private void initFields() {
      toonId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      heroDigest_ = D3.Hero.Hero.Digest.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasToonId) return false;
      if (!hasSuccess) return false;
      if (!getToonId().isInitialized()) return false;
      if (hasHeroDigest()) {
        if (!getHeroDigest().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasToonId()) {
        output.writeMessage(1, getToonId());
      }
      if (hasSuccess()) {
        output.writeBool(2, getSuccess());
      }
      if (hasHeroDigest()) {
        output.writeMessage(3, getHeroDigest());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasToonId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getToonId());
      }
      if (hasSuccess()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getSuccess());
      }
      if (hasHeroDigest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getHeroDigest());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.HeroDigestResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.HeroDigestResponse result;
      
      // Construct using D3.GameMessage.GameMessage.HeroDigestResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.HeroDigestResponse();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.HeroDigestResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.HeroDigestResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.HeroDigestResponse.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestResponse getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.HeroDigestResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.HeroDigestResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.HeroDigestResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.GameMessage.GameMessage.HeroDigestResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.HeroDigestResponse) {
          return mergeFrom((D3.GameMessage.GameMessage.HeroDigestResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.HeroDigestResponse other) {
        if (other == D3.GameMessage.GameMessage.HeroDigestResponse.getDefaultInstance()) return this;
        if (other.hasToonId()) {
          mergeToonId(other.getToonId());
        }
        if (other.hasSuccess()) {
          setSuccess(other.getSuccess());
        }
        if (other.hasHeroDigest()) {
          mergeHeroDigest(other.getHeroDigest());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasToonId()) {
                subBuilder.mergeFrom(getToonId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToonId(subBuilder.buildPartial());
              break;
            }
            case 16: {
              setSuccess(input.readBool());
              break;
            }
            case 26: {
              D3.Hero.Hero.Digest.Builder subBuilder = D3.Hero.Hero.Digest.newBuilder();
              if (hasHeroDigest()) {
                subBuilder.mergeFrom(getHeroDigest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeroDigest(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.OnlineService.EntityId toon_id = 1;
      public boolean hasToonId() {
        return result.hasToonId();
      }
      public D3.OnlineService.OnlineService.EntityId getToonId() {
        return result.getToonId();
      }
      public Builder setToonId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder setToonId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasToonId = true;
        result.toonId_ = builderForValue.build();
        return this;
      }
      public Builder mergeToonId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasToonId() &&
            result.toonId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.toonId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.toonId_).mergeFrom(value).buildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder clearToonId() {
        result.hasToonId = false;
        result.toonId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // required bool success = 2;
      public boolean hasSuccess() {
        return result.hasSuccess();
      }
      public boolean getSuccess() {
        return result.getSuccess();
      }
      public Builder setSuccess(boolean value) {
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder clearSuccess() {
        result.hasSuccess = false;
        result.success_ = false;
        return this;
      }
      
      // optional .D3.Hero.Digest hero_digest = 3;
      public boolean hasHeroDigest() {
        return result.hasHeroDigest();
      }
      public D3.Hero.Hero.Digest getHeroDigest() {
        return result.getHeroDigest();
      }
      public Builder setHeroDigest(D3.Hero.Hero.Digest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder setHeroDigest(D3.Hero.Hero.Digest.Builder builderForValue) {
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeroDigest(D3.Hero.Hero.Digest value) {
        if (result.hasHeroDigest() &&
            result.heroDigest_ != D3.Hero.Hero.Digest.getDefaultInstance()) {
          result.heroDigest_ =
            D3.Hero.Hero.Digest.newBuilder(result.heroDigest_).mergeFrom(value).buildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder clearHeroDigest() {
        result.hasHeroDigest = false;
        result.heroDigest_ = D3.Hero.Hero.Digest.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.HeroDigestResponse)
    }
    
    static {
      defaultInstance = new HeroDigestResponse(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestResponse)
  }
  
  public static final class HeroDigestListResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use HeroDigestListResponse.newBuilder() to construct.
    private HeroDigestListResponse() {
      initFields();
    }
    private HeroDigestListResponse(boolean noInit) {}
    
    private static final HeroDigestListResponse defaultInstance;
    public static HeroDigestListResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public HeroDigestListResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestListResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestListResponse_fieldAccessorTable;
    }
    
    // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
    public static final int DIGEST_LIST_FIELD_NUMBER = 1;
    private java.util.List<D3.GameMessage.GameMessage.HeroDigestResponse> digestList_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.GameMessage.GameMessage.HeroDigestResponse> getDigestListList() {
      return digestList_;
    }
    public int getDigestListCount() { return digestList_.size(); }
    public D3.GameMessage.GameMessage.HeroDigestResponse getDigestList(int index) {
      return digestList_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (D3.GameMessage.GameMessage.HeroDigestResponse element : getDigestListList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (D3.GameMessage.GameMessage.HeroDigestResponse element : getDigestListList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (D3.GameMessage.GameMessage.HeroDigestResponse element : getDigestListList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestListResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.HeroDigestListResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.HeroDigestListResponse result;
      
      // Construct using D3.GameMessage.GameMessage.HeroDigestListResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.HeroDigestListResponse();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.HeroDigestListResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.HeroDigestListResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.HeroDigestListResponse.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestListResponse getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.HeroDigestListResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.HeroDigestListResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.HeroDigestListResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestListResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.digestList_ != java.util.Collections.EMPTY_LIST) {
          result.digestList_ =
            java.util.Collections.unmodifiableList(result.digestList_);
        }
        D3.GameMessage.GameMessage.HeroDigestListResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.HeroDigestListResponse) {
          return mergeFrom((D3.GameMessage.GameMessage.HeroDigestListResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.HeroDigestListResponse other) {
        if (other == D3.GameMessage.GameMessage.HeroDigestListResponse.getDefaultInstance()) return this;
        if (!other.digestList_.isEmpty()) {
          if (result.digestList_.isEmpty()) {
            result.digestList_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestResponse>();
          }
          result.digestList_.addAll(other.digestList_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.GameMessage.GameMessage.HeroDigestResponse.Builder subBuilder = D3.GameMessage.GameMessage.HeroDigestResponse.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addDigestList(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .D3.GameMessage.HeroDigestResponse digest_list = 1;
      public java.util.List<D3.GameMessage.GameMessage.HeroDigestResponse> getDigestListList() {
        return java.util.Collections.unmodifiableList(result.digestList_);
      }
      public int getDigestListCount() {
        return result.getDigestListCount();
      }
      public D3.GameMessage.GameMessage.HeroDigestResponse getDigestList(int index) {
        return result.getDigestList(index);
      }
      public Builder setDigestList(int index, D3.GameMessage.GameMessage.HeroDigestResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.digestList_.set(index, value);
        return this;
      }
      public Builder setDigestList(int index, D3.GameMessage.GameMessage.HeroDigestResponse.Builder builderForValue) {
        result.digestList_.set(index, builderForValue.build());
        return this;
      }
      public Builder addDigestList(D3.GameMessage.GameMessage.HeroDigestResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.digestList_.isEmpty()) {
          result.digestList_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestResponse>();
        }
        result.digestList_.add(value);
        return this;
      }
      public Builder addDigestList(D3.GameMessage.GameMessage.HeroDigestResponse.Builder builderForValue) {
        if (result.digestList_.isEmpty()) {
          result.digestList_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestResponse>();
        }
        result.digestList_.add(builderForValue.build());
        return this;
      }
      public Builder addAllDigestList(
          java.lang.Iterable<? extends D3.GameMessage.GameMessage.HeroDigestResponse> values) {
        if (result.digestList_.isEmpty()) {
          result.digestList_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestResponse>();
        }
        super.addAll(values, result.digestList_);
        return this;
      }
      public Builder clearDigestList() {
        result.digestList_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.HeroDigestListResponse)
    }
    
    static {
      defaultInstance = new HeroDigestListResponse(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestListResponse)
  }
  
  public static final class PlayerBanner extends
      com.google.protobuf.GeneratedMessage {
    // Use PlayerBanner.newBuilder() to construct.
    private PlayerBanner() {
      initFields();
    }
    private PlayerBanner(boolean noInit) {}
    
    private static final PlayerBanner defaultInstance;
    public static PlayerBanner getDefaultInstance() {
      return defaultInstance;
    }
    
    public PlayerBanner getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_PlayerBanner_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_PlayerBanner_fieldAccessorTable;
    }
    
    // required uint32 player_index = 1;
    public static final int PLAYER_INDEX_FIELD_NUMBER = 1;
    private boolean hasPlayerIndex;
    private int playerIndex_ = 0;
    public boolean hasPlayerIndex() { return hasPlayerIndex; }
    public int getPlayerIndex() { return playerIndex_; }
    
    // required .D3.Account.BannerConfiguration banner = 2;
    public static final int BANNER_FIELD_NUMBER = 2;
    private boolean hasBanner;
    private D3.Account.Account.BannerConfiguration banner_;
    public boolean hasBanner() { return hasBanner; }
    public D3.Account.Account.BannerConfiguration getBanner() { return banner_; }
    
    private void initFields() {
      banner_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasPlayerIndex) return false;
      if (!hasBanner) return false;
      if (!getBanner().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasPlayerIndex()) {
        output.writeUInt32(1, getPlayerIndex());
      }
      if (hasBanner()) {
        output.writeMessage(2, getBanner());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasPlayerIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getPlayerIndex());
      }
      if (hasBanner()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getBanner());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.PlayerBanner parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.PlayerBanner prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.PlayerBanner result;
      
      // Construct using D3.GameMessage.GameMessage.PlayerBanner.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.PlayerBanner();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.PlayerBanner internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.PlayerBanner();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.PlayerBanner.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.PlayerBanner getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.PlayerBanner.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.PlayerBanner build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.PlayerBanner buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.PlayerBanner buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.GameMessage.GameMessage.PlayerBanner returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.PlayerBanner) {
          return mergeFrom((D3.GameMessage.GameMessage.PlayerBanner)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.PlayerBanner other) {
        if (other == D3.GameMessage.GameMessage.PlayerBanner.getDefaultInstance()) return this;
        if (other.hasPlayerIndex()) {
          setPlayerIndex(other.getPlayerIndex());
        }
        if (other.hasBanner()) {
          mergeBanner(other.getBanner());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setPlayerIndex(input.readUInt32());
              break;
            }
            case 18: {
              D3.Account.Account.BannerConfiguration.Builder subBuilder = D3.Account.Account.BannerConfiguration.newBuilder();
              if (hasBanner()) {
                subBuilder.mergeFrom(getBanner());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBanner(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required uint32 player_index = 1;
      public boolean hasPlayerIndex() {
        return result.hasPlayerIndex();
      }
      public int getPlayerIndex() {
        return result.getPlayerIndex();
      }
      public Builder setPlayerIndex(int value) {
        result.hasPlayerIndex = true;
        result.playerIndex_ = value;
        return this;
      }
      public Builder clearPlayerIndex() {
        result.hasPlayerIndex = false;
        result.playerIndex_ = 0;
        return this;
      }
      
      // required .D3.Account.BannerConfiguration banner = 2;
      public boolean hasBanner() {
        return result.hasBanner();
      }
      public D3.Account.Account.BannerConfiguration getBanner() {
        return result.getBanner();
      }
      public Builder setBanner(D3.Account.Account.BannerConfiguration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder setBanner(D3.Account.Account.BannerConfiguration.Builder builderForValue) {
        result.hasBanner = true;
        result.banner_ = builderForValue.build();
        return this;
      }
      public Builder mergeBanner(D3.Account.Account.BannerConfiguration value) {
        if (result.hasBanner() &&
            result.banner_ != D3.Account.Account.BannerConfiguration.getDefaultInstance()) {
          result.banner_ =
            D3.Account.Account.BannerConfiguration.newBuilder(result.banner_).mergeFrom(value).buildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder clearBanner() {
        result.hasBanner = false;
        result.banner_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.PlayerBanner)
    }
    
    static {
      defaultInstance = new PlayerBanner(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.PlayerBanner)
  }
  
  public static final class SaveBannerConfiguration extends
      com.google.protobuf.GeneratedMessage {
    // Use SaveBannerConfiguration.newBuilder() to construct.
    private SaveBannerConfiguration() {
      initFields();
    }
    private SaveBannerConfiguration(boolean noInit) {}
    
    private static final SaveBannerConfiguration defaultInstance;
    public static SaveBannerConfiguration getDefaultInstance() {
      return defaultInstance;
    }
    
    public SaveBannerConfiguration getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_SaveBannerConfiguration_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_SaveBannerConfiguration_fieldAccessorTable;
    }
    
    // required .D3.Account.BannerConfiguration banner = 1;
    public static final int BANNER_FIELD_NUMBER = 1;
    private boolean hasBanner;
    private D3.Account.Account.BannerConfiguration banner_;
    public boolean hasBanner() { return hasBanner; }
    public D3.Account.Account.BannerConfiguration getBanner() { return banner_; }
    
    // optional uint32 slot_index = 2;
    public static final int SLOT_INDEX_FIELD_NUMBER = 2;
    private boolean hasSlotIndex;
    private int slotIndex_ = 0;
    public boolean hasSlotIndex() { return hasSlotIndex; }
    public int getSlotIndex() { return slotIndex_; }
    
    // optional bool make_active = 3;
    public static final int MAKE_ACTIVE_FIELD_NUMBER = 3;
    private boolean hasMakeActive;
    private boolean makeActive_ = false;
    public boolean hasMakeActive() { return hasMakeActive; }
    public boolean getMakeActive() { return makeActive_; }
    
    private void initFields() {
      banner_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasBanner) return false;
      if (!getBanner().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasBanner()) {
        output.writeMessage(1, getBanner());
      }
      if (hasSlotIndex()) {
        output.writeUInt32(2, getSlotIndex());
      }
      if (hasMakeActive()) {
        output.writeBool(3, getMakeActive());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasBanner()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBanner());
      }
      if (hasSlotIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, getSlotIndex());
      }
      if (hasMakeActive()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getMakeActive());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.SaveBannerConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.SaveBannerConfiguration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.SaveBannerConfiguration result;
      
      // Construct using D3.GameMessage.GameMessage.SaveBannerConfiguration.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.SaveBannerConfiguration();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.SaveBannerConfiguration internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.SaveBannerConfiguration();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.SaveBannerConfiguration.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.SaveBannerConfiguration getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.SaveBannerConfiguration.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.SaveBannerConfiguration build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.SaveBannerConfiguration buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.SaveBannerConfiguration buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.GameMessage.GameMessage.SaveBannerConfiguration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.SaveBannerConfiguration) {
          return mergeFrom((D3.GameMessage.GameMessage.SaveBannerConfiguration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.SaveBannerConfiguration other) {
        if (other == D3.GameMessage.GameMessage.SaveBannerConfiguration.getDefaultInstance()) return this;
        if (other.hasBanner()) {
          mergeBanner(other.getBanner());
        }
        if (other.hasSlotIndex()) {
          setSlotIndex(other.getSlotIndex());
        }
        if (other.hasMakeActive()) {
          setMakeActive(other.getMakeActive());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.Account.Account.BannerConfiguration.Builder subBuilder = D3.Account.Account.BannerConfiguration.newBuilder();
              if (hasBanner()) {
                subBuilder.mergeFrom(getBanner());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBanner(subBuilder.buildPartial());
              break;
            }
            case 16: {
              setSlotIndex(input.readUInt32());
              break;
            }
            case 24: {
              setMakeActive(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // required .D3.Account.BannerConfiguration banner = 1;
      public boolean hasBanner() {
        return result.hasBanner();
      }
      public D3.Account.Account.BannerConfiguration getBanner() {
        return result.getBanner();
      }
      public Builder setBanner(D3.Account.Account.BannerConfiguration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder setBanner(D3.Account.Account.BannerConfiguration.Builder builderForValue) {
        result.hasBanner = true;
        result.banner_ = builderForValue.build();
        return this;
      }
      public Builder mergeBanner(D3.Account.Account.BannerConfiguration value) {
        if (result.hasBanner() &&
            result.banner_ != D3.Account.Account.BannerConfiguration.getDefaultInstance()) {
          result.banner_ =
            D3.Account.Account.BannerConfiguration.newBuilder(result.banner_).mergeFrom(value).buildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder clearBanner() {
        result.hasBanner = false;
        result.banner_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
        return this;
      }
      
      // optional uint32 slot_index = 2;
      public boolean hasSlotIndex() {
        return result.hasSlotIndex();
      }
      public int getSlotIndex() {
        return result.getSlotIndex();
      }
      public Builder setSlotIndex(int value) {
        result.hasSlotIndex = true;
        result.slotIndex_ = value;
        return this;
      }
      public Builder clearSlotIndex() {
        result.hasSlotIndex = false;
        result.slotIndex_ = 0;
        return this;
      }
      
      // optional bool make_active = 3;
      public boolean hasMakeActive() {
        return result.hasMakeActive();
      }
      public boolean getMakeActive() {
        return result.getMakeActive();
      }
      public Builder setMakeActive(boolean value) {
        result.hasMakeActive = true;
        result.makeActive_ = value;
        return this;
      }
      public Builder clearMakeActive() {
        result.hasMakeActive = false;
        result.makeActive_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.SaveBannerConfiguration)
    }
    
    static {
      defaultInstance = new SaveBannerConfiguration(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.SaveBannerConfiguration)
  }
  
  public static final class HeroDigestBanner extends
      com.google.protobuf.GeneratedMessage {
    // Use HeroDigestBanner.newBuilder() to construct.
    private HeroDigestBanner() {
      initFields();
    }
    private HeroDigestBanner(boolean noInit) {}
    
    private static final HeroDigestBanner defaultInstance;
    public static HeroDigestBanner getDefaultInstance() {
      return defaultInstance;
    }
    
    public HeroDigestBanner getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestBanner_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_HeroDigestBanner_fieldAccessorTable;
    }
    
    // required .D3.Hero.Digest hero_digest = 1;
    public static final int HERO_DIGEST_FIELD_NUMBER = 1;
    private boolean hasHeroDigest;
    private D3.Hero.Hero.Digest heroDigest_;
    public boolean hasHeroDigest() { return hasHeroDigest; }
    public D3.Hero.Hero.Digest getHeroDigest() { return heroDigest_; }
    
    // required .D3.Account.BannerConfiguration banner = 2;
    public static final int BANNER_FIELD_NUMBER = 2;
    private boolean hasBanner;
    private D3.Account.Account.BannerConfiguration banner_;
    public boolean hasBanner() { return hasBanner; }
    public D3.Account.Account.BannerConfiguration getBanner() { return banner_; }
    
    private void initFields() {
      heroDigest_ = D3.Hero.Hero.Digest.getDefaultInstance();
      banner_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasHeroDigest) return false;
      if (!hasBanner) return false;
      if (!getHeroDigest().isInitialized()) return false;
      if (!getBanner().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasHeroDigest()) {
        output.writeMessage(1, getHeroDigest());
      }
      if (hasBanner()) {
        output.writeMessage(2, getBanner());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasHeroDigest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeroDigest());
      }
      if (hasBanner()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getBanner());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.HeroDigestBanner parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.HeroDigestBanner prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.HeroDigestBanner result;
      
      // Construct using D3.GameMessage.GameMessage.HeroDigestBanner.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.HeroDigestBanner();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.HeroDigestBanner internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.HeroDigestBanner();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.HeroDigestBanner.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestBanner getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.HeroDigestBanner.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.HeroDigestBanner build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.HeroDigestBanner buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.HeroDigestBanner buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.GameMessage.GameMessage.HeroDigestBanner returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.HeroDigestBanner) {
          return mergeFrom((D3.GameMessage.GameMessage.HeroDigestBanner)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.HeroDigestBanner other) {
        if (other == D3.GameMessage.GameMessage.HeroDigestBanner.getDefaultInstance()) return this;
        if (other.hasHeroDigest()) {
          mergeHeroDigest(other.getHeroDigest());
        }
        if (other.hasBanner()) {
          mergeBanner(other.getBanner());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.Hero.Hero.Digest.Builder subBuilder = D3.Hero.Hero.Digest.newBuilder();
              if (hasHeroDigest()) {
                subBuilder.mergeFrom(getHeroDigest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHeroDigest(subBuilder.buildPartial());
              break;
            }
            case 18: {
              D3.Account.Account.BannerConfiguration.Builder subBuilder = D3.Account.Account.BannerConfiguration.newBuilder();
              if (hasBanner()) {
                subBuilder.mergeFrom(getBanner());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBanner(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .D3.Hero.Digest hero_digest = 1;
      public boolean hasHeroDigest() {
        return result.hasHeroDigest();
      }
      public D3.Hero.Hero.Digest getHeroDigest() {
        return result.getHeroDigest();
      }
      public Builder setHeroDigest(D3.Hero.Hero.Digest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHeroDigest = true;
        result.heroDigest_ = value;
        return this;
      }
      public Builder setHeroDigest(D3.Hero.Hero.Digest.Builder builderForValue) {
        result.hasHeroDigest = true;
        result.heroDigest_ = builderForValue.build();
        return this;
      }
      public Builder mergeHeroDigest(D3.Hero.Hero.Digest value) {
        if (result.hasHeroDigest() &&
            result.heroDigest_ != D3.Hero.Hero.Digest.getDefaultInstance()) {
          result.heroDigest_ =
            D3.Hero.Hero.Digest.newBuilder(result.heroDigest_).mergeFrom(value).buildPartial();
        } else {
          result.heroDigest_ = value;
        }
        result.hasHeroDigest = true;
        return this;
      }
      public Builder clearHeroDigest() {
        result.hasHeroDigest = false;
        result.heroDigest_ = D3.Hero.Hero.Digest.getDefaultInstance();
        return this;
      }
      
      // required .D3.Account.BannerConfiguration banner = 2;
      public boolean hasBanner() {
        return result.hasBanner();
      }
      public D3.Account.Account.BannerConfiguration getBanner() {
        return result.getBanner();
      }
      public Builder setBanner(D3.Account.Account.BannerConfiguration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBanner = true;
        result.banner_ = value;
        return this;
      }
      public Builder setBanner(D3.Account.Account.BannerConfiguration.Builder builderForValue) {
        result.hasBanner = true;
        result.banner_ = builderForValue.build();
        return this;
      }
      public Builder mergeBanner(D3.Account.Account.BannerConfiguration value) {
        if (result.hasBanner() &&
            result.banner_ != D3.Account.Account.BannerConfiguration.getDefaultInstance()) {
          result.banner_ =
            D3.Account.Account.BannerConfiguration.newBuilder(result.banner_).mergeFrom(value).buildPartial();
        } else {
          result.banner_ = value;
        }
        result.hasBanner = true;
        return this;
      }
      public Builder clearBanner() {
        result.hasBanner = false;
        result.banner_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.HeroDigestBanner)
    }
    
    static {
      defaultInstance = new HeroDigestBanner(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.HeroDigestBanner)
  }
  
  public static final class GameCurrentPlayers extends
      com.google.protobuf.GeneratedMessage {
    // Use GameCurrentPlayers.newBuilder() to construct.
    private GameCurrentPlayers() {
      initFields();
    }
    private GameCurrentPlayers(boolean noInit) {}
    
    private static final GameCurrentPlayers defaultInstance;
    public static GameCurrentPlayers getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameCurrentPlayers getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_GameCurrentPlayers_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.GameMessage.GameMessage.internal_static_D3_GameMessage_GameCurrentPlayers_fieldAccessorTable;
    }
    
    // repeated .D3.GameMessage.HeroDigestBanner players = 1;
    public static final int PLAYERS_FIELD_NUMBER = 1;
    private java.util.List<D3.GameMessage.GameMessage.HeroDigestBanner> players_ =
      java.util.Collections.emptyList();
    public java.util.List<D3.GameMessage.GameMessage.HeroDigestBanner> getPlayersList() {
      return players_;
    }
    public int getPlayersCount() { return players_.size(); }
    public D3.GameMessage.GameMessage.HeroDigestBanner getPlayers(int index) {
      return players_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (D3.GameMessage.GameMessage.HeroDigestBanner element : getPlayersList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (D3.GameMessage.GameMessage.HeroDigestBanner element : getPlayersList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (D3.GameMessage.GameMessage.HeroDigestBanner element : getPlayersList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.GameMessage.GameMessage.GameCurrentPlayers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.GameMessage.GameMessage.GameCurrentPlayers prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.GameMessage.GameMessage.GameCurrentPlayers result;
      
      // Construct using D3.GameMessage.GameMessage.GameCurrentPlayers.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.GameMessage.GameMessage.GameCurrentPlayers();
        return builder;
      }
      
      protected D3.GameMessage.GameMessage.GameCurrentPlayers internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.GameMessage.GameMessage.GameCurrentPlayers();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.GameMessage.GameMessage.GameCurrentPlayers.getDescriptor();
      }
      
      public D3.GameMessage.GameMessage.GameCurrentPlayers getDefaultInstanceForType() {
        return D3.GameMessage.GameMessage.GameCurrentPlayers.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.GameMessage.GameMessage.GameCurrentPlayers build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.GameMessage.GameMessage.GameCurrentPlayers buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.GameMessage.GameMessage.GameCurrentPlayers buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.players_ != java.util.Collections.EMPTY_LIST) {
          result.players_ =
            java.util.Collections.unmodifiableList(result.players_);
        }
        D3.GameMessage.GameMessage.GameCurrentPlayers returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.GameMessage.GameMessage.GameCurrentPlayers) {
          return mergeFrom((D3.GameMessage.GameMessage.GameCurrentPlayers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.GameMessage.GameMessage.GameCurrentPlayers other) {
        if (other == D3.GameMessage.GameMessage.GameCurrentPlayers.getDefaultInstance()) return this;
        if (!other.players_.isEmpty()) {
          if (result.players_.isEmpty()) {
            result.players_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestBanner>();
          }
          result.players_.addAll(other.players_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              D3.GameMessage.GameMessage.HeroDigestBanner.Builder subBuilder = D3.GameMessage.GameMessage.HeroDigestBanner.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPlayers(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .D3.GameMessage.HeroDigestBanner players = 1;
      public java.util.List<D3.GameMessage.GameMessage.HeroDigestBanner> getPlayersList() {
        return java.util.Collections.unmodifiableList(result.players_);
      }
      public int getPlayersCount() {
        return result.getPlayersCount();
      }
      public D3.GameMessage.GameMessage.HeroDigestBanner getPlayers(int index) {
        return result.getPlayers(index);
      }
      public Builder setPlayers(int index, D3.GameMessage.GameMessage.HeroDigestBanner value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.players_.set(index, value);
        return this;
      }
      public Builder setPlayers(int index, D3.GameMessage.GameMessage.HeroDigestBanner.Builder builderForValue) {
        result.players_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPlayers(D3.GameMessage.GameMessage.HeroDigestBanner value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.players_.isEmpty()) {
          result.players_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestBanner>();
        }
        result.players_.add(value);
        return this;
      }
      public Builder addPlayers(D3.GameMessage.GameMessage.HeroDigestBanner.Builder builderForValue) {
        if (result.players_.isEmpty()) {
          result.players_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestBanner>();
        }
        result.players_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPlayers(
          java.lang.Iterable<? extends D3.GameMessage.GameMessage.HeroDigestBanner> values) {
        if (result.players_.isEmpty()) {
          result.players_ = new java.util.ArrayList<D3.GameMessage.GameMessage.HeroDigestBanner>();
        }
        super.addAll(values, result.players_);
        return this;
      }
      public Builder clearPlayers() {
        result.players_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.GameMessage.GameCurrentPlayers)
    }
    
    static {
      defaultInstance = new GameCurrentPlayers(true);
      D3.GameMessage.GameMessage.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.GameMessage.GameCurrentPlayers)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_HeroDigestList_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_HeroDigestList_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_ClientToonSettings_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_ClientToonSettings_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_HeroDigestListRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_HeroDigestListRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_HeroDigestResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_HeroDigestResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_HeroDigestListResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_HeroDigestListResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_PlayerBanner_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_PlayerBanner_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_SaveBannerConfiguration_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_SaveBannerConfiguration_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_HeroDigestBanner_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_HeroDigestBanner_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_GameMessage_GameCurrentPlayers_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_GameMessage_GameCurrentPlayers_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021GameMessage.proto\022\016D3.GameMessage\032\nHer" +
      "o.proto\032\023OnlineService.proto\032\016Settings.p" +
      "roto\032\rAccount.proto\"f\n\016HeroDigestList\022.\n" +
      "\naccount_id\030\001 \002(\0132\032.D3.OnlineService.Ent" +
      "ityId\022$\n\013digest_list\030\002 \003(\0132\017.D3.Hero.Dig" +
      "est\"x\n\022ClientToonSettings\022+\n\007toon_id\030\001 \002" +
      "(\0132\032.D3.OnlineService.EntityId\0225\n\024client" +
      "_toon_settings\030\002 \002(\0132\027.D3.Client.ToonSet" +
      "tings\"D\n\025HeroDigestListRequest\022+\n\007toon_i" +
      "d\030\001 \003(\0132\032.D3.OnlineService.EntityId\"x\n\022H",
      "eroDigestResponse\022+\n\007toon_id\030\001 \002(\0132\032.D3." +
      "OnlineService.EntityId\022\017\n\007success\030\002 \002(\010\022" +
      "$\n\013hero_digest\030\003 \001(\0132\017.D3.Hero.Digest\"Q\n" +
      "\026HeroDigestListResponse\0227\n\013digest_list\030\001" +
      " \003(\0132\".D3.GameMessage.HeroDigestResponse" +
      "\"U\n\014PlayerBanner\022\024\n\014player_index\030\001 \002(\r\022/" +
      "\n\006banner\030\002 \002(\0132\037.D3.Account.BannerConfig" +
      "uration\"s\n\027SaveBannerConfiguration\022/\n\006ba" +
      "nner\030\001 \002(\0132\037.D3.Account.BannerConfigurat" +
      "ion\022\022\n\nslot_index\030\002 \001(\r\022\023\n\013make_active\030\003",
      " \001(\010\"i\n\020HeroDigestBanner\022$\n\013hero_digest\030" +
      "\001 \002(\0132\017.D3.Hero.Digest\022/\n\006banner\030\002 \002(\0132\037" +
      ".D3.Account.BannerConfiguration\"G\n\022GameC" +
      "urrentPlayers\0221\n\007players\030\001 \003(\0132 .D3.Game" +
      "Message.HeroDigestBanner"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_GameMessage_HeroDigestList_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_GameMessage_HeroDigestList_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_HeroDigestList_descriptor,
              new java.lang.String[] { "AccountId", "DigestList", },
              D3.GameMessage.GameMessage.HeroDigestList.class,
              D3.GameMessage.GameMessage.HeroDigestList.Builder.class);
          internal_static_D3_GameMessage_ClientToonSettings_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_D3_GameMessage_ClientToonSettings_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_ClientToonSettings_descriptor,
              new java.lang.String[] { "ToonId", "ClientToonSettings", },
              D3.GameMessage.GameMessage.ClientToonSettings.class,
              D3.GameMessage.GameMessage.ClientToonSettings.Builder.class);
          internal_static_D3_GameMessage_HeroDigestListRequest_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_D3_GameMessage_HeroDigestListRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_HeroDigestListRequest_descriptor,
              new java.lang.String[] { "ToonId", },
              D3.GameMessage.GameMessage.HeroDigestListRequest.class,
              D3.GameMessage.GameMessage.HeroDigestListRequest.Builder.class);
          internal_static_D3_GameMessage_HeroDigestResponse_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_D3_GameMessage_HeroDigestResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_HeroDigestResponse_descriptor,
              new java.lang.String[] { "ToonId", "Success", "HeroDigest", },
              D3.GameMessage.GameMessage.HeroDigestResponse.class,
              D3.GameMessage.GameMessage.HeroDigestResponse.Builder.class);
          internal_static_D3_GameMessage_HeroDigestListResponse_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_D3_GameMessage_HeroDigestListResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_HeroDigestListResponse_descriptor,
              new java.lang.String[] { "DigestList", },
              D3.GameMessage.GameMessage.HeroDigestListResponse.class,
              D3.GameMessage.GameMessage.HeroDigestListResponse.Builder.class);
          internal_static_D3_GameMessage_PlayerBanner_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_D3_GameMessage_PlayerBanner_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_PlayerBanner_descriptor,
              new java.lang.String[] { "PlayerIndex", "Banner", },
              D3.GameMessage.GameMessage.PlayerBanner.class,
              D3.GameMessage.GameMessage.PlayerBanner.Builder.class);
          internal_static_D3_GameMessage_SaveBannerConfiguration_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_D3_GameMessage_SaveBannerConfiguration_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_SaveBannerConfiguration_descriptor,
              new java.lang.String[] { "Banner", "SlotIndex", "MakeActive", },
              D3.GameMessage.GameMessage.SaveBannerConfiguration.class,
              D3.GameMessage.GameMessage.SaveBannerConfiguration.Builder.class);
          internal_static_D3_GameMessage_HeroDigestBanner_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_D3_GameMessage_HeroDigestBanner_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_HeroDigestBanner_descriptor,
              new java.lang.String[] { "HeroDigest", "Banner", },
              D3.GameMessage.GameMessage.HeroDigestBanner.class,
              D3.GameMessage.GameMessage.HeroDigestBanner.Builder.class);
          internal_static_D3_GameMessage_GameCurrentPlayers_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_D3_GameMessage_GameCurrentPlayers_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_GameMessage_GameCurrentPlayers_descriptor,
              new java.lang.String[] { "Players", },
              D3.GameMessage.GameMessage.GameCurrentPlayers.class,
              D3.GameMessage.GameMessage.GameCurrentPlayers.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          D3.Hero.Hero.getDescriptor(),
          D3.OnlineService.OnlineService.getDescriptor(),
          D3.Client.Settings.getDescriptor(),
          D3.Account.Account.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
