// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Account.proto

package D3.Account;

public final class Account {
  private Account() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class BannerConfiguration extends
      com.google.protobuf.GeneratedMessage {
    // Use BannerConfiguration.newBuilder() to construct.
    private BannerConfiguration() {
      initFields();
    }
    private BannerConfiguration(boolean noInit) {}
    
    private static final BannerConfiguration defaultInstance;
    public static BannerConfiguration getDefaultInstance() {
      return defaultInstance;
    }
    
    public BannerConfiguration getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Account.Account.internal_static_D3_Account_BannerConfiguration_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Account.Account.internal_static_D3_Account_BannerConfiguration_fieldAccessorTable;
    }
    
    // required uint32 banner_index = 1;
    public static final int BANNER_INDEX_FIELD_NUMBER = 1;
    private boolean hasBannerIndex;
    private int bannerIndex_ = 0;
    public boolean hasBannerIndex() { return hasBannerIndex; }
    public int getBannerIndex() { return bannerIndex_; }
    
    // required int32 sigil_main = 2;
    public static final int SIGIL_MAIN_FIELD_NUMBER = 2;
    private boolean hasSigilMain;
    private int sigilMain_ = 0;
    public boolean hasSigilMain() { return hasSigilMain; }
    public int getSigilMain() { return sigilMain_; }
    
    // required int32 sigil_accent = 3;
    public static final int SIGIL_ACCENT_FIELD_NUMBER = 3;
    private boolean hasSigilAccent;
    private int sigilAccent_ = 0;
    public boolean hasSigilAccent() { return hasSigilAccent; }
    public int getSigilAccent() { return sigilAccent_; }
    
    // required int32 pattern_color_index = 4;
    public static final int PATTERN_COLOR_INDEX_FIELD_NUMBER = 4;
    private boolean hasPatternColorIndex;
    private int patternColorIndex_ = 0;
    public boolean hasPatternColorIndex() { return hasPatternColorIndex; }
    public int getPatternColorIndex() { return patternColorIndex_; }
    
    // required int32 background_color_index = 5;
    public static final int BACKGROUND_COLOR_INDEX_FIELD_NUMBER = 5;
    private boolean hasBackgroundColorIndex;
    private int backgroundColorIndex_ = 0;
    public boolean hasBackgroundColorIndex() { return hasBackgroundColorIndex; }
    public int getBackgroundColorIndex() { return backgroundColorIndex_; }
    
    // required int32 sigil_color_index = 6;
    public static final int SIGIL_COLOR_INDEX_FIELD_NUMBER = 6;
    private boolean hasSigilColorIndex;
    private int sigilColorIndex_ = 0;
    public boolean hasSigilColorIndex() { return hasSigilColorIndex; }
    public int getSigilColorIndex() { return sigilColorIndex_; }
    
    // required int32 placement_index = 7;
    public static final int PLACEMENT_INDEX_FIELD_NUMBER = 7;
    private boolean hasPlacementIndex;
    private int placementIndex_ = 0;
    public boolean hasPlacementIndex() { return hasPlacementIndex; }
    public int getPlacementIndex() { return placementIndex_; }
    
    // required int32 pattern = 8;
    public static final int PATTERN_FIELD_NUMBER = 8;
    private boolean hasPattern;
    private int pattern_ = 0;
    public boolean hasPattern() { return hasPattern; }
    public int getPattern() { return pattern_; }
    
    // required bool use_sigil_variant = 9;
    public static final int USE_SIGIL_VARIANT_FIELD_NUMBER = 9;
    private boolean hasUseSigilVariant;
    private boolean useSigilVariant_ = false;
    public boolean hasUseSigilVariant() { return hasUseSigilVariant; }
    public boolean getUseSigilVariant() { return useSigilVariant_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasBannerIndex) return false;
      if (!hasSigilMain) return false;
      if (!hasSigilAccent) return false;
      if (!hasPatternColorIndex) return false;
      if (!hasBackgroundColorIndex) return false;
      if (!hasSigilColorIndex) return false;
      if (!hasPlacementIndex) return false;
      if (!hasPattern) return false;
      if (!hasUseSigilVariant) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasBannerIndex()) {
        output.writeUInt32(1, getBannerIndex());
      }
      if (hasSigilMain()) {
        output.writeInt32(2, getSigilMain());
      }
      if (hasSigilAccent()) {
        output.writeInt32(3, getSigilAccent());
      }
      if (hasPatternColorIndex()) {
        output.writeInt32(4, getPatternColorIndex());
      }
      if (hasBackgroundColorIndex()) {
        output.writeInt32(5, getBackgroundColorIndex());
      }
      if (hasSigilColorIndex()) {
        output.writeInt32(6, getSigilColorIndex());
      }
      if (hasPlacementIndex()) {
        output.writeInt32(7, getPlacementIndex());
      }
      if (hasPattern()) {
        output.writeInt32(8, getPattern());
      }
      if (hasUseSigilVariant()) {
        output.writeBool(9, getUseSigilVariant());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasBannerIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getBannerIndex());
      }
      if (hasSigilMain()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getSigilMain());
      }
      if (hasSigilAccent()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getSigilAccent());
      }
      if (hasPatternColorIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getPatternColorIndex());
      }
      if (hasBackgroundColorIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getBackgroundColorIndex());
      }
      if (hasSigilColorIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getSigilColorIndex());
      }
      if (hasPlacementIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getPlacementIndex());
      }
      if (hasPattern()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getPattern());
      }
      if (hasUseSigilVariant()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, getUseSigilVariant());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Account.Account.BannerConfiguration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Account.Account.BannerConfiguration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Account.Account.BannerConfiguration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Account.Account.BannerConfiguration prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Account.Account.BannerConfiguration result;
      
      // Construct using D3.Account.Account.BannerConfiguration.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Account.Account.BannerConfiguration();
        return builder;
      }
      
      protected D3.Account.Account.BannerConfiguration internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Account.Account.BannerConfiguration();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Account.Account.BannerConfiguration.getDescriptor();
      }
      
      public D3.Account.Account.BannerConfiguration getDefaultInstanceForType() {
        return D3.Account.Account.BannerConfiguration.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Account.Account.BannerConfiguration build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Account.Account.BannerConfiguration buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Account.Account.BannerConfiguration buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Account.Account.BannerConfiguration returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Account.Account.BannerConfiguration) {
          return mergeFrom((D3.Account.Account.BannerConfiguration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Account.Account.BannerConfiguration other) {
        if (other == D3.Account.Account.BannerConfiguration.getDefaultInstance()) return this;
        if (other.hasBannerIndex()) {
          setBannerIndex(other.getBannerIndex());
        }
        if (other.hasSigilMain()) {
          setSigilMain(other.getSigilMain());
        }
        if (other.hasSigilAccent()) {
          setSigilAccent(other.getSigilAccent());
        }
        if (other.hasPatternColorIndex()) {
          setPatternColorIndex(other.getPatternColorIndex());
        }
        if (other.hasBackgroundColorIndex()) {
          setBackgroundColorIndex(other.getBackgroundColorIndex());
        }
        if (other.hasSigilColorIndex()) {
          setSigilColorIndex(other.getSigilColorIndex());
        }
        if (other.hasPlacementIndex()) {
          setPlacementIndex(other.getPlacementIndex());
        }
        if (other.hasPattern()) {
          setPattern(other.getPattern());
        }
        if (other.hasUseSigilVariant()) {
          setUseSigilVariant(other.getUseSigilVariant());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setBannerIndex(input.readUInt32());
              break;
            }
            case 16: {
              setSigilMain(input.readInt32());
              break;
            }
            case 24: {
              setSigilAccent(input.readInt32());
              break;
            }
            case 32: {
              setPatternColorIndex(input.readInt32());
              break;
            }
            case 40: {
              setBackgroundColorIndex(input.readInt32());
              break;
            }
            case 48: {
              setSigilColorIndex(input.readInt32());
              break;
            }
            case 56: {
              setPlacementIndex(input.readInt32());
              break;
            }
            case 64: {
              setPattern(input.readInt32());
              break;
            }
            case 72: {
              setUseSigilVariant(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // required uint32 banner_index = 1;
      public boolean hasBannerIndex() {
        return result.hasBannerIndex();
      }
      public int getBannerIndex() {
        return result.getBannerIndex();
      }
      public Builder setBannerIndex(int value) {
        result.hasBannerIndex = true;
        result.bannerIndex_ = value;
        return this;
      }
      public Builder clearBannerIndex() {
        result.hasBannerIndex = false;
        result.bannerIndex_ = 0;
        return this;
      }
      
      // required int32 sigil_main = 2;
      public boolean hasSigilMain() {
        return result.hasSigilMain();
      }
      public int getSigilMain() {
        return result.getSigilMain();
      }
      public Builder setSigilMain(int value) {
        result.hasSigilMain = true;
        result.sigilMain_ = value;
        return this;
      }
      public Builder clearSigilMain() {
        result.hasSigilMain = false;
        result.sigilMain_ = 0;
        return this;
      }
      
      // required int32 sigil_accent = 3;
      public boolean hasSigilAccent() {
        return result.hasSigilAccent();
      }
      public int getSigilAccent() {
        return result.getSigilAccent();
      }
      public Builder setSigilAccent(int value) {
        result.hasSigilAccent = true;
        result.sigilAccent_ = value;
        return this;
      }
      public Builder clearSigilAccent() {
        result.hasSigilAccent = false;
        result.sigilAccent_ = 0;
        return this;
      }
      
      // required int32 pattern_color_index = 4;
      public boolean hasPatternColorIndex() {
        return result.hasPatternColorIndex();
      }
      public int getPatternColorIndex() {
        return result.getPatternColorIndex();
      }
      public Builder setPatternColorIndex(int value) {
        result.hasPatternColorIndex = true;
        result.patternColorIndex_ = value;
        return this;
      }
      public Builder clearPatternColorIndex() {
        result.hasPatternColorIndex = false;
        result.patternColorIndex_ = 0;
        return this;
      }
      
      // required int32 background_color_index = 5;
      public boolean hasBackgroundColorIndex() {
        return result.hasBackgroundColorIndex();
      }
      public int getBackgroundColorIndex() {
        return result.getBackgroundColorIndex();
      }
      public Builder setBackgroundColorIndex(int value) {
        result.hasBackgroundColorIndex = true;
        result.backgroundColorIndex_ = value;
        return this;
      }
      public Builder clearBackgroundColorIndex() {
        result.hasBackgroundColorIndex = false;
        result.backgroundColorIndex_ = 0;
        return this;
      }
      
      // required int32 sigil_color_index = 6;
      public boolean hasSigilColorIndex() {
        return result.hasSigilColorIndex();
      }
      public int getSigilColorIndex() {
        return result.getSigilColorIndex();
      }
      public Builder setSigilColorIndex(int value) {
        result.hasSigilColorIndex = true;
        result.sigilColorIndex_ = value;
        return this;
      }
      public Builder clearSigilColorIndex() {
        result.hasSigilColorIndex = false;
        result.sigilColorIndex_ = 0;
        return this;
      }
      
      // required int32 placement_index = 7;
      public boolean hasPlacementIndex() {
        return result.hasPlacementIndex();
      }
      public int getPlacementIndex() {
        return result.getPlacementIndex();
      }
      public Builder setPlacementIndex(int value) {
        result.hasPlacementIndex = true;
        result.placementIndex_ = value;
        return this;
      }
      public Builder clearPlacementIndex() {
        result.hasPlacementIndex = false;
        result.placementIndex_ = 0;
        return this;
      }
      
      // required int32 pattern = 8;
      public boolean hasPattern() {
        return result.hasPattern();
      }
      public int getPattern() {
        return result.getPattern();
      }
      public Builder setPattern(int value) {
        result.hasPattern = true;
        result.pattern_ = value;
        return this;
      }
      public Builder clearPattern() {
        result.hasPattern = false;
        result.pattern_ = 0;
        return this;
      }
      
      // required bool use_sigil_variant = 9;
      public boolean hasUseSigilVariant() {
        return result.hasUseSigilVariant();
      }
      public boolean getUseSigilVariant() {
        return result.getUseSigilVariant();
      }
      public Builder setUseSigilVariant(boolean value) {
        result.hasUseSigilVariant = true;
        result.useSigilVariant_ = value;
        return this;
      }
      public Builder clearUseSigilVariant() {
        result.hasUseSigilVariant = false;
        result.useSigilVariant_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Account.BannerConfiguration)
    }
    
    static {
      defaultInstance = new BannerConfiguration(true);
      D3.Account.Account.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Account.BannerConfiguration)
  }
  
  public static final class Digest extends
      com.google.protobuf.GeneratedMessage {
    // Use Digest.newBuilder() to construct.
    private Digest() {
      initFields();
    }
    private Digest(boolean noInit) {}
    
    private static final Digest defaultInstance;
    public static Digest getDefaultInstance() {
      return defaultInstance;
    }
    
    public Digest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Account.Account.internal_static_D3_Account_Digest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Account.Account.internal_static_D3_Account_Digest_fieldAccessorTable;
    }
    
    public enum Flags
        implements com.google.protobuf.ProtocolMessageEnum {
      HARDCORE_HERO_UNLOCKED(0, 1),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Flags valueOf(int value) {
        switch (value) {
          case 1: return HARDCORE_HERO_UNLOCKED;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<Flags>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Flags>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Flags>() {
              public Flags findValueByNumber(int number) {
                return Flags.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return D3.Account.Account.Digest.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Flags[] VALUES = {
        HARDCORE_HERO_UNLOCKED, 
      };
      public static Flags valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Flags(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        D3.Account.Account.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:D3.Account.Digest.Flags)
    }
    
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private boolean hasVersion;
    private int version_ = 0;
    public boolean hasVersion() { return hasVersion; }
    public int getVersion() { return version_; }
    
    // required .D3.OnlineService.EntityId last_played_hero_id = 2;
    public static final int LAST_PLAYED_HERO_ID_FIELD_NUMBER = 2;
    private boolean hasLastPlayedHeroId;
    private D3.OnlineService.OnlineService.EntityId lastPlayedHeroId_;
    public boolean hasLastPlayedHeroId() { return hasLastPlayedHeroId; }
    public D3.OnlineService.OnlineService.EntityId getLastPlayedHeroId() { return lastPlayedHeroId_; }
    
    // required .D3.Account.BannerConfiguration banner_configuration = 3;
    public static final int BANNER_CONFIGURATION_FIELD_NUMBER = 3;
    private boolean hasBannerConfiguration;
    private D3.Account.Account.BannerConfiguration bannerConfiguration_;
    public boolean hasBannerConfiguration() { return hasBannerConfiguration; }
    public D3.Account.Account.BannerConfiguration getBannerConfiguration() { return bannerConfiguration_; }
    
    // required uint32 flags = 4;
    public static final int FLAGS_FIELD_NUMBER = 4;
    private boolean hasFlags;
    private int flags_ = 0;
    public boolean hasFlags() { return hasFlags; }
    public int getFlags() { return flags_; }
    
    private void initFields() {
      lastPlayedHeroId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
      bannerConfiguration_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasVersion) return false;
      if (!hasLastPlayedHeroId) return false;
      if (!hasBannerConfiguration) return false;
      if (!hasFlags) return false;
      if (!getLastPlayedHeroId().isInitialized()) return false;
      if (!getBannerConfiguration().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVersion()) {
        output.writeUInt32(1, getVersion());
      }
      if (hasLastPlayedHeroId()) {
        output.writeMessage(2, getLastPlayedHeroId());
      }
      if (hasBannerConfiguration()) {
        output.writeMessage(3, getBannerConfiguration());
      }
      if (hasFlags()) {
        output.writeUInt32(4, getFlags());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getVersion());
      }
      if (hasLastPlayedHeroId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLastPlayedHeroId());
      }
      if (hasBannerConfiguration()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getBannerConfiguration());
      }
      if (hasFlags()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getFlags());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Account.Account.Digest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Account.Account.Digest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.Digest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Account.Account.Digest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.Digest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Account.Account.Digest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.Digest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Account.Account.Digest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Account.Account.Digest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Account.Account.Digest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Account.Account.Digest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Account.Account.Digest result;
      
      // Construct using D3.Account.Account.Digest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Account.Account.Digest();
        return builder;
      }
      
      protected D3.Account.Account.Digest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Account.Account.Digest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Account.Account.Digest.getDescriptor();
      }
      
      public D3.Account.Account.Digest getDefaultInstanceForType() {
        return D3.Account.Account.Digest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Account.Account.Digest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Account.Account.Digest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Account.Account.Digest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        D3.Account.Account.Digest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Account.Account.Digest) {
          return mergeFrom((D3.Account.Account.Digest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Account.Account.Digest other) {
        if (other == D3.Account.Account.Digest.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasLastPlayedHeroId()) {
          mergeLastPlayedHeroId(other.getLastPlayedHeroId());
        }
        if (other.hasBannerConfiguration()) {
          mergeBannerConfiguration(other.getBannerConfiguration());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setVersion(input.readUInt32());
              break;
            }
            case 18: {
              D3.OnlineService.OnlineService.EntityId.Builder subBuilder = D3.OnlineService.OnlineService.EntityId.newBuilder();
              if (hasLastPlayedHeroId()) {
                subBuilder.mergeFrom(getLastPlayedHeroId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLastPlayedHeroId(subBuilder.buildPartial());
              break;
            }
            case 26: {
              D3.Account.Account.BannerConfiguration.Builder subBuilder = D3.Account.Account.BannerConfiguration.newBuilder();
              if (hasBannerConfiguration()) {
                subBuilder.mergeFrom(getBannerConfiguration());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBannerConfiguration(subBuilder.buildPartial());
              break;
            }
            case 32: {
              setFlags(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // required uint32 version = 1;
      public boolean hasVersion() {
        return result.hasVersion();
      }
      public int getVersion() {
        return result.getVersion();
      }
      public Builder setVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder clearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      // required .D3.OnlineService.EntityId last_played_hero_id = 2;
      public boolean hasLastPlayedHeroId() {
        return result.hasLastPlayedHeroId();
      }
      public D3.OnlineService.OnlineService.EntityId getLastPlayedHeroId() {
        return result.getLastPlayedHeroId();
      }
      public Builder setLastPlayedHeroId(D3.OnlineService.OnlineService.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = value;
        return this;
      }
      public Builder setLastPlayedHeroId(D3.OnlineService.OnlineService.EntityId.Builder builderForValue) {
        result.hasLastPlayedHeroId = true;
        result.lastPlayedHeroId_ = builderForValue.build();
        return this;
      }
      public Builder mergeLastPlayedHeroId(D3.OnlineService.OnlineService.EntityId value) {
        if (result.hasLastPlayedHeroId() &&
            result.lastPlayedHeroId_ != D3.OnlineService.OnlineService.EntityId.getDefaultInstance()) {
          result.lastPlayedHeroId_ =
            D3.OnlineService.OnlineService.EntityId.newBuilder(result.lastPlayedHeroId_).mergeFrom(value).buildPartial();
        } else {
          result.lastPlayedHeroId_ = value;
        }
        result.hasLastPlayedHeroId = true;
        return this;
      }
      public Builder clearLastPlayedHeroId() {
        result.hasLastPlayedHeroId = false;
        result.lastPlayedHeroId_ = D3.OnlineService.OnlineService.EntityId.getDefaultInstance();
        return this;
      }
      
      // required .D3.Account.BannerConfiguration banner_configuration = 3;
      public boolean hasBannerConfiguration() {
        return result.hasBannerConfiguration();
      }
      public D3.Account.Account.BannerConfiguration getBannerConfiguration() {
        return result.getBannerConfiguration();
      }
      public Builder setBannerConfiguration(D3.Account.Account.BannerConfiguration value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = value;
        return this;
      }
      public Builder setBannerConfiguration(D3.Account.Account.BannerConfiguration.Builder builderForValue) {
        result.hasBannerConfiguration = true;
        result.bannerConfiguration_ = builderForValue.build();
        return this;
      }
      public Builder mergeBannerConfiguration(D3.Account.Account.BannerConfiguration value) {
        if (result.hasBannerConfiguration() &&
            result.bannerConfiguration_ != D3.Account.Account.BannerConfiguration.getDefaultInstance()) {
          result.bannerConfiguration_ =
            D3.Account.Account.BannerConfiguration.newBuilder(result.bannerConfiguration_).mergeFrom(value).buildPartial();
        } else {
          result.bannerConfiguration_ = value;
        }
        result.hasBannerConfiguration = true;
        return this;
      }
      public Builder clearBannerConfiguration() {
        result.hasBannerConfiguration = false;
        result.bannerConfiguration_ = D3.Account.Account.BannerConfiguration.getDefaultInstance();
        return this;
      }
      
      // required uint32 flags = 4;
      public boolean hasFlags() {
        return result.hasFlags();
      }
      public int getFlags() {
        return result.getFlags();
      }
      public Builder setFlags(int value) {
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder clearFlags() {
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Account.Digest)
    }
    
    static {
      defaultInstance = new Digest(true);
      D3.Account.Account.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Account.Digest)
  }
  
  public static final class SavedDefinition extends
      com.google.protobuf.GeneratedMessage {
    // Use SavedDefinition.newBuilder() to construct.
    private SavedDefinition() {
      initFields();
    }
    private SavedDefinition(boolean noInit) {}
    
    private static final SavedDefinition defaultInstance;
    public static SavedDefinition getDefaultInstance() {
      return defaultInstance;
    }
    
    public SavedDefinition getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return D3.Account.Account.internal_static_D3_Account_SavedDefinition_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return D3.Account.Account.internal_static_D3_Account_SavedDefinition_fieldAccessorTable;
    }
    
    // required uint32 version = 1;
    public static final int VERSION_FIELD_NUMBER = 1;
    private boolean hasVersion;
    private int version_ = 0;
    public boolean hasVersion() { return hasVersion; }
    public int getVersion() { return version_; }
    
    // optional .D3.Account.Digest digest = 2;
    public static final int DIGEST_FIELD_NUMBER = 2;
    private boolean hasDigest;
    private D3.Account.Account.Digest digest_;
    public boolean hasDigest() { return hasDigest; }
    public D3.Account.Account.Digest getDigest() { return digest_; }
    
    // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
    public static final int SAVED_ATTRIBUTES_FIELD_NUMBER = 3;
    private boolean hasSavedAttributes;
    private D3.AttributeSerializer.AttributeSerializer.SavedAttributes savedAttributes_;
    public boolean hasSavedAttributes() { return hasSavedAttributes; }
    public D3.AttributeSerializer.AttributeSerializer.SavedAttributes getSavedAttributes() { return savedAttributes_; }
    
    // optional .D3.Items.ItemList normal_shared_saved_items = 4;
    public static final int NORMAL_SHARED_SAVED_ITEMS_FIELD_NUMBER = 4;
    private boolean hasNormalSharedSavedItems;
    private D3.Items.Items.ItemList normalSharedSavedItems_;
    public boolean hasNormalSharedSavedItems() { return hasNormalSharedSavedItems; }
    public D3.Items.Items.ItemList getNormalSharedSavedItems() { return normalSharedSavedItems_; }
    
    // optional .D3.Items.ItemList hardcore_shared_saved_items = 5;
    public static final int HARDCORE_SHARED_SAVED_ITEMS_FIELD_NUMBER = 5;
    private boolean hasHardcoreSharedSavedItems;
    private D3.Items.Items.ItemList hardcoreSharedSavedItems_;
    public boolean hasHardcoreSharedSavedItems() { return hasHardcoreSharedSavedItems; }
    public D3.Items.Items.ItemList getHardcoreSharedSavedItems() { return hardcoreSharedSavedItems_; }
    
    // optional .D3.ItemCrafting.CrafterSavedData crafter_saved_data = 6;
    public static final int CRAFTER_SAVED_DATA_FIELD_NUMBER = 6;
    private boolean hasCrafterSavedData;
    private D3.ItemCrafting.ItemCrafting.CrafterSavedData crafterSavedData_;
    public boolean hasCrafterSavedData() { return hasCrafterSavedData; }
    public D3.ItemCrafting.ItemCrafting.CrafterSavedData getCrafterSavedData() { return crafterSavedData_; }
    
    // repeated sfixed32 seen_tutorials = 7;
    public static final int SEEN_TUTORIALS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> seenTutorials_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getSeenTutorialsList() {
      return seenTutorials_;
    }
    public int getSeenTutorialsCount() { return seenTutorials_.size(); }
    public int getSeenTutorials(int index) {
      return seenTutorials_.get(index);
    }
    
    private void initFields() {
      digest_ = D3.Account.Account.Digest.getDefaultInstance();
      savedAttributes_ = D3.AttributeSerializer.AttributeSerializer.SavedAttributes.getDefaultInstance();
      normalSharedSavedItems_ = D3.Items.Items.ItemList.getDefaultInstance();
      hardcoreSharedSavedItems_ = D3.Items.Items.ItemList.getDefaultInstance();
      crafterSavedData_ = D3.ItemCrafting.ItemCrafting.CrafterSavedData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasVersion) return false;
      if (!hasSavedAttributes) return false;
      if (hasDigest()) {
        if (!getDigest().isInitialized()) return false;
      }
      if (!getSavedAttributes().isInitialized()) return false;
      if (hasNormalSharedSavedItems()) {
        if (!getNormalSharedSavedItems().isInitialized()) return false;
      }
      if (hasHardcoreSharedSavedItems()) {
        if (!getHardcoreSharedSavedItems().isInitialized()) return false;
      }
      if (hasCrafterSavedData()) {
        if (!getCrafterSavedData().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasVersion()) {
        output.writeUInt32(1, getVersion());
      }
      if (hasDigest()) {
        output.writeMessage(2, getDigest());
      }
      if (hasSavedAttributes()) {
        output.writeMessage(3, getSavedAttributes());
      }
      if (hasNormalSharedSavedItems()) {
        output.writeMessage(4, getNormalSharedSavedItems());
      }
      if (hasHardcoreSharedSavedItems()) {
        output.writeMessage(5, getHardcoreSharedSavedItems());
      }
      if (hasCrafterSavedData()) {
        output.writeMessage(6, getCrafterSavedData());
      }
      for (int element : getSeenTutorialsList()) {
        output.writeSFixed32(7, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, getVersion());
      }
      if (hasDigest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDigest());
      }
      if (hasSavedAttributes()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSavedAttributes());
      }
      if (hasNormalSharedSavedItems()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getNormalSharedSavedItems());
      }
      if (hasHardcoreSharedSavedItems()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getHardcoreSharedSavedItems());
      }
      if (hasCrafterSavedData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getCrafterSavedData());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSeenTutorialsList().size();
        size += dataSize;
        size += 1 * getSeenTutorialsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static D3.Account.Account.SavedDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Account.Account.SavedDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static D3.Account.Account.SavedDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static D3.Account.Account.SavedDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(D3.Account.Account.SavedDefinition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private D3.Account.Account.SavedDefinition result;
      
      // Construct using D3.Account.Account.SavedDefinition.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new D3.Account.Account.SavedDefinition();
        return builder;
      }
      
      protected D3.Account.Account.SavedDefinition internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new D3.Account.Account.SavedDefinition();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return D3.Account.Account.SavedDefinition.getDescriptor();
      }
      
      public D3.Account.Account.SavedDefinition getDefaultInstanceForType() {
        return D3.Account.Account.SavedDefinition.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public D3.Account.Account.SavedDefinition build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private D3.Account.Account.SavedDefinition buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public D3.Account.Account.SavedDefinition buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.seenTutorials_ != java.util.Collections.EMPTY_LIST) {
          result.seenTutorials_ =
            java.util.Collections.unmodifiableList(result.seenTutorials_);
        }
        D3.Account.Account.SavedDefinition returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof D3.Account.Account.SavedDefinition) {
          return mergeFrom((D3.Account.Account.SavedDefinition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(D3.Account.Account.SavedDefinition other) {
        if (other == D3.Account.Account.SavedDefinition.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasDigest()) {
          mergeDigest(other.getDigest());
        }
        if (other.hasSavedAttributes()) {
          mergeSavedAttributes(other.getSavedAttributes());
        }
        if (other.hasNormalSharedSavedItems()) {
          mergeNormalSharedSavedItems(other.getNormalSharedSavedItems());
        }
        if (other.hasHardcoreSharedSavedItems()) {
          mergeHardcoreSharedSavedItems(other.getHardcoreSharedSavedItems());
        }
        if (other.hasCrafterSavedData()) {
          mergeCrafterSavedData(other.getCrafterSavedData());
        }
        if (!other.seenTutorials_.isEmpty()) {
          if (result.seenTutorials_.isEmpty()) {
            result.seenTutorials_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.seenTutorials_.addAll(other.seenTutorials_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setVersion(input.readUInt32());
              break;
            }
            case 18: {
              D3.Account.Account.Digest.Builder subBuilder = D3.Account.Account.Digest.newBuilder();
              if (hasDigest()) {
                subBuilder.mergeFrom(getDigest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDigest(subBuilder.buildPartial());
              break;
            }
            case 26: {
              D3.AttributeSerializer.AttributeSerializer.SavedAttributes.Builder subBuilder = D3.AttributeSerializer.AttributeSerializer.SavedAttributes.newBuilder();
              if (hasSavedAttributes()) {
                subBuilder.mergeFrom(getSavedAttributes());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSavedAttributes(subBuilder.buildPartial());
              break;
            }
            case 34: {
              D3.Items.Items.ItemList.Builder subBuilder = D3.Items.Items.ItemList.newBuilder();
              if (hasNormalSharedSavedItems()) {
                subBuilder.mergeFrom(getNormalSharedSavedItems());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setNormalSharedSavedItems(subBuilder.buildPartial());
              break;
            }
            case 42: {
              D3.Items.Items.ItemList.Builder subBuilder = D3.Items.Items.ItemList.newBuilder();
              if (hasHardcoreSharedSavedItems()) {
                subBuilder.mergeFrom(getHardcoreSharedSavedItems());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setHardcoreSharedSavedItems(subBuilder.buildPartial());
              break;
            }
            case 50: {
              D3.ItemCrafting.ItemCrafting.CrafterSavedData.Builder subBuilder = D3.ItemCrafting.ItemCrafting.CrafterSavedData.newBuilder();
              if (hasCrafterSavedData()) {
                subBuilder.mergeFrom(getCrafterSavedData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCrafterSavedData(subBuilder.buildPartial());
              break;
            }
            case 61: {
              addSeenTutorials(input.readSFixed32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addSeenTutorials(input.readSFixed32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // required uint32 version = 1;
      public boolean hasVersion() {
        return result.hasVersion();
      }
      public int getVersion() {
        return result.getVersion();
      }
      public Builder setVersion(int value) {
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder clearVersion() {
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      // optional .D3.Account.Digest digest = 2;
      public boolean hasDigest() {
        return result.hasDigest();
      }
      public D3.Account.Account.Digest getDigest() {
        return result.getDigest();
      }
      public Builder setDigest(D3.Account.Account.Digest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDigest = true;
        result.digest_ = value;
        return this;
      }
      public Builder setDigest(D3.Account.Account.Digest.Builder builderForValue) {
        result.hasDigest = true;
        result.digest_ = builderForValue.build();
        return this;
      }
      public Builder mergeDigest(D3.Account.Account.Digest value) {
        if (result.hasDigest() &&
            result.digest_ != D3.Account.Account.Digest.getDefaultInstance()) {
          result.digest_ =
            D3.Account.Account.Digest.newBuilder(result.digest_).mergeFrom(value).buildPartial();
        } else {
          result.digest_ = value;
        }
        result.hasDigest = true;
        return this;
      }
      public Builder clearDigest() {
        result.hasDigest = false;
        result.digest_ = D3.Account.Account.Digest.getDefaultInstance();
        return this;
      }
      
      // required .D3.AttributeSerializer.SavedAttributes saved_attributes = 3;
      public boolean hasSavedAttributes() {
        return result.hasSavedAttributes();
      }
      public D3.AttributeSerializer.AttributeSerializer.SavedAttributes getSavedAttributes() {
        return result.getSavedAttributes();
      }
      public Builder setSavedAttributes(D3.AttributeSerializer.AttributeSerializer.SavedAttributes value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSavedAttributes = true;
        result.savedAttributes_ = value;
        return this;
      }
      public Builder setSavedAttributes(D3.AttributeSerializer.AttributeSerializer.SavedAttributes.Builder builderForValue) {
        result.hasSavedAttributes = true;
        result.savedAttributes_ = builderForValue.build();
        return this;
      }
      public Builder mergeSavedAttributes(D3.AttributeSerializer.AttributeSerializer.SavedAttributes value) {
        if (result.hasSavedAttributes() &&
            result.savedAttributes_ != D3.AttributeSerializer.AttributeSerializer.SavedAttributes.getDefaultInstance()) {
          result.savedAttributes_ =
            D3.AttributeSerializer.AttributeSerializer.SavedAttributes.newBuilder(result.savedAttributes_).mergeFrom(value).buildPartial();
        } else {
          result.savedAttributes_ = value;
        }
        result.hasSavedAttributes = true;
        return this;
      }
      public Builder clearSavedAttributes() {
        result.hasSavedAttributes = false;
        result.savedAttributes_ = D3.AttributeSerializer.AttributeSerializer.SavedAttributes.getDefaultInstance();
        return this;
      }
      
      // optional .D3.Items.ItemList normal_shared_saved_items = 4;
      public boolean hasNormalSharedSavedItems() {
        return result.hasNormalSharedSavedItems();
      }
      public D3.Items.Items.ItemList getNormalSharedSavedItems() {
        return result.getNormalSharedSavedItems();
      }
      public Builder setNormalSharedSavedItems(D3.Items.Items.ItemList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasNormalSharedSavedItems = true;
        result.normalSharedSavedItems_ = value;
        return this;
      }
      public Builder setNormalSharedSavedItems(D3.Items.Items.ItemList.Builder builderForValue) {
        result.hasNormalSharedSavedItems = true;
        result.normalSharedSavedItems_ = builderForValue.build();
        return this;
      }
      public Builder mergeNormalSharedSavedItems(D3.Items.Items.ItemList value) {
        if (result.hasNormalSharedSavedItems() &&
            result.normalSharedSavedItems_ != D3.Items.Items.ItemList.getDefaultInstance()) {
          result.normalSharedSavedItems_ =
            D3.Items.Items.ItemList.newBuilder(result.normalSharedSavedItems_).mergeFrom(value).buildPartial();
        } else {
          result.normalSharedSavedItems_ = value;
        }
        result.hasNormalSharedSavedItems = true;
        return this;
      }
      public Builder clearNormalSharedSavedItems() {
        result.hasNormalSharedSavedItems = false;
        result.normalSharedSavedItems_ = D3.Items.Items.ItemList.getDefaultInstance();
        return this;
      }
      
      // optional .D3.Items.ItemList hardcore_shared_saved_items = 5;
      public boolean hasHardcoreSharedSavedItems() {
        return result.hasHardcoreSharedSavedItems();
      }
      public D3.Items.Items.ItemList getHardcoreSharedSavedItems() {
        return result.getHardcoreSharedSavedItems();
      }
      public Builder setHardcoreSharedSavedItems(D3.Items.Items.ItemList value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasHardcoreSharedSavedItems = true;
        result.hardcoreSharedSavedItems_ = value;
        return this;
      }
      public Builder setHardcoreSharedSavedItems(D3.Items.Items.ItemList.Builder builderForValue) {
        result.hasHardcoreSharedSavedItems = true;
        result.hardcoreSharedSavedItems_ = builderForValue.build();
        return this;
      }
      public Builder mergeHardcoreSharedSavedItems(D3.Items.Items.ItemList value) {
        if (result.hasHardcoreSharedSavedItems() &&
            result.hardcoreSharedSavedItems_ != D3.Items.Items.ItemList.getDefaultInstance()) {
          result.hardcoreSharedSavedItems_ =
            D3.Items.Items.ItemList.newBuilder(result.hardcoreSharedSavedItems_).mergeFrom(value).buildPartial();
        } else {
          result.hardcoreSharedSavedItems_ = value;
        }
        result.hasHardcoreSharedSavedItems = true;
        return this;
      }
      public Builder clearHardcoreSharedSavedItems() {
        result.hasHardcoreSharedSavedItems = false;
        result.hardcoreSharedSavedItems_ = D3.Items.Items.ItemList.getDefaultInstance();
        return this;
      }
      
      // optional .D3.ItemCrafting.CrafterSavedData crafter_saved_data = 6;
      public boolean hasCrafterSavedData() {
        return result.hasCrafterSavedData();
      }
      public D3.ItemCrafting.ItemCrafting.CrafterSavedData getCrafterSavedData() {
        return result.getCrafterSavedData();
      }
      public Builder setCrafterSavedData(D3.ItemCrafting.ItemCrafting.CrafterSavedData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCrafterSavedData = true;
        result.crafterSavedData_ = value;
        return this;
      }
      public Builder setCrafterSavedData(D3.ItemCrafting.ItemCrafting.CrafterSavedData.Builder builderForValue) {
        result.hasCrafterSavedData = true;
        result.crafterSavedData_ = builderForValue.build();
        return this;
      }
      public Builder mergeCrafterSavedData(D3.ItemCrafting.ItemCrafting.CrafterSavedData value) {
        if (result.hasCrafterSavedData() &&
            result.crafterSavedData_ != D3.ItemCrafting.ItemCrafting.CrafterSavedData.getDefaultInstance()) {
          result.crafterSavedData_ =
            D3.ItemCrafting.ItemCrafting.CrafterSavedData.newBuilder(result.crafterSavedData_).mergeFrom(value).buildPartial();
        } else {
          result.crafterSavedData_ = value;
        }
        result.hasCrafterSavedData = true;
        return this;
      }
      public Builder clearCrafterSavedData() {
        result.hasCrafterSavedData = false;
        result.crafterSavedData_ = D3.ItemCrafting.ItemCrafting.CrafterSavedData.getDefaultInstance();
        return this;
      }
      
      // repeated sfixed32 seen_tutorials = 7;
      public java.util.List<java.lang.Integer> getSeenTutorialsList() {
        return java.util.Collections.unmodifiableList(result.seenTutorials_);
      }
      public int getSeenTutorialsCount() {
        return result.getSeenTutorialsCount();
      }
      public int getSeenTutorials(int index) {
        return result.getSeenTutorials(index);
      }
      public Builder setSeenTutorials(int index, int value) {
        result.seenTutorials_.set(index, value);
        return this;
      }
      public Builder addSeenTutorials(int value) {
        if (result.seenTutorials_.isEmpty()) {
          result.seenTutorials_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.seenTutorials_.add(value);
        return this;
      }
      public Builder addAllSeenTutorials(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.seenTutorials_.isEmpty()) {
          result.seenTutorials_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.seenTutorials_);
        return this;
      }
      public Builder clearSeenTutorials() {
        result.seenTutorials_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:D3.Account.SavedDefinition)
    }
    
    static {
      defaultInstance = new SavedDefinition(true);
      D3.Account.Account.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:D3.Account.SavedDefinition)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Account_BannerConfiguration_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Account_BannerConfiguration_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Account_Digest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Account_Digest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_D3_Account_SavedDefinition_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_D3_Account_SavedDefinition_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rAccount.proto\022\nD3.Account\032\031AttributeSe" +
      "rializer.proto\032\013Items.proto\032\023OnlineServi" +
      "ce.proto\032\022ItemCrafting.proto\"\362\001\n\023BannerC" +
      "onfiguration\022\024\n\014banner_index\030\001 \002(\r\022\022\n\nsi" +
      "gil_main\030\002 \002(\005\022\024\n\014sigil_accent\030\003 \002(\005\022\033\n\023" +
      "pattern_color_index\030\004 \002(\005\022\036\n\026background_" +
      "color_index\030\005 \002(\005\022\031\n\021sigil_color_index\030\006" +
      " \002(\005\022\027\n\017placement_index\030\007 \002(\005\022\017\n\007pattern" +
      "\030\010 \002(\005\022\031\n\021use_sigil_variant\030\t \002(\010\"\305\001\n\006Di" +
      "gest\022\017\n\007version\030\001 \002(\r\0227\n\023last_played_her",
      "o_id\030\002 \002(\0132\032.D3.OnlineService.EntityId\022=" +
      "\n\024banner_configuration\030\003 \002(\0132\037.D3.Accoun" +
      "t.BannerConfiguration\022\r\n\005flags\030\004 \002(\r\"#\n\005" +
      "Flags\022\032\n\026HARDCORE_HERO_UNLOCKED\020\001\"\320\002\n\017Sa" +
      "vedDefinition\022\017\n\007version\030\001 \002(\r\022\"\n\006digest" +
      "\030\002 \001(\0132\022.D3.Account.Digest\022A\n\020saved_attr" +
      "ibutes\030\003 \002(\0132\'.D3.AttributeSerializer.Sa" +
      "vedAttributes\0225\n\031normal_shared_saved_ite" +
      "ms\030\004 \001(\0132\022.D3.Items.ItemList\0227\n\033hardcore" +
      "_shared_saved_items\030\005 \001(\0132\022.D3.Items.Ite",
      "mList\022=\n\022crafter_saved_data\030\006 \001(\0132!.D3.I" +
      "temCrafting.CrafterSavedData\022\026\n\016seen_tut" +
      "orials\030\007 \003(\017"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_D3_Account_BannerConfiguration_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_D3_Account_BannerConfiguration_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Account_BannerConfiguration_descriptor,
              new java.lang.String[] { "BannerIndex", "SigilMain", "SigilAccent", "PatternColorIndex", "BackgroundColorIndex", "SigilColorIndex", "PlacementIndex", "Pattern", "UseSigilVariant", },
              D3.Account.Account.BannerConfiguration.class,
              D3.Account.Account.BannerConfiguration.Builder.class);
          internal_static_D3_Account_Digest_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_D3_Account_Digest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Account_Digest_descriptor,
              new java.lang.String[] { "Version", "LastPlayedHeroId", "BannerConfiguration", "Flags", },
              D3.Account.Account.Digest.class,
              D3.Account.Account.Digest.Builder.class);
          internal_static_D3_Account_SavedDefinition_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_D3_Account_SavedDefinition_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_D3_Account_SavedDefinition_descriptor,
              new java.lang.String[] { "Version", "Digest", "SavedAttributes", "NormalSharedSavedItems", "HardcoreSharedSavedItems", "CrafterSavedData", "SeenTutorials", },
              D3.Account.Account.SavedDefinition.class,
              D3.Account.Account.SavedDefinition.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          D3.AttributeSerializer.AttributeSerializer.getDescriptor(),
          D3.Items.Items.getDescriptor(),
          D3.OnlineService.OnlineService.getDescriptor(),
          D3.ItemCrafting.ItemCrafting.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
