// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lib/profanity/profanity.proto

package bnet.protocol.profanity;

public final class Profanity {
  private Profanity() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class WordFilter extends
      com.google.protobuf.GeneratedMessage {
    // Use WordFilter.newBuilder() to construct.
    private WordFilter() {
      initFields();
    }
    private WordFilter(boolean noInit) {}
    
    private static final WordFilter defaultInstance;
    public static WordFilter getDefaultInstance() {
      return defaultInstance;
    }
    
    public WordFilter getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.profanity.Profanity.internal_static_bnet_protocol_profanity_WordFilter_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.profanity.Profanity.internal_static_bnet_protocol_profanity_WordFilter_fieldAccessorTable;
    }
    
    // required string type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private java.lang.String type_ = "";
    public boolean hasType() { return hasType; }
    public java.lang.String getType() { return type_; }
    
    // required string regex = 2;
    public static final int REGEX_FIELD_NUMBER = 2;
    private boolean hasRegex;
    private java.lang.String regex_ = "";
    public boolean hasRegex() { return hasRegex; }
    public java.lang.String getRegex() { return regex_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasRegex) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasType()) {
        output.writeString(1, getType());
      }
      if (hasRegex()) {
        output.writeString(2, getRegex());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getType());
      }
      if (hasRegex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getRegex());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.profanity.Profanity.WordFilter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.profanity.Profanity.WordFilter result;
      
      // Construct using bnet.protocol.profanity.Profanity.WordFilter.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.profanity.Profanity.WordFilter();
        return builder;
      }
      
      protected bnet.protocol.profanity.Profanity.WordFilter internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.profanity.Profanity.WordFilter();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.profanity.Profanity.WordFilter.getDescriptor();
      }
      
      public bnet.protocol.profanity.Profanity.WordFilter getDefaultInstanceForType() {
        return bnet.protocol.profanity.Profanity.WordFilter.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.profanity.Profanity.WordFilter build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.profanity.Profanity.WordFilter buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.profanity.Profanity.WordFilter buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.profanity.Profanity.WordFilter returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.profanity.Profanity.WordFilter) {
          return mergeFrom((bnet.protocol.profanity.Profanity.WordFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.profanity.Profanity.WordFilter other) {
        if (other == bnet.protocol.profanity.Profanity.WordFilter.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasRegex()) {
          setRegex(other.getRegex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setType(input.readString());
              break;
            }
            case 18: {
              setRegex(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public java.lang.String getType() {
        return result.getType();
      }
      public Builder setType(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = getDefaultInstance().getType();
        return this;
      }
      
      // required string regex = 2;
      public boolean hasRegex() {
        return result.hasRegex();
      }
      public java.lang.String getRegex() {
        return result.getRegex();
      }
      public Builder setRegex(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRegex = true;
        result.regex_ = value;
        return this;
      }
      public Builder clearRegex() {
        result.hasRegex = false;
        result.regex_ = getDefaultInstance().getRegex();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.profanity.WordFilter)
    }
    
    static {
      defaultInstance = new WordFilter(true);
      bnet.protocol.profanity.Profanity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.profanity.WordFilter)
  }
  
  public static final class WordFilters extends
      com.google.protobuf.GeneratedMessage {
    // Use WordFilters.newBuilder() to construct.
    private WordFilters() {
      initFields();
    }
    private WordFilters(boolean noInit) {}
    
    private static final WordFilters defaultInstance;
    public static WordFilters getDefaultInstance() {
      return defaultInstance;
    }
    
    public WordFilters getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.profanity.Profanity.internal_static_bnet_protocol_profanity_WordFilters_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.profanity.Profanity.internal_static_bnet_protocol_profanity_WordFilters_fieldAccessorTable;
    }
    
    // repeated .bnet.protocol.profanity.WordFilter filters = 1;
    public static final int FILTERS_FIELD_NUMBER = 1;
    private java.util.List<bnet.protocol.profanity.Profanity.WordFilter> filters_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.profanity.Profanity.WordFilter> getFiltersList() {
      return filters_;
    }
    public int getFiltersCount() { return filters_.size(); }
    public bnet.protocol.profanity.Profanity.WordFilter getFilters(int index) {
      return filters_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (bnet.protocol.profanity.Profanity.WordFilter element : getFiltersList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (bnet.protocol.profanity.Profanity.WordFilter element : getFiltersList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (bnet.protocol.profanity.Profanity.WordFilter element : getFiltersList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.profanity.Profanity.WordFilters parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.profanity.Profanity.WordFilters prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.profanity.Profanity.WordFilters result;
      
      // Construct using bnet.protocol.profanity.Profanity.WordFilters.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.profanity.Profanity.WordFilters();
        return builder;
      }
      
      protected bnet.protocol.profanity.Profanity.WordFilters internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.profanity.Profanity.WordFilters();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.profanity.Profanity.WordFilters.getDescriptor();
      }
      
      public bnet.protocol.profanity.Profanity.WordFilters getDefaultInstanceForType() {
        return bnet.protocol.profanity.Profanity.WordFilters.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.profanity.Profanity.WordFilters build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.profanity.Profanity.WordFilters buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.profanity.Profanity.WordFilters buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.filters_ != java.util.Collections.EMPTY_LIST) {
          result.filters_ =
            java.util.Collections.unmodifiableList(result.filters_);
        }
        bnet.protocol.profanity.Profanity.WordFilters returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.profanity.Profanity.WordFilters) {
          return mergeFrom((bnet.protocol.profanity.Profanity.WordFilters)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.profanity.Profanity.WordFilters other) {
        if (other == bnet.protocol.profanity.Profanity.WordFilters.getDefaultInstance()) return this;
        if (!other.filters_.isEmpty()) {
          if (result.filters_.isEmpty()) {
            result.filters_ = new java.util.ArrayList<bnet.protocol.profanity.Profanity.WordFilter>();
          }
          result.filters_.addAll(other.filters_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              bnet.protocol.profanity.Profanity.WordFilter.Builder subBuilder = bnet.protocol.profanity.Profanity.WordFilter.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addFilters(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .bnet.protocol.profanity.WordFilter filters = 1;
      public java.util.List<bnet.protocol.profanity.Profanity.WordFilter> getFiltersList() {
        return java.util.Collections.unmodifiableList(result.filters_);
      }
      public int getFiltersCount() {
        return result.getFiltersCount();
      }
      public bnet.protocol.profanity.Profanity.WordFilter getFilters(int index) {
        return result.getFilters(index);
      }
      public Builder setFilters(int index, bnet.protocol.profanity.Profanity.WordFilter value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.filters_.set(index, value);
        return this;
      }
      public Builder setFilters(int index, bnet.protocol.profanity.Profanity.WordFilter.Builder builderForValue) {
        result.filters_.set(index, builderForValue.build());
        return this;
      }
      public Builder addFilters(bnet.protocol.profanity.Profanity.WordFilter value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.filters_.isEmpty()) {
          result.filters_ = new java.util.ArrayList<bnet.protocol.profanity.Profanity.WordFilter>();
        }
        result.filters_.add(value);
        return this;
      }
      public Builder addFilters(bnet.protocol.profanity.Profanity.WordFilter.Builder builderForValue) {
        if (result.filters_.isEmpty()) {
          result.filters_ = new java.util.ArrayList<bnet.protocol.profanity.Profanity.WordFilter>();
        }
        result.filters_.add(builderForValue.build());
        return this;
      }
      public Builder addAllFilters(
          java.lang.Iterable<? extends bnet.protocol.profanity.Profanity.WordFilter> values) {
        if (result.filters_.isEmpty()) {
          result.filters_ = new java.util.ArrayList<bnet.protocol.profanity.Profanity.WordFilter>();
        }
        super.addAll(values, result.filters_);
        return this;
      }
      public Builder clearFilters() {
        result.filters_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.profanity.WordFilters)
    }
    
    static {
      defaultInstance = new WordFilters(true);
      bnet.protocol.profanity.Profanity.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.profanity.WordFilters)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_profanity_WordFilter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_profanity_WordFilter_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_profanity_WordFilters_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_profanity_WordFilters_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035lib/profanity/profanity.proto\022\027bnet.pr" +
      "otocol.profanity\")\n\nWordFilter\022\014\n\004type\030\001" +
      " \002(\t\022\r\n\005regex\030\002 \002(\t\"C\n\013WordFilters\0224\n\007fi" +
      "lters\030\001 \003(\0132#.bnet.protocol.profanity.Wo" +
      "rdFilter"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_bnet_protocol_profanity_WordFilter_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_bnet_protocol_profanity_WordFilter_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_profanity_WordFilter_descriptor,
              new java.lang.String[] { "Type", "Regex", },
              bnet.protocol.profanity.Profanity.WordFilter.class,
              bnet.protocol.profanity.Profanity.WordFilter.Builder.class);
          internal_static_bnet_protocol_profanity_WordFilters_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_bnet_protocol_profanity_WordFilters_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_profanity_WordFilters_descriptor,
              new java.lang.String[] { "Filters", },
              bnet.protocol.profanity.Profanity.WordFilters.class,
              bnet.protocol.profanity.Profanity.WordFilters.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
