// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/game_master/game_master_types.proto

package bnet.protocol.game_master;

public final class GameMasterTypes {
  private GameMasterTypes() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Player extends
      com.google.protobuf.GeneratedMessage {
    // Use Player.newBuilder() to construct.
    private Player() {
      initFields();
    }
    private Player(boolean noInit) {}
    
    private static final Player defaultInstance;
    public static Player getDefaultInstance() {
      return defaultInstance;
    }
    
    public Player getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_Player_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_Player_fieldAccessorTable;
    }
    
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      TOON(0, 0),
      COMPUTER(1, 1),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static Type valueOf(int value) {
        switch (value) {
          case 0: return TOON;
          case 1: return COMPUTER;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.valueOf(number)
      ;        }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return bnet.protocol.game_master.GameMasterTypes.Player.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final Type[] VALUES = {
        TOON, COMPUTER, 
      };
      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      private final int index;
      private final int value;
      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      static {
        bnet.protocol.game_master.GameMasterTypes.getDescriptor();
      }
      
      // @@protoc_insertion_point(enum_scope:bnet.protocol.game_master.Player.Type)
    }
    
    // optional .bnet.protocol.game_master.Player.Type type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private bnet.protocol.game_master.GameMasterTypes.Player.Type type_;
    public boolean hasType() { return hasType; }
    public bnet.protocol.game_master.GameMasterTypes.Player.Type getType() { return type_; }
    
    // optional .bnet.protocol.EntityId toon_id = 2;
    public static final int TOON_ID_FIELD_NUMBER = 2;
    private boolean hasToonId;
    private bnet.protocol.Entity.EntityId toonId_;
    public boolean hasToonId() { return hasToonId; }
    public bnet.protocol.Entity.EntityId getToonId() { return toonId_; }
    
    // optional .bnet.protocol.EntityId game_account_id = 3;
    public static final int GAME_ACCOUNT_ID_FIELD_NUMBER = 3;
    private boolean hasGameAccountId;
    private bnet.protocol.Entity.EntityId gameAccountId_;
    public boolean hasGameAccountId() { return hasGameAccountId; }
    public bnet.protocol.Entity.EntityId getGameAccountId() { return gameAccountId_; }
    
    // optional .bnet.protocol.EntityId bnet_account_id = 4;
    public static final int BNET_ACCOUNT_ID_FIELD_NUMBER = 4;
    private boolean hasBnetAccountId;
    private bnet.protocol.Entity.EntityId bnetAccountId_;
    public boolean hasBnetAccountId() { return hasBnetAccountId; }
    public bnet.protocol.Entity.EntityId getBnetAccountId() { return bnetAccountId_; }
    
    // repeated .bnet.protocol.attribute.Attribute attribute = 5;
    public static final int ATTRIBUTE_FIELD_NUMBER = 5;
    private java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> attribute_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> getAttributeList() {
      return attribute_;
    }
    public int getAttributeCount() { return attribute_.size(); }
    public bnet.protocol.attribute.AttributeProto.Attribute getAttribute(int index) {
      return attribute_.get(index);
    }
    
    private void initFields() {
      type_ = bnet.protocol.game_master.GameMasterTypes.Player.Type.TOON;
      toonId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
      gameAccountId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
      bnetAccountId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (hasToonId()) {
        if (!getToonId().isInitialized()) return false;
      }
      if (hasGameAccountId()) {
        if (!getGameAccountId().isInitialized()) return false;
      }
      if (hasBnetAccountId()) {
        if (!getBnetAccountId().isInitialized()) return false;
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasToonId()) {
        output.writeMessage(2, getToonId());
      }
      if (hasGameAccountId()) {
        output.writeMessage(3, getGameAccountId());
      }
      if (hasBnetAccountId()) {
        output.writeMessage(4, getBnetAccountId());
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        output.writeMessage(5, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasToonId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getToonId());
      }
      if (hasGameAccountId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getGameAccountId());
      }
      if (hasBnetAccountId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getBnetAccountId());
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.Player parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.game_master.GameMasterTypes.Player prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.game_master.GameMasterTypes.Player result;
      
      // Construct using bnet.protocol.game_master.GameMasterTypes.Player.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.game_master.GameMasterTypes.Player();
        return builder;
      }
      
      protected bnet.protocol.game_master.GameMasterTypes.Player internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.game_master.GameMasterTypes.Player();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.game_master.GameMasterTypes.Player.getDescriptor();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.Player getDefaultInstanceForType() {
        return bnet.protocol.game_master.GameMasterTypes.Player.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.game_master.GameMasterTypes.Player build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.game_master.GameMasterTypes.Player buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.Player buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.attribute_ != java.util.Collections.EMPTY_LIST) {
          result.attribute_ =
            java.util.Collections.unmodifiableList(result.attribute_);
        }
        bnet.protocol.game_master.GameMasterTypes.Player returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.game_master.GameMasterTypes.Player) {
          return mergeFrom((bnet.protocol.game_master.GameMasterTypes.Player)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.game_master.GameMasterTypes.Player other) {
        if (other == bnet.protocol.game_master.GameMasterTypes.Player.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasToonId()) {
          mergeToonId(other.getToonId());
        }
        if (other.hasGameAccountId()) {
          mergeGameAccountId(other.getGameAccountId());
        }
        if (other.hasBnetAccountId()) {
          mergeBnetAccountId(other.getBnetAccountId());
        }
        if (!other.attribute_.isEmpty()) {
          if (result.attribute_.isEmpty()) {
            result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
          }
          result.attribute_.addAll(other.attribute_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              bnet.protocol.game_master.GameMasterTypes.Player.Type value = bnet.protocol.game_master.GameMasterTypes.Player.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                setType(value);
              }
              break;
            }
            case 18: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasToonId()) {
                subBuilder.mergeFrom(getToonId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToonId(subBuilder.buildPartial());
              break;
            }
            case 26: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasGameAccountId()) {
                subBuilder.mergeFrom(getGameAccountId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameAccountId(subBuilder.buildPartial());
              break;
            }
            case 34: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasBnetAccountId()) {
                subBuilder.mergeFrom(getBnetAccountId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setBnetAccountId(subBuilder.buildPartial());
              break;
            }
            case 42: {
              bnet.protocol.attribute.AttributeProto.Attribute.Builder subBuilder = bnet.protocol.attribute.AttributeProto.Attribute.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAttribute(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .bnet.protocol.game_master.Player.Type type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public bnet.protocol.game_master.GameMasterTypes.Player.Type getType() {
        return result.getType();
      }
      public Builder setType(bnet.protocol.game_master.GameMasterTypes.Player.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = bnet.protocol.game_master.GameMasterTypes.Player.Type.TOON;
        return this;
      }
      
      // optional .bnet.protocol.EntityId toon_id = 2;
      public boolean hasToonId() {
        return result.hasToonId();
      }
      public bnet.protocol.Entity.EntityId getToonId() {
        return result.getToonId();
      }
      public Builder setToonId(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder setToonId(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasToonId = true;
        result.toonId_ = builderForValue.build();
        return this;
      }
      public Builder mergeToonId(bnet.protocol.Entity.EntityId value) {
        if (result.hasToonId() &&
            result.toonId_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.toonId_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.toonId_).mergeFrom(value).buildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder clearToonId() {
        result.hasToonId = false;
        result.toonId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // optional .bnet.protocol.EntityId game_account_id = 3;
      public boolean hasGameAccountId() {
        return result.hasGameAccountId();
      }
      public bnet.protocol.Entity.EntityId getGameAccountId() {
        return result.getGameAccountId();
      }
      public Builder setGameAccountId(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameAccountId = true;
        result.gameAccountId_ = value;
        return this;
      }
      public Builder setGameAccountId(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasGameAccountId = true;
        result.gameAccountId_ = builderForValue.build();
        return this;
      }
      public Builder mergeGameAccountId(bnet.protocol.Entity.EntityId value) {
        if (result.hasGameAccountId() &&
            result.gameAccountId_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.gameAccountId_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.gameAccountId_).mergeFrom(value).buildPartial();
        } else {
          result.gameAccountId_ = value;
        }
        result.hasGameAccountId = true;
        return this;
      }
      public Builder clearGameAccountId() {
        result.hasGameAccountId = false;
        result.gameAccountId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // optional .bnet.protocol.EntityId bnet_account_id = 4;
      public boolean hasBnetAccountId() {
        return result.hasBnetAccountId();
      }
      public bnet.protocol.Entity.EntityId getBnetAccountId() {
        return result.getBnetAccountId();
      }
      public Builder setBnetAccountId(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = value;
        return this;
      }
      public Builder setBnetAccountId(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasBnetAccountId = true;
        result.bnetAccountId_ = builderForValue.build();
        return this;
      }
      public Builder mergeBnetAccountId(bnet.protocol.Entity.EntityId value) {
        if (result.hasBnetAccountId() &&
            result.bnetAccountId_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.bnetAccountId_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.bnetAccountId_).mergeFrom(value).buildPartial();
        } else {
          result.bnetAccountId_ = value;
        }
        result.hasBnetAccountId = true;
        return this;
      }
      public Builder clearBnetAccountId() {
        result.hasBnetAccountId = false;
        result.bnetAccountId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 5;
      public java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> getAttributeList() {
        return java.util.Collections.unmodifiableList(result.attribute_);
      }
      public int getAttributeCount() {
        return result.getAttributeCount();
      }
      public bnet.protocol.attribute.AttributeProto.Attribute getAttribute(int index) {
        return result.getAttribute(index);
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.AttributeProto.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.attribute_.set(index, value);
        return this;
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.AttributeProto.Attribute.Builder builderForValue) {
        result.attribute_.set(index, builderForValue.build());
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.AttributeProto.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        result.attribute_.add(value);
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.AttributeProto.Attribute.Builder builderForValue) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        result.attribute_.add(builderForValue.build());
        return this;
      }
      public Builder addAllAttribute(
          java.lang.Iterable<? extends bnet.protocol.attribute.AttributeProto.Attribute> values) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        super.addAll(values, result.attribute_);
        return this;
      }
      public Builder clearAttribute() {
        result.attribute_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.game_master.Player)
    }
    
    static {
      defaultInstance = new Player(true);
      bnet.protocol.game_master.GameMasterTypes.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.Player)
  }
  
  public static final class ConnectInfo extends
      com.google.protobuf.GeneratedMessage {
    // Use ConnectInfo.newBuilder() to construct.
    private ConnectInfo() {
      initFields();
    }
    private ConnectInfo(boolean noInit) {}
    
    private static final ConnectInfo defaultInstance;
    public static ConnectInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public ConnectInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_ConnectInfo_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_ConnectInfo_fieldAccessorTable;
    }
    
    // required .bnet.protocol.EntityId toon_id = 1;
    public static final int TOON_ID_FIELD_NUMBER = 1;
    private boolean hasToonId;
    private bnet.protocol.Entity.EntityId toonId_;
    public boolean hasToonId() { return hasToonId; }
    public bnet.protocol.Entity.EntityId getToonId() { return toonId_; }
    
    // required string host = 2;
    public static final int HOST_FIELD_NUMBER = 2;
    private boolean hasHost;
    private java.lang.String host_ = "";
    public boolean hasHost() { return hasHost; }
    public java.lang.String getHost() { return host_; }
    
    // required int32 port = 3;
    public static final int PORT_FIELD_NUMBER = 3;
    private boolean hasPort;
    private int port_ = 0;
    public boolean hasPort() { return hasPort; }
    public int getPort() { return port_; }
    
    // optional bytes token = 4;
    public static final int TOKEN_FIELD_NUMBER = 4;
    private boolean hasToken;
    private com.google.protobuf.ByteString token_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasToken() { return hasToken; }
    public com.google.protobuf.ByteString getToken() { return token_; }
    
    // repeated .bnet.protocol.attribute.Attribute attribute = 5;
    public static final int ATTRIBUTE_FIELD_NUMBER = 5;
    private java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> attribute_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> getAttributeList() {
      return attribute_;
    }
    public int getAttributeCount() { return attribute_.size(); }
    public bnet.protocol.attribute.AttributeProto.Attribute getAttribute(int index) {
      return attribute_.get(index);
    }
    
    private void initFields() {
      toonId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasToonId) return false;
      if (!hasHost) return false;
      if (!hasPort) return false;
      if (!getToonId().isInitialized()) return false;
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasToonId()) {
        output.writeMessage(1, getToonId());
      }
      if (hasHost()) {
        output.writeString(2, getHost());
      }
      if (hasPort()) {
        output.writeInt32(3, getPort());
      }
      if (hasToken()) {
        output.writeBytes(4, getToken());
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        output.writeMessage(5, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasToonId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getToonId());
      }
      if (hasHost()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getHost());
      }
      if (hasPort()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getPort());
      }
      if (hasToken()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getToken());
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.ConnectInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.game_master.GameMasterTypes.ConnectInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.game_master.GameMasterTypes.ConnectInfo result;
      
      // Construct using bnet.protocol.game_master.GameMasterTypes.ConnectInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.game_master.GameMasterTypes.ConnectInfo();
        return builder;
      }
      
      protected bnet.protocol.game_master.GameMasterTypes.ConnectInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.game_master.GameMasterTypes.ConnectInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.game_master.GameMasterTypes.ConnectInfo.getDescriptor();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.ConnectInfo getDefaultInstanceForType() {
        return bnet.protocol.game_master.GameMasterTypes.ConnectInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.game_master.GameMasterTypes.ConnectInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.game_master.GameMasterTypes.ConnectInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.ConnectInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.attribute_ != java.util.Collections.EMPTY_LIST) {
          result.attribute_ =
            java.util.Collections.unmodifiableList(result.attribute_);
        }
        bnet.protocol.game_master.GameMasterTypes.ConnectInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.game_master.GameMasterTypes.ConnectInfo) {
          return mergeFrom((bnet.protocol.game_master.GameMasterTypes.ConnectInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.game_master.GameMasterTypes.ConnectInfo other) {
        if (other == bnet.protocol.game_master.GameMasterTypes.ConnectInfo.getDefaultInstance()) return this;
        if (other.hasToonId()) {
          mergeToonId(other.getToonId());
        }
        if (other.hasHost()) {
          setHost(other.getHost());
        }
        if (other.hasPort()) {
          setPort(other.getPort());
        }
        if (other.hasToken()) {
          setToken(other.getToken());
        }
        if (!other.attribute_.isEmpty()) {
          if (result.attribute_.isEmpty()) {
            result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
          }
          result.attribute_.addAll(other.attribute_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasToonId()) {
                subBuilder.mergeFrom(getToonId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setToonId(subBuilder.buildPartial());
              break;
            }
            case 18: {
              setHost(input.readString());
              break;
            }
            case 24: {
              setPort(input.readInt32());
              break;
            }
            case 34: {
              setToken(input.readBytes());
              break;
            }
            case 42: {
              bnet.protocol.attribute.AttributeProto.Attribute.Builder subBuilder = bnet.protocol.attribute.AttributeProto.Attribute.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAttribute(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .bnet.protocol.EntityId toon_id = 1;
      public boolean hasToonId() {
        return result.hasToonId();
      }
      public bnet.protocol.Entity.EntityId getToonId() {
        return result.getToonId();
      }
      public Builder setToonId(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasToonId = true;
        result.toonId_ = value;
        return this;
      }
      public Builder setToonId(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasToonId = true;
        result.toonId_ = builderForValue.build();
        return this;
      }
      public Builder mergeToonId(bnet.protocol.Entity.EntityId value) {
        if (result.hasToonId() &&
            result.toonId_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.toonId_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.toonId_).mergeFrom(value).buildPartial();
        } else {
          result.toonId_ = value;
        }
        result.hasToonId = true;
        return this;
      }
      public Builder clearToonId() {
        result.hasToonId = false;
        result.toonId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // required string host = 2;
      public boolean hasHost() {
        return result.hasHost();
      }
      public java.lang.String getHost() {
        return result.getHost();
      }
      public Builder setHost(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasHost = true;
        result.host_ = value;
        return this;
      }
      public Builder clearHost() {
        result.hasHost = false;
        result.host_ = getDefaultInstance().getHost();
        return this;
      }
      
      // required int32 port = 3;
      public boolean hasPort() {
        return result.hasPort();
      }
      public int getPort() {
        return result.getPort();
      }
      public Builder setPort(int value) {
        result.hasPort = true;
        result.port_ = value;
        return this;
      }
      public Builder clearPort() {
        result.hasPort = false;
        result.port_ = 0;
        return this;
      }
      
      // optional bytes token = 4;
      public boolean hasToken() {
        return result.hasToken();
      }
      public com.google.protobuf.ByteString getToken() {
        return result.getToken();
      }
      public Builder setToken(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasToken = true;
        result.token_ = value;
        return this;
      }
      public Builder clearToken() {
        result.hasToken = false;
        result.token_ = getDefaultInstance().getToken();
        return this;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 5;
      public java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> getAttributeList() {
        return java.util.Collections.unmodifiableList(result.attribute_);
      }
      public int getAttributeCount() {
        return result.getAttributeCount();
      }
      public bnet.protocol.attribute.AttributeProto.Attribute getAttribute(int index) {
        return result.getAttribute(index);
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.AttributeProto.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.attribute_.set(index, value);
        return this;
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.AttributeProto.Attribute.Builder builderForValue) {
        result.attribute_.set(index, builderForValue.build());
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.AttributeProto.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        result.attribute_.add(value);
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.AttributeProto.Attribute.Builder builderForValue) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        result.attribute_.add(builderForValue.build());
        return this;
      }
      public Builder addAllAttribute(
          java.lang.Iterable<? extends bnet.protocol.attribute.AttributeProto.Attribute> values) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        super.addAll(values, result.attribute_);
        return this;
      }
      public Builder clearAttribute() {
        result.attribute_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.game_master.ConnectInfo)
    }
    
    static {
      defaultInstance = new ConnectInfo(true);
      bnet.protocol.game_master.GameMasterTypes.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.ConnectInfo)
  }
  
  public static final class GameStatsBucket extends
      com.google.protobuf.GeneratedMessage {
    // Use GameStatsBucket.newBuilder() to construct.
    private GameStatsBucket() {
      initFields();
    }
    private GameStatsBucket(boolean noInit) {}
    
    private static final GameStatsBucket defaultInstance;
    public static GameStatsBucket getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameStatsBucket getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_GameStatsBucket_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_GameStatsBucket_fieldAccessorTable;
    }
    
    // optional float bucket_min = 1;
    public static final int BUCKET_MIN_FIELD_NUMBER = 1;
    private boolean hasBucketMin;
    private float bucketMin_ = 0F;
    public boolean hasBucketMin() { return hasBucketMin; }
    public float getBucketMin() { return bucketMin_; }
    
    // optional float bucket_max = 2;
    public static final int BUCKET_MAX_FIELD_NUMBER = 2;
    private boolean hasBucketMax;
    private float bucketMax_ = 0F;
    public boolean hasBucketMax() { return hasBucketMax; }
    public float getBucketMax() { return bucketMax_; }
    
    // optional uint32 wait_milliseconds = 3;
    public static final int WAIT_MILLISECONDS_FIELD_NUMBER = 3;
    private boolean hasWaitMilliseconds;
    private int waitMilliseconds_ = 0;
    public boolean hasWaitMilliseconds() { return hasWaitMilliseconds; }
    public int getWaitMilliseconds() { return waitMilliseconds_; }
    
    // optional uint32 games_per_hour = 4;
    public static final int GAMES_PER_HOUR_FIELD_NUMBER = 4;
    private boolean hasGamesPerHour;
    private int gamesPerHour_ = 0;
    public boolean hasGamesPerHour() { return hasGamesPerHour; }
    public int getGamesPerHour() { return gamesPerHour_; }
    
    // optional uint32 active_games = 5;
    public static final int ACTIVE_GAMES_FIELD_NUMBER = 5;
    private boolean hasActiveGames;
    private int activeGames_ = 0;
    public boolean hasActiveGames() { return hasActiveGames; }
    public int getActiveGames() { return activeGames_; }
    
    // optional uint32 active_players = 6;
    public static final int ACTIVE_PLAYERS_FIELD_NUMBER = 6;
    private boolean hasActivePlayers;
    private int activePlayers_ = 0;
    public boolean hasActivePlayers() { return hasActivePlayers; }
    public int getActivePlayers() { return activePlayers_; }
    
    // optional uint32 forming_games = 7;
    public static final int FORMING_GAMES_FIELD_NUMBER = 7;
    private boolean hasFormingGames;
    private int formingGames_ = 0;
    public boolean hasFormingGames() { return hasFormingGames; }
    public int getFormingGames() { return formingGames_; }
    
    // optional uint32 waiting_players = 8;
    public static final int WAITING_PLAYERS_FIELD_NUMBER = 8;
    private boolean hasWaitingPlayers;
    private int waitingPlayers_ = 0;
    public boolean hasWaitingPlayers() { return hasWaitingPlayers; }
    public int getWaitingPlayers() { return waitingPlayers_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasBucketMin()) {
        output.writeFloat(1, getBucketMin());
      }
      if (hasBucketMax()) {
        output.writeFloat(2, getBucketMax());
      }
      if (hasWaitMilliseconds()) {
        output.writeUInt32(3, getWaitMilliseconds());
      }
      if (hasGamesPerHour()) {
        output.writeUInt32(4, getGamesPerHour());
      }
      if (hasActiveGames()) {
        output.writeUInt32(5, getActiveGames());
      }
      if (hasActivePlayers()) {
        output.writeUInt32(6, getActivePlayers());
      }
      if (hasFormingGames()) {
        output.writeUInt32(7, getFormingGames());
      }
      if (hasWaitingPlayers()) {
        output.writeUInt32(8, getWaitingPlayers());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasBucketMin()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, getBucketMin());
      }
      if (hasBucketMax()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, getBucketMax());
      }
      if (hasWaitMilliseconds()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, getWaitMilliseconds());
      }
      if (hasGamesPerHour()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, getGamesPerHour());
      }
      if (hasActiveGames()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, getActiveGames());
      }
      if (hasActivePlayers()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, getActivePlayers());
      }
      if (hasFormingGames()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, getFormingGames());
      }
      if (hasWaitingPlayers()) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, getWaitingPlayers());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameStatsBucket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.game_master.GameMasterTypes.GameStatsBucket prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.game_master.GameMasterTypes.GameStatsBucket result;
      
      // Construct using bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.game_master.GameMasterTypes.GameStatsBucket();
        return builder;
      }
      
      protected bnet.protocol.game_master.GameMasterTypes.GameStatsBucket internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.game_master.GameMasterTypes.GameStatsBucket();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.getDescriptor();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.GameStatsBucket getDefaultInstanceForType() {
        return bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.game_master.GameMasterTypes.GameStatsBucket build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.game_master.GameMasterTypes.GameStatsBucket buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.GameStatsBucket buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.game_master.GameMasterTypes.GameStatsBucket returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.game_master.GameMasterTypes.GameStatsBucket) {
          return mergeFrom((bnet.protocol.game_master.GameMasterTypes.GameStatsBucket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.game_master.GameMasterTypes.GameStatsBucket other) {
        if (other == bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.getDefaultInstance()) return this;
        if (other.hasBucketMin()) {
          setBucketMin(other.getBucketMin());
        }
        if (other.hasBucketMax()) {
          setBucketMax(other.getBucketMax());
        }
        if (other.hasWaitMilliseconds()) {
          setWaitMilliseconds(other.getWaitMilliseconds());
        }
        if (other.hasGamesPerHour()) {
          setGamesPerHour(other.getGamesPerHour());
        }
        if (other.hasActiveGames()) {
          setActiveGames(other.getActiveGames());
        }
        if (other.hasActivePlayers()) {
          setActivePlayers(other.getActivePlayers());
        }
        if (other.hasFormingGames()) {
          setFormingGames(other.getFormingGames());
        }
        if (other.hasWaitingPlayers()) {
          setWaitingPlayers(other.getWaitingPlayers());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 13: {
              setBucketMin(input.readFloat());
              break;
            }
            case 21: {
              setBucketMax(input.readFloat());
              break;
            }
            case 24: {
              setWaitMilliseconds(input.readUInt32());
              break;
            }
            case 32: {
              setGamesPerHour(input.readUInt32());
              break;
            }
            case 40: {
              setActiveGames(input.readUInt32());
              break;
            }
            case 48: {
              setActivePlayers(input.readUInt32());
              break;
            }
            case 56: {
              setFormingGames(input.readUInt32());
              break;
            }
            case 64: {
              setWaitingPlayers(input.readUInt32());
              break;
            }
          }
        }
      }
      
      
      // optional float bucket_min = 1;
      public boolean hasBucketMin() {
        return result.hasBucketMin();
      }
      public float getBucketMin() {
        return result.getBucketMin();
      }
      public Builder setBucketMin(float value) {
        result.hasBucketMin = true;
        result.bucketMin_ = value;
        return this;
      }
      public Builder clearBucketMin() {
        result.hasBucketMin = false;
        result.bucketMin_ = 0F;
        return this;
      }
      
      // optional float bucket_max = 2;
      public boolean hasBucketMax() {
        return result.hasBucketMax();
      }
      public float getBucketMax() {
        return result.getBucketMax();
      }
      public Builder setBucketMax(float value) {
        result.hasBucketMax = true;
        result.bucketMax_ = value;
        return this;
      }
      public Builder clearBucketMax() {
        result.hasBucketMax = false;
        result.bucketMax_ = 0F;
        return this;
      }
      
      // optional uint32 wait_milliseconds = 3;
      public boolean hasWaitMilliseconds() {
        return result.hasWaitMilliseconds();
      }
      public int getWaitMilliseconds() {
        return result.getWaitMilliseconds();
      }
      public Builder setWaitMilliseconds(int value) {
        result.hasWaitMilliseconds = true;
        result.waitMilliseconds_ = value;
        return this;
      }
      public Builder clearWaitMilliseconds() {
        result.hasWaitMilliseconds = false;
        result.waitMilliseconds_ = 0;
        return this;
      }
      
      // optional uint32 games_per_hour = 4;
      public boolean hasGamesPerHour() {
        return result.hasGamesPerHour();
      }
      public int getGamesPerHour() {
        return result.getGamesPerHour();
      }
      public Builder setGamesPerHour(int value) {
        result.hasGamesPerHour = true;
        result.gamesPerHour_ = value;
        return this;
      }
      public Builder clearGamesPerHour() {
        result.hasGamesPerHour = false;
        result.gamesPerHour_ = 0;
        return this;
      }
      
      // optional uint32 active_games = 5;
      public boolean hasActiveGames() {
        return result.hasActiveGames();
      }
      public int getActiveGames() {
        return result.getActiveGames();
      }
      public Builder setActiveGames(int value) {
        result.hasActiveGames = true;
        result.activeGames_ = value;
        return this;
      }
      public Builder clearActiveGames() {
        result.hasActiveGames = false;
        result.activeGames_ = 0;
        return this;
      }
      
      // optional uint32 active_players = 6;
      public boolean hasActivePlayers() {
        return result.hasActivePlayers();
      }
      public int getActivePlayers() {
        return result.getActivePlayers();
      }
      public Builder setActivePlayers(int value) {
        result.hasActivePlayers = true;
        result.activePlayers_ = value;
        return this;
      }
      public Builder clearActivePlayers() {
        result.hasActivePlayers = false;
        result.activePlayers_ = 0;
        return this;
      }
      
      // optional uint32 forming_games = 7;
      public boolean hasFormingGames() {
        return result.hasFormingGames();
      }
      public int getFormingGames() {
        return result.getFormingGames();
      }
      public Builder setFormingGames(int value) {
        result.hasFormingGames = true;
        result.formingGames_ = value;
        return this;
      }
      public Builder clearFormingGames() {
        result.hasFormingGames = false;
        result.formingGames_ = 0;
        return this;
      }
      
      // optional uint32 waiting_players = 8;
      public boolean hasWaitingPlayers() {
        return result.hasWaitingPlayers();
      }
      public int getWaitingPlayers() {
        return result.getWaitingPlayers();
      }
      public Builder setWaitingPlayers(int value) {
        result.hasWaitingPlayers = true;
        result.waitingPlayers_ = value;
        return this;
      }
      public Builder clearWaitingPlayers() {
        result.hasWaitingPlayers = false;
        result.waitingPlayers_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.game_master.GameStatsBucket)
    }
    
    static {
      defaultInstance = new GameStatsBucket(true);
      bnet.protocol.game_master.GameMasterTypes.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.GameStatsBucket)
  }
  
  public static final class GameFactoryDescription extends
      com.google.protobuf.GeneratedMessage {
    // Use GameFactoryDescription.newBuilder() to construct.
    private GameFactoryDescription() {
      initFields();
    }
    private GameFactoryDescription(boolean noInit) {}
    
    private static final GameFactoryDescription defaultInstance;
    public static GameFactoryDescription getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameFactoryDescription getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_GameFactoryDescription_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_GameFactoryDescription_fieldAccessorTable;
    }
    
    // required fixed64 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private boolean hasId;
    private long id_ = 0L;
    public boolean hasId() { return hasId; }
    public long getId() { return id_; }
    
    // optional string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private boolean hasName;
    private java.lang.String name_ = "";
    public boolean hasName() { return hasName; }
    public java.lang.String getName() { return name_; }
    
    // repeated .bnet.protocol.attribute.Attribute attribute = 3;
    public static final int ATTRIBUTE_FIELD_NUMBER = 3;
    private java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> attribute_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> getAttributeList() {
      return attribute_;
    }
    public int getAttributeCount() { return attribute_.size(); }
    public bnet.protocol.attribute.AttributeProto.Attribute getAttribute(int index) {
      return attribute_.get(index);
    }
    
    // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
    public static final int STATS_BUCKET_FIELD_NUMBER = 4;
    private java.util.List<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket> statsBucket_ =
      java.util.Collections.emptyList();
    public java.util.List<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket> getStatsBucketList() {
      return statsBucket_;
    }
    public int getStatsBucketCount() { return statsBucket_.size(); }
    public bnet.protocol.game_master.GameMasterTypes.GameStatsBucket getStatsBucket(int index) {
      return statsBucket_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasId) return false;
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasId()) {
        output.writeFixed64(1, getId());
      }
      if (hasName()) {
        output.writeString(2, getName());
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        output.writeMessage(3, element);
      }
      for (bnet.protocol.game_master.GameMasterTypes.GameStatsBucket element : getStatsBucketList()) {
        output.writeMessage(4, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(1, getId());
      }
      if (hasName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getName());
      }
      for (bnet.protocol.attribute.AttributeProto.Attribute element : getAttributeList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      for (bnet.protocol.game_master.GameMasterTypes.GameStatsBucket element : getStatsBucketList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription result;
      
      // Construct using bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription();
        return builder;
      }
      
      protected bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription.getDescriptor();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription getDefaultInstanceForType() {
        return bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.attribute_ != java.util.Collections.EMPTY_LIST) {
          result.attribute_ =
            java.util.Collections.unmodifiableList(result.attribute_);
        }
        if (result.statsBucket_ != java.util.Collections.EMPTY_LIST) {
          result.statsBucket_ =
            java.util.Collections.unmodifiableList(result.statsBucket_);
        }
        bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription) {
          return mergeFrom((bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription other) {
        if (other == bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (!other.attribute_.isEmpty()) {
          if (result.attribute_.isEmpty()) {
            result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
          }
          result.attribute_.addAll(other.attribute_);
        }
        if (!other.statsBucket_.isEmpty()) {
          if (result.statsBucket_.isEmpty()) {
            result.statsBucket_ = new java.util.ArrayList<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket>();
          }
          result.statsBucket_.addAll(other.statsBucket_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 9: {
              setId(input.readFixed64());
              break;
            }
            case 18: {
              setName(input.readString());
              break;
            }
            case 26: {
              bnet.protocol.attribute.AttributeProto.Attribute.Builder subBuilder = bnet.protocol.attribute.AttributeProto.Attribute.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addAttribute(subBuilder.buildPartial());
              break;
            }
            case 34: {
              bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.Builder subBuilder = bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addStatsBucket(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required fixed64 id = 1;
      public boolean hasId() {
        return result.hasId();
      }
      public long getId() {
        return result.getId();
      }
      public Builder setId(long value) {
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder clearId() {
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      // optional string name = 2;
      public boolean hasName() {
        return result.hasName();
      }
      public java.lang.String getName() {
        return result.getName();
      }
      public Builder setName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder clearName() {
        result.hasName = false;
        result.name_ = getDefaultInstance().getName();
        return this;
      }
      
      // repeated .bnet.protocol.attribute.Attribute attribute = 3;
      public java.util.List<bnet.protocol.attribute.AttributeProto.Attribute> getAttributeList() {
        return java.util.Collections.unmodifiableList(result.attribute_);
      }
      public int getAttributeCount() {
        return result.getAttributeCount();
      }
      public bnet.protocol.attribute.AttributeProto.Attribute getAttribute(int index) {
        return result.getAttribute(index);
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.AttributeProto.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.attribute_.set(index, value);
        return this;
      }
      public Builder setAttribute(int index, bnet.protocol.attribute.AttributeProto.Attribute.Builder builderForValue) {
        result.attribute_.set(index, builderForValue.build());
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.AttributeProto.Attribute value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        result.attribute_.add(value);
        return this;
      }
      public Builder addAttribute(bnet.protocol.attribute.AttributeProto.Attribute.Builder builderForValue) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        result.attribute_.add(builderForValue.build());
        return this;
      }
      public Builder addAllAttribute(
          java.lang.Iterable<? extends bnet.protocol.attribute.AttributeProto.Attribute> values) {
        if (result.attribute_.isEmpty()) {
          result.attribute_ = new java.util.ArrayList<bnet.protocol.attribute.AttributeProto.Attribute>();
        }
        super.addAll(values, result.attribute_);
        return this;
      }
      public Builder clearAttribute() {
        result.attribute_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
      public java.util.List<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket> getStatsBucketList() {
        return java.util.Collections.unmodifiableList(result.statsBucket_);
      }
      public int getStatsBucketCount() {
        return result.getStatsBucketCount();
      }
      public bnet.protocol.game_master.GameMasterTypes.GameStatsBucket getStatsBucket(int index) {
        return result.getStatsBucket(index);
      }
      public Builder setStatsBucket(int index, bnet.protocol.game_master.GameMasterTypes.GameStatsBucket value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.statsBucket_.set(index, value);
        return this;
      }
      public Builder setStatsBucket(int index, bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.Builder builderForValue) {
        result.statsBucket_.set(index, builderForValue.build());
        return this;
      }
      public Builder addStatsBucket(bnet.protocol.game_master.GameMasterTypes.GameStatsBucket value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.statsBucket_.isEmpty()) {
          result.statsBucket_ = new java.util.ArrayList<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket>();
        }
        result.statsBucket_.add(value);
        return this;
      }
      public Builder addStatsBucket(bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.Builder builderForValue) {
        if (result.statsBucket_.isEmpty()) {
          result.statsBucket_ = new java.util.ArrayList<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket>();
        }
        result.statsBucket_.add(builderForValue.build());
        return this;
      }
      public Builder addAllStatsBucket(
          java.lang.Iterable<? extends bnet.protocol.game_master.GameMasterTypes.GameStatsBucket> values) {
        if (result.statsBucket_.isEmpty()) {
          result.statsBucket_ = new java.util.ArrayList<bnet.protocol.game_master.GameMasterTypes.GameStatsBucket>();
        }
        super.addAll(values, result.statsBucket_);
        return this;
      }
      public Builder clearStatsBucket() {
        result.statsBucket_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.game_master.GameFactoryDescription)
    }
    
    static {
      defaultInstance = new GameFactoryDescription(true);
      bnet.protocol.game_master.GameMasterTypes.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.GameFactoryDescription)
  }
  
  public static final class GameHandle extends
      com.google.protobuf.GeneratedMessage {
    // Use GameHandle.newBuilder() to construct.
    private GameHandle() {
      initFields();
    }
    private GameHandle(boolean noInit) {}
    
    private static final GameHandle defaultInstance;
    public static GameHandle getDefaultInstance() {
      return defaultInstance;
    }
    
    public GameHandle getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_GameHandle_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return bnet.protocol.game_master.GameMasterTypes.internal_static_bnet_protocol_game_master_GameHandle_fieldAccessorTable;
    }
    
    // required fixed64 factory_id = 1;
    public static final int FACTORY_ID_FIELD_NUMBER = 1;
    private boolean hasFactoryId;
    private long factoryId_ = 0L;
    public boolean hasFactoryId() { return hasFactoryId; }
    public long getFactoryId() { return factoryId_; }
    
    // required .bnet.protocol.EntityId game_id = 2;
    public static final int GAME_ID_FIELD_NUMBER = 2;
    private boolean hasGameId;
    private bnet.protocol.Entity.EntityId gameId_;
    public boolean hasGameId() { return hasGameId; }
    public bnet.protocol.Entity.EntityId getGameId() { return gameId_; }
    
    private void initFields() {
      gameId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
    }
    public final boolean isInitialized() {
      if (!hasFactoryId) return false;
      if (!hasGameId) return false;
      if (!getGameId().isInitialized()) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasFactoryId()) {
        output.writeFixed64(1, getFactoryId());
      }
      if (hasGameId()) {
        output.writeMessage(2, getGameId());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasFactoryId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(1, getFactoryId());
      }
      if (hasGameId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getGameId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static bnet.protocol.game_master.GameMasterTypes.GameHandle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(bnet.protocol.game_master.GameMasterTypes.GameHandle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private bnet.protocol.game_master.GameMasterTypes.GameHandle result;
      
      // Construct using bnet.protocol.game_master.GameMasterTypes.GameHandle.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new bnet.protocol.game_master.GameMasterTypes.GameHandle();
        return builder;
      }
      
      protected bnet.protocol.game_master.GameMasterTypes.GameHandle internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new bnet.protocol.game_master.GameMasterTypes.GameHandle();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return bnet.protocol.game_master.GameMasterTypes.GameHandle.getDescriptor();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.GameHandle getDefaultInstanceForType() {
        return bnet.protocol.game_master.GameMasterTypes.GameHandle.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public bnet.protocol.game_master.GameMasterTypes.GameHandle build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private bnet.protocol.game_master.GameMasterTypes.GameHandle buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public bnet.protocol.game_master.GameMasterTypes.GameHandle buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        bnet.protocol.game_master.GameMasterTypes.GameHandle returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof bnet.protocol.game_master.GameMasterTypes.GameHandle) {
          return mergeFrom((bnet.protocol.game_master.GameMasterTypes.GameHandle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(bnet.protocol.game_master.GameMasterTypes.GameHandle other) {
        if (other == bnet.protocol.game_master.GameMasterTypes.GameHandle.getDefaultInstance()) return this;
        if (other.hasFactoryId()) {
          setFactoryId(other.getFactoryId());
        }
        if (other.hasGameId()) {
          mergeGameId(other.getGameId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 9: {
              setFactoryId(input.readFixed64());
              break;
            }
            case 18: {
              bnet.protocol.Entity.EntityId.Builder subBuilder = bnet.protocol.Entity.EntityId.newBuilder();
              if (hasGameId()) {
                subBuilder.mergeFrom(getGameId());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameId(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required fixed64 factory_id = 1;
      public boolean hasFactoryId() {
        return result.hasFactoryId();
      }
      public long getFactoryId() {
        return result.getFactoryId();
      }
      public Builder setFactoryId(long value) {
        result.hasFactoryId = true;
        result.factoryId_ = value;
        return this;
      }
      public Builder clearFactoryId() {
        result.hasFactoryId = false;
        result.factoryId_ = 0L;
        return this;
      }
      
      // required .bnet.protocol.EntityId game_id = 2;
      public boolean hasGameId() {
        return result.hasGameId();
      }
      public bnet.protocol.Entity.EntityId getGameId() {
        return result.getGameId();
      }
      public Builder setGameId(bnet.protocol.Entity.EntityId value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder setGameId(bnet.protocol.Entity.EntityId.Builder builderForValue) {
        result.hasGameId = true;
        result.gameId_ = builderForValue.build();
        return this;
      }
      public Builder mergeGameId(bnet.protocol.Entity.EntityId value) {
        if (result.hasGameId() &&
            result.gameId_ != bnet.protocol.Entity.EntityId.getDefaultInstance()) {
          result.gameId_ =
            bnet.protocol.Entity.EntityId.newBuilder(result.gameId_).mergeFrom(value).buildPartial();
        } else {
          result.gameId_ = value;
        }
        result.hasGameId = true;
        return this;
      }
      public Builder clearGameId() {
        result.hasGameId = false;
        result.gameId_ = bnet.protocol.Entity.EntityId.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:bnet.protocol.game_master.GameHandle)
    }
    
    static {
      defaultInstance = new GameHandle(true);
      bnet.protocol.game_master.GameMasterTypes.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:bnet.protocol.game_master.GameHandle)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_game_master_Player_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_game_master_Player_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_game_master_ConnectInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_game_master_ConnectInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_game_master_GameStatsBucket_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_game_master_GameStatsBucket_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_game_master_GameFactoryDescription_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_game_master_GameFactoryDescription_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_bnet_protocol_game_master_GameHandle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_bnet_protocol_game_master_GameHandle_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n+service/game_master/game_master_types." +
      "proto\022\031bnet.protocol.game_master\032\034lib/pr" +
      "otocol/attribute.proto\032\031lib/protocol/ent" +
      "ity.proto\"\243\002\n\006Player\0224\n\004type\030\001 \001(\0162&.bne" +
      "t.protocol.game_master.Player.Type\022(\n\007to" +
      "on_id\030\002 \001(\0132\027.bnet.protocol.EntityId\0220\n\017" +
      "game_account_id\030\003 \001(\0132\027.bnet.protocol.En" +
      "tityId\0220\n\017bnet_account_id\030\004 \001(\0132\027.bnet.p" +
      "rotocol.EntityId\0225\n\tattribute\030\005 \003(\0132\".bn" +
      "et.protocol.attribute.Attribute\"\036\n\004Type\022",
      "\010\n\004TOON\020\000\022\014\n\010COMPUTER\020\001\"\231\001\n\013ConnectInfo\022" +
      "(\n\007toon_id\030\001 \002(\0132\027.bnet.protocol.EntityI" +
      "d\022\014\n\004host\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\022\r\n\005token\030\004" +
      " \001(\014\0225\n\tattribute\030\005 \003(\0132\".bnet.protocol." +
      "attribute.Attribute\"\312\001\n\017GameStatsBucket\022" +
      "\022\n\nbucket_min\030\001 \001(\002\022\022\n\nbucket_max\030\002 \001(\002\022" +
      "\031\n\021wait_milliseconds\030\003 \001(\r\022\026\n\016games_per_" +
      "hour\030\004 \001(\r\022\024\n\014active_games\030\005 \001(\r\022\026\n\016acti" +
      "ve_players\030\006 \001(\r\022\025\n\rforming_games\030\007 \001(\r\022" +
      "\027\n\017waiting_players\030\010 \001(\r\"\253\001\n\026GameFactory",
      "Description\022\n\n\002id\030\001 \002(\006\022\014\n\004name\030\002 \001(\t\0225\n" +
      "\tattribute\030\003 \003(\0132\".bnet.protocol.attribu" +
      "te.Attribute\022@\n\014stats_bucket\030\004 \003(\0132*.bne" +
      "t.protocol.game_master.GameStatsBucket\"J" +
      "\n\nGameHandle\022\022\n\nfactory_id\030\001 \002(\006\022(\n\007game" +
      "_id\030\002 \002(\0132\027.bnet.protocol.EntityId"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_bnet_protocol_game_master_Player_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_bnet_protocol_game_master_Player_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_game_master_Player_descriptor,
              new java.lang.String[] { "Type", "ToonId", "GameAccountId", "BnetAccountId", "Attribute", },
              bnet.protocol.game_master.GameMasterTypes.Player.class,
              bnet.protocol.game_master.GameMasterTypes.Player.Builder.class);
          internal_static_bnet_protocol_game_master_ConnectInfo_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_bnet_protocol_game_master_ConnectInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_game_master_ConnectInfo_descriptor,
              new java.lang.String[] { "ToonId", "Host", "Port", "Token", "Attribute", },
              bnet.protocol.game_master.GameMasterTypes.ConnectInfo.class,
              bnet.protocol.game_master.GameMasterTypes.ConnectInfo.Builder.class);
          internal_static_bnet_protocol_game_master_GameStatsBucket_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_bnet_protocol_game_master_GameStatsBucket_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_game_master_GameStatsBucket_descriptor,
              new java.lang.String[] { "BucketMin", "BucketMax", "WaitMilliseconds", "GamesPerHour", "ActiveGames", "ActivePlayers", "FormingGames", "WaitingPlayers", },
              bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.class,
              bnet.protocol.game_master.GameMasterTypes.GameStatsBucket.Builder.class);
          internal_static_bnet_protocol_game_master_GameFactoryDescription_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_bnet_protocol_game_master_GameFactoryDescription_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_game_master_GameFactoryDescription_descriptor,
              new java.lang.String[] { "Id", "Name", "Attribute", "StatsBucket", },
              bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription.class,
              bnet.protocol.game_master.GameMasterTypes.GameFactoryDescription.Builder.class);
          internal_static_bnet_protocol_game_master_GameHandle_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_bnet_protocol_game_master_GameHandle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_bnet_protocol_game_master_GameHandle_descriptor,
              new java.lang.String[] { "FactoryId", "GameId", },
              bnet.protocol.game_master.GameMasterTypes.GameHandle.class,
              bnet.protocol.game_master.GameMasterTypes.GameHandle.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          bnet.protocol.attribute.AttributeProto.getDescriptor(),
          bnet.protocol.Entity.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
